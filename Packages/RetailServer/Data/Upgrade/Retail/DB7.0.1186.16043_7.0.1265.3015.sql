/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

GO

SET NUMERIC_ROUNDABORT OFF;

GO

GO
PRINT N'Dropping [ax].[CHANNELREFINABLEATTRIBUTE_DELETED]...';


GO
DROP TRIGGER [ax].[CHANNELREFINABLEATTRIBUTE_DELETED];


GO
PRINT N'Dropping [ax].[CHANNELREFINABLEATTRIBUTE_INSERTED]...';


GO
DROP TRIGGER [ax].[CHANNELREFINABLEATTRIBUTE_INSERTED];


GO
PRINT N'Dropping [ax].[CHANNELREFINABLEATTRIBUTE_UPDATED]...';


GO
DROP TRIGGER [ax].[CHANNELREFINABLEATTRIBUTE_UPDATED];


GO
PRINT N'Dropping Full-text Index on [ax].[INVENTTABLE]...';


GO
DROP FULLTEXT INDEX ON [ax].[INVENTTABLE];


GO
PRINT N'Dropping [ax].[INVENTTABLE].[IX_INVENTTABLE_RECID]...';


GO
DROP INDEX [IX_INVENTTABLE_RECID]
    ON [ax].[INVENTTABLE];


GO
PRINT N'Dropping [crt].[ITEMCHANNELBASEPRICEVIEW].[IX_ITEMCHANNELBASEPRICEVIEW]...';


GO
DROP INDEX [IX_ITEMCHANNELBASEPRICEVIEW]
    ON [crt].[ITEMCHANNELBASEPRICEVIEW];


GO
PRINT N'Dropping [crt].[ITEMCHANNELTRADEAGREEMENTPRICEVIEW].[IX_ITEMCHANNELTRADEAGREEMENTPRICEVIEW]...';


GO
DROP INDEX [IX_ITEMCHANNELTRADEAGREEMENTPRICEVIEW]
    ON [crt].[ITEMCHANNELTRADEAGREEMENTPRICEVIEW];


GO
PRINT N'Dropping [crt].[PRODUCTCATALOGRULESVIEW].[IX_PRODUCTCATALOGRULESVIEW]...';


GO
DROP INDEX [IX_PRODUCTCATALOGRULESVIEW]
    ON [crt].[PRODUCTCATALOGRULESVIEW];


GO
PRINT N'Dropping [crt].[PUBCATALOGCHANNELVIEW].[IX_PUBCATALOGCHANNELVIEW_CATALOG]...';


GO
DROP INDEX [IX_PUBCATALOGCHANNELVIEW_CATALOG]
    ON [crt].[PUBCATALOGCHANNELVIEW];


GO
PRINT N'Dropping [crt].[PUBCATALOGCHANNELVIEW].[IX_PUBCATALOGCHANNELVIEW_CHANNEL_CATALOG]...';


GO
DROP INDEX [IX_PUBCATALOGCHANNELVIEW_CHANNEL_CATALOG]
    ON [crt].[PUBCATALOGCHANNELVIEW];


GO
PRINT N'Dropping [crt].[PRODUCTASSORTMENTRULES].[IX_PRODUCTASSORTMENTRULES_ASSORTMENTID_PRODUCTID_VALIDFROM_VALIDTO]...';


GO
DROP INDEX [IX_PRODUCTASSORTMENTRULES_ASSORTMENTID_PRODUCTID_VALIDFROM_VALIDTO]
    ON [crt].[PRODUCTASSORTMENTRULES];


GO
PRINT N'Dropping [crt].[CHANNELCATEGORYHIERARCHYVIEW].[IX_CHANNELCATEGORYHIERARCHYVIEW]...';


GO
DROP INDEX [IX_CHANNELCATEGORYHIERARCHYVIEW]
    ON [crt].[CHANNELCATEGORYHIERARCHYVIEW];


GO
PRINT N'Dropping [crt].[PUBCATALOGCHANNELATTRIBUTEINHERITEDVIEW].[IX_PUBCATALOGCHANNELATTRIBUTEINHERITEDVIEW_CATALOG]...';


GO
DROP INDEX [IX_PUBCATALOGCHANNELATTRIBUTEINHERITEDVIEW_CATALOG]
    ON [crt].[PUBCATALOGCHANNELATTRIBUTEINHERITEDVIEW];


GO
PRINT N'Dropping [crt].[PUBCATALOGCHANNELATTRIBUTEINHERITEDVIEW].[IX_PUBCATALOGCHANNELATTRIBUTEINHERITEDVIEW_CHANNEL_CATALOG]...';


GO
DROP INDEX [IX_PUBCATALOGCHANNELATTRIBUTEINHERITEDVIEW_CHANNEL_CATALOG]
    ON [crt].[PUBCATALOGCHANNELATTRIBUTEINHERITEDVIEW];


GO
PRINT N'Dropping [ax].[DF_CFOPTABLE_BR_NAME]...';


GO
ALTER TABLE [ax].[CFOPTABLE_BR] DROP CONSTRAINT [DF_CFOPTABLE_BR_NAME];


GO
PRINT N'Dropping [ax].[DF_FISCALESTABLISHMENT_BR_CONSUMEREFDOCCSC]...';


GO
ALTER TABLE [ax].[FISCALESTABLISHMENT_BR] DROP CONSTRAINT [DF_FISCALESTABLISHMENT_BR_CONSUMEREFDOCCSC];


GO
PRINT N'Dropping [ax].[DF_RETAILMEDIARESOURCE_RESOURCEID]...';


GO
ALTER TABLE [ax].[RETAILMEDIARESOURCE] DROP CONSTRAINT [DF_RETAILMEDIARESOURCE_RESOURCEID];


GO
PRINT N'Dropping [ax].[DF_RETAILMEDIARESOURCE_RESOURCEURL]...';


GO
ALTER TABLE [ax].[RETAILMEDIARESOURCE] DROP CONSTRAINT [DF_RETAILMEDIARESOURCE_RESOURCEURL];


GO
PRINT N'Dropping [ax].[DF_RETAILSTAFFTABLE_BLOCKED]...';


GO
ALTER TABLE [ax].[RETAILSTAFFTABLE] DROP CONSTRAINT [DF_RETAILSTAFFTABLE_BLOCKED];


GO
PRINT N'Dropping [ax].[DF_RETAILSTAFFTABLE_CHANGEPASSWORD]...';


GO
ALTER TABLE [ax].[RETAILSTAFFTABLE] DROP CONSTRAINT [DF_RETAILSTAFFTABLE_CHANGEPASSWORD];


GO
PRINT N'Dropping [ax].[DF_RETAILSTAFFTABLE_CONTINUEONTSERRORS]...';


GO
ALTER TABLE [ax].[RETAILSTAFFTABLE] DROP CONSTRAINT [DF_RETAILSTAFFTABLE_CONTINUEONTSERRORS];


GO
PRINT N'Dropping [ax].[DF_RETAILSTAFFTABLE_CULTURENAME]...';


GO
ALTER TABLE [ax].[RETAILSTAFFTABLE] DROP CONSTRAINT [DF_RETAILSTAFFTABLE_CULTURENAME];


GO
PRINT N'Dropping [ax].[DF_RETAILSTAFFTABLE_EMPLOYMENTTYPE]...';


GO
ALTER TABLE [ax].[RETAILSTAFFTABLE] DROP CONSTRAINT [DF_RETAILSTAFFTABLE_EMPLOYMENTTYPE];


GO
PRINT N'Dropping [ax].[DF_RETAILSTAFFTABLE_IMAGE]...';


GO
ALTER TABLE [ax].[RETAILSTAFFTABLE] DROP CONSTRAINT [DF_RETAILSTAFFTABLE_IMAGE];


GO
PRINT N'Dropping [ax].[DF_RETAILSTAFFTABLE_MODIFIEDDATETIME]...';


GO
ALTER TABLE [ax].[RETAILSTAFFTABLE] DROP CONSTRAINT [DF_RETAILSTAFFTABLE_MODIFIEDDATETIME];


GO
PRINT N'Dropping [ax].[DF_RETAILSTAFFTABLE_NAMEONRECEIPT]...';


GO
ALTER TABLE [ax].[RETAILSTAFFTABLE] DROP CONSTRAINT [DF_RETAILSTAFFTABLE_NAMEONRECEIPT];


GO
PRINT N'Dropping [ax].[DF_RETAILSTAFFTABLE_PASSWORD]...';


GO
ALTER TABLE [ax].[RETAILSTAFFTABLE] DROP CONSTRAINT [DF_RETAILSTAFFTABLE_PASSWORD];


GO
PRINT N'Dropping [ax].[DF_RETAILSTAFFTABLE_PASSWORDDATA]...';


GO
ALTER TABLE [ax].[RETAILSTAFFTABLE] DROP CONSTRAINT [DF_RETAILSTAFFTABLE_PASSWORDDATA];


GO
PRINT N'Dropping [ax].[DF_RETAILSTAFFTABLE_PASSWORDHASHALGORITHM]...';


GO
ALTER TABLE [ax].[RETAILSTAFFTABLE] DROP CONSTRAINT [DF_RETAILSTAFFTABLE_PASSWORDHASHALGORITHM];


GO
PRINT N'Dropping [ax].[DF_RETAILSTAFFTABLE_PASSWORDLASTCHANGEDDATETIME]...';


GO
ALTER TABLE [ax].[RETAILSTAFFTABLE] DROP CONSTRAINT [DF_RETAILSTAFFTABLE_PASSWORDLASTCHANGEDDATETIME];


GO
PRINT N'Dropping [ax].[DF_RETAILSTAFFTABLE_PASSWORDLASTCHANGEDDATETIMETZID]...';


GO
ALTER TABLE [ax].[RETAILSTAFFTABLE] DROP CONSTRAINT [DF_RETAILSTAFFTABLE_PASSWORDLASTCHANGEDDATETIMETZID];


GO
PRINT N'Dropping [ax].[DF_RETAILSTAFFTABLE_PASSWORDSALT]...';


GO
ALTER TABLE [ax].[RETAILSTAFFTABLE] DROP CONSTRAINT [DF_RETAILSTAFFTABLE_PASSWORDSALT];


GO
PRINT N'Dropping [ax].[DF_RETAILSTAFFTABLE_STAFFID]...';


GO
ALTER TABLE [ax].[RETAILSTAFFTABLE] DROP CONSTRAINT [DF_RETAILSTAFFTABLE_STAFFID];


GO
PRINT N'Dropping [ax].[DF_MARKUPTABLE_INTRASTAT_FI]...';


GO
ALTER TABLE [ax].[MARKUPTABLE] DROP CONSTRAINT [DF_MARKUPTABLE_INTRASTAT_FI];


GO
PRINT N'Dropping [crt].[SEARCHPRODUCTSBYTEXT]...';


GO
DROP FUNCTION [crt].[SEARCHPRODUCTSBYTEXT];


GO
PRINT N'Dropping [crt].[GETPURCHASEHISTORY]...';


GO
DROP FUNCTION [crt].[GETPURCHASEHISTORY];


GO
PRINT N'Dropping [crt].[GETPRODUCTMEDIALOCATIONS]...';


GO
DROP FUNCTION [crt].[GETPRODUCTMEDIALOCATIONS];


GO
PRINT N'Removing schema binding from [crt].[CHANNELCATEGORYHIERARCHYIMAGEVIEW]...';


GO
ALTER VIEW [crt].[CHANNELCATEGORYHIERARCHYIMAGEVIEW]
AS
(SELECT rpec.[PARENTCATEGORY],
        rpec.[NAME],
        rpec.[ORIGINID] AS RECID,
        rpct.[ORIGINID] AS CHANNELID,
        CAST (N'' AS XML).value('xs:base64Binary(xs:hexBinary(sql:column("[rmr].[RESOURCEBLOB]")))', 'NVARCHAR(MAX)') AS [OFFLINEIMAGE]
 FROM   [ax].RETAILPUBRETAILCHANNELTABLE AS rpct
        INNER JOIN
        [ax].RETAILPUBECORESCATEGORY AS rpec
        ON rpct.[CATEGORYHIERARCHY] = rpec.[CATEGORYHIERARCHY]
           AND rpct.[ORIGINID] = rpec.[CHANNEL]
        LEFT OUTER JOIN
        [ax].RETAILMEDIAANDMASTERENTITYRELATION AS rmamer
        ON rpec.[ORIGINID] = rmamer.[MASTERENTITYRECID]
           AND rmamer.[ISDEFAULT] = 1
        LEFT OUTER JOIN
        [ax].RETAILMEDIARESOURCE AS rmr
        ON rmamer.[MEDIARESOURCEID] = rmr.[RESOURCEID]);


GO
PRINT N'Dropping [crt].[INSERTSALESORDER]...';


GO
DROP PROCEDURE [crt].[INSERTSALESORDER];


GO
PRINT N'Dropping [crt].[DELETESHIFTSTAGINGANDINSERTSHIFT]...';


GO
DROP PROCEDURE [crt].[DELETESHIFTSTAGINGANDINSERTSHIFT];


GO
PRINT N'Dropping [crt].[INSERTSHIFT]...';


GO
DROP PROCEDURE [crt].[INSERTSHIFT];


GO
PRINT N'Dropping [crt].[INSERTSHIFTACCOUNTLINE]...';


GO
DROP PROCEDURE [crt].[INSERTSHIFTACCOUNTLINE];


GO
PRINT N'Dropping [crt].[INSERTCUSTOMERORDERTRANSACTION]...';


GO
DROP PROCEDURE [crt].[INSERTCUSTOMERORDERTRANSACTION];


GO
PRINT N'Dropping [crt].[CUSTOMERORDERTRANSACTIONTABLETYPE]...';


GO
DROP TYPE [crt].[CUSTOMERORDERTRANSACTIONTABLETYPE];


GO
PRINT N'Dropping [crt].[SHIFTACCOUNTLINETYPE]...';


GO
DROP TYPE [crt].[SHIFTACCOUNTLINETYPE];


GO
PRINT N'Creating [crt].[CUSTOMERORDERTRANSACTIONTABLETYPE]...';


GO
CREATE TYPE [crt].[CUSTOMERORDERTRANSACTIONTABLETYPE] AS TABLE (
    [STORE]               NVARCHAR (10)    NOT NULL,
    [TERMINAL]            NVARCHAR (10)    NOT NULL,
    [TRANSACTIONID]       NVARCHAR (44)    NOT NULL,
    [DATAAREAID]          NVARCHAR (4)     NOT NULL,
    [CANCELLATIONCHARGE]  NUMERIC (32, 16) NULL,
    [DEPOSITOVERRIDE]     NUMERIC (32, 16) NULL,
    [REQUIREDDEPOSIT]     NUMERIC (32, 16) NOT NULL,
    [CALCULATEDDEPOSIT]   NUMERIC (32, 16) NOT NULL,
    [PREPAYMENTPAID]      NUMERIC (32, 16) NOT NULL,
    [PREPAYMENTINVOICED]  NUMERIC (32, 16) NOT NULL,
    [QUOTEEXPIRATIONDATE] DATETIME         NULL,
    [CUSTOMERORDERTYPE]   INT              NOT NULL,
    [CUSTOMERORDERMODE]   INT              NOT NULL);


GO
PRINT N'Creating [crt].[SHIFTACCOUNTLINETYPE]...';


GO
CREATE TYPE [crt].[SHIFTACCOUNTLINETYPE] AS TABLE (
    [INCOMEEXEPENSEACCOUNT] NVARCHAR (10)    NULL,
    [ACCOUNTTYPE]           INT              NULL,
    [AMOUNT]                NUMERIC (32, 16) NULL,
    [SHIFTID]               BIGINT           NULL,
    [STOREID]               NVARCHAR (10)    NULL,
    [TERMINALID]            NVARCHAR (10)    NULL,
    [CHANNEL]               BIGINT           NULL,
    [DATAAREAID]            NVARCHAR (4)     NULL);


GO
PRINT N'Altering [ax].[CFOPTABLE_BR]...';


GO
ALTER TABLE [ax].[CFOPTABLE_BR] ALTER COLUMN [NAME] NVARCHAR (150) NOT NULL;


GO
PRINT N'Altering [ax].[FISCALESTABLISHMENT_BR]...';


GO
ALTER TABLE [ax].[FISCALESTABLISHMENT_BR] ALTER COLUMN [CONSUMEREFDOCCSC] NVARCHAR (MAX) NULL;


GO
PRINT N'Altering [ax].[MARKUPTABLE]...';


GO
ALTER TABLE [ax].[MARKUPTABLE] DROP COLUMN [INTRASTAT_FI];


GO
PRINT N'Starting rebuilding table [ax].[RETAILDISCOUNTMIXANDMATCH]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [ax].[tmp_ms_xx_RETAILDISCOUNTMIXANDMATCH] (
    [RECID]                   BIGINT           NOT NULL,
    [DEALPRICEVALUE]          NUMERIC (32, 16) NULL,
    [DISCOUNTAMOUNTVALUE]     NUMERIC (32, 16) NULL,
    [MIXANDMATCHDISCOUNTTYPE] INT              NULL,
    [NOOFLEASTEXPENSIVELINES] INT              NULL,
    [NUMBEROFTIMESAPPLICABLE] INT              NULL,
    [LEASTEXPENSIVEMODE]      INT              NULL,
    [DATAAREAID]              NVARCHAR (4)     NOT NULL,
    [ROWVERSION]              TIMESTAMP        NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_I_RETAILDISCOUNTMIXANDMATCH_RECID1] PRIMARY KEY CLUSTERED ([RECID] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [ax].[RETAILDISCOUNTMIXANDMATCH])
    BEGIN
        INSERT INTO [ax].[tmp_ms_xx_RETAILDISCOUNTMIXANDMATCH] ([RECID], [DEALPRICEVALUE], [DISCOUNTAMOUNTVALUE], [MIXANDMATCHDISCOUNTTYPE], [NOOFLEASTEXPENSIVELINES], [NUMBEROFTIMESAPPLICABLE], [DATAAREAID])
        SELECT   [RECID],
                 [DEALPRICEVALUE],
                 [DISCOUNTAMOUNTVALUE],
                 [MIXANDMATCHDISCOUNTTYPE],
                 [NOOFLEASTEXPENSIVELINES],
                 [NUMBEROFTIMESAPPLICABLE],
                 [DATAAREAID]
        FROM     [ax].[RETAILDISCOUNTMIXANDMATCH]
        ORDER BY [RECID] ASC;
    END

DROP TABLE [ax].[RETAILDISCOUNTMIXANDMATCH];

EXECUTE sp_rename N'[ax].[tmp_ms_xx_RETAILDISCOUNTMIXANDMATCH]', N'RETAILDISCOUNTMIXANDMATCH';

EXECUTE sp_rename N'[ax].[tmp_ms_xx_constraint_I_RETAILDISCOUNTMIXANDMATCH_RECID1]', N'I_RETAILDISCOUNTMIXANDMATCH_RECID', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [ax].[RETAILMEDIARESOURCE]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [ax].[tmp_ms_xx_RETAILMEDIARESOURCE] (
    [RECID]        BIGINT          NOT NULL,
    [RESOURCEID]   INT             CONSTRAINT [DF_RETAILMEDIARESOURCE_RESOURCEID] DEFAULT ((0)) NOT NULL,
    [RESOURCEURL]  NVARCHAR (MAX)  NULL,
    [RESOURCEBLOB] VARBINARY (MAX) NULL,
    [DESCRIPTION]  NVARCHAR (1000) CONSTRAINT [DF_RETAILMEDIARESOURCE_DESCRIPTION] DEFAULT ('') NOT NULL,
    [ROWVERSION]   TIMESTAMP       NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_I_136798797_-20161560311] UNIQUE NONCLUSTERED ([RESOURCEID] ASC),
    CONSTRAINT [tmp_ms_xx_constraint_I_RETAILMEDIARESOURCE_RECID1] PRIMARY KEY CLUSTERED ([RECID] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [ax].[RETAILMEDIARESOURCE])
    BEGIN
        INSERT INTO [ax].[tmp_ms_xx_RETAILMEDIARESOURCE] ([RECID], [RESOURCEID], [RESOURCEURL], [RESOURCEBLOB])
        SELECT   [RECID],
                 [RESOURCEID],
                 [RESOURCEURL],
                 [RESOURCEBLOB]
        FROM     [ax].[RETAILMEDIARESOURCE]
        ORDER BY [RECID] ASC;
    END

DROP TABLE [ax].[RETAILMEDIARESOURCE];

EXECUTE sp_rename N'[ax].[tmp_ms_xx_RETAILMEDIARESOURCE]', N'RETAILMEDIARESOURCE';

EXECUTE sp_rename N'[ax].[tmp_ms_xx_constraint_I_136798797_-20161560311]', N'I_136798797_-2016156031', N'OBJECT';

EXECUTE sp_rename N'[ax].[tmp_ms_xx_constraint_I_RETAILMEDIARESOURCE_RECID1]', N'I_RETAILMEDIARESOURCE_RECID', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [ax].[RETAILSTAFFTABLE]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [ax].[tmp_ms_xx_RETAILSTAFFTABLE] (
    [RECID]                           BIGINT          NOT NULL,
    [BLOCKED]                         INT             CONSTRAINT [DF_RETAILSTAFFTABLE_BLOCKED] DEFAULT ((0)) NOT NULL,
    [CHANGEPASSWORD]                  INT             CONSTRAINT [DF_RETAILSTAFFTABLE_CHANGEPASSWORD] DEFAULT ((0)) NOT NULL,
    [CONTINUEONTSERRORS]              INT             CONSTRAINT [DF_RETAILSTAFFTABLE_CONTINUEONTSERRORS] DEFAULT ((0)) NOT NULL,
    [CULTURENAME]                     NVARCHAR (7)    CONSTRAINT [DF_RETAILSTAFFTABLE_CULTURENAME] DEFAULT ('') NOT NULL,
    [EMPLOYMENTTYPE]                  INT             CONSTRAINT [DF_RETAILSTAFFTABLE_EMPLOYMENTTYPE] DEFAULT ((0)) NOT NULL,
    [IMAGE]                           NVARCHAR (1999) CONSTRAINT [DF_RETAILSTAFFTABLE_IMAGE] DEFAULT ('') NOT NULL,
    [NAMEONRECEIPT]                   NVARCHAR (15)   CONSTRAINT [DF_RETAILSTAFFTABLE_NAMEONRECEIPT] DEFAULT ('') NOT NULL,
    [PASSWORD]                        NVARCHAR (32)   CONSTRAINT [DF_RETAILSTAFFTABLE_PASSWORD] DEFAULT ('') NOT NULL,
    [PASSWORDDATA]                    NVARCHAR (128)  CONSTRAINT [DF_RETAILSTAFFTABLE_PASSWORDDATA] DEFAULT ('') NOT NULL,
    [STAFFID]                         NVARCHAR (25)   CONSTRAINT [DF_RETAILSTAFFTABLE_STAFFID] DEFAULT ('') NOT NULL,
    [PASSWORDSALT]                    NVARCHAR (128)  CONSTRAINT [DF_RETAILSTAFFTABLE_PASSWORDSALT] DEFAULT ('') NOT NULL,
    [PASSWORDHASHALGORITHM]           NVARCHAR (25)   CONSTRAINT [DF_RETAILSTAFFTABLE_PASSWORDHASHALGORITHM] DEFAULT ('') NOT NULL,
    [PASSWORDLASTCHANGEDDATETIME]     DATETIME        CONSTRAINT [DF_RETAILSTAFFTABLE_PASSWORDLASTCHANGEDDATETIME] DEFAULT ('1900-01-01 00:00:00.000') NOT NULL,
    [PASSWORDLASTCHANGEDDATETIMETZID] INT             CONSTRAINT [DF_RETAILSTAFFTABLE_PASSWORDLASTCHANGEDDATETIMETZID] DEFAULT ((37001)) NOT NULL,
    [PASSWORDLASTUPDATEDOPERATION]    INT             CONSTRAINT [DF_RETAILSTAFFTABLE_PASSWORDLASTUPDATEDOPERATION] DEFAULT ((0)) NOT NULL,
    [MODIFIEDDATETIME]                DATETIME        CONSTRAINT [DF_RETAILSTAFFTABLE_MODIFIEDDATETIME] DEFAULT (getutcdate()) NOT NULL,
    [ROWVERSION]                      TIMESTAMP       NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_I_1254821775_14632329151] UNIQUE NONCLUSTERED ([STAFFID] ASC),
    CONSTRAINT [tmp_ms_xx_constraint_I_RETAILSTAFFTABLE_RECID1] PRIMARY KEY CLUSTERED ([RECID] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [ax].[RETAILSTAFFTABLE])
    BEGIN
        INSERT INTO [ax].[tmp_ms_xx_RETAILSTAFFTABLE] ([RECID], [BLOCKED], [CHANGEPASSWORD], [CONTINUEONTSERRORS], [CULTURENAME], [EMPLOYMENTTYPE], [IMAGE], [NAMEONRECEIPT], [PASSWORD], [PASSWORDDATA], [STAFFID], [PASSWORDSALT], [PASSWORDHASHALGORITHM], [PASSWORDLASTCHANGEDDATETIME], [PASSWORDLASTCHANGEDDATETIMETZID], [MODIFIEDDATETIME])
        SELECT   [RECID],
                 [BLOCKED],
                 [CHANGEPASSWORD],
                 [CONTINUEONTSERRORS],
                 [CULTURENAME],
                 [EMPLOYMENTTYPE],
                 [IMAGE],
                 [NAMEONRECEIPT],
                 [PASSWORD],
                 [PASSWORDDATA],
                 [STAFFID],
                 [PASSWORDSALT],
                 [PASSWORDHASHALGORITHM],
                 [PASSWORDLASTCHANGEDDATETIME],
                 [PASSWORDLASTCHANGEDDATETIMETZID],
                 [MODIFIEDDATETIME]
        FROM     [ax].[RETAILSTAFFTABLE]
        ORDER BY [RECID] ASC;
    END

DROP TABLE [ax].[RETAILSTAFFTABLE];

EXECUTE sp_rename N'[ax].[tmp_ms_xx_RETAILSTAFFTABLE]', N'RETAILSTAFFTABLE';

EXECUTE sp_rename N'[ax].[tmp_ms_xx_constraint_I_1254821775_14632329151]', N'I_1254821775_1463232915', N'OBJECT';

EXECUTE sp_rename N'[ax].[tmp_ms_xx_constraint_I_RETAILSTAFFTABLE_RECID1]', N'I_RETAILSTAFFTABLE_RECID', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Altering [crt].[CUSTOMERORDERTRANSACTION]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

ALTER TABLE [crt].[CUSTOMERORDERTRANSACTION]
    ADD [CUSTOMERORDERMODE] INT NOT NULL, 
        CONSTRAINT [SD_CUSTOMERORDERTRANSACTION_2d7adbe8e2c6482fa120c39282d949f9] DEFAULT 0 FOR [CUSTOMERORDERMODE];

ALTER TABLE [crt].[CUSTOMERORDERTRANSACTION] DROP CONSTRAINT [SD_CUSTOMERORDERTRANSACTION_2d7adbe8e2c6482fa120c39282d949f9];

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Altering [crt].[TMPASSORTEDPRODUCTS]...';


GO
ALTER TABLE [crt].[TMPASSORTEDPRODUCTS] ALTER COLUMN [VALIDFROM] DATE NOT NULL;

ALTER TABLE [crt].[TMPASSORTEDPRODUCTS] ALTER COLUMN [VALIDTO] DATE NOT NULL;


GO
PRINT N'Creating [ax].[RETAILMEDIAPRODUCTRELATION]...';


GO
CREATE TABLE [ax].[RETAILMEDIAPRODUCTRELATION] (
    [RECID]                BIGINT    NOT NULL,
    [MEDIARESOURCE]        BIGINT    NOT NULL,
    [PRODUCT]              BIGINT    NOT NULL,
    [CATALOG]              BIGINT    NOT NULL,
    [INTERNALORGANIZATION] BIGINT    NOT NULL,
    [ISDEFAULT]            INT       NOT NULL,
    [ROWVERSION]           TIMESTAMP NOT NULL,
    CONSTRAINT [I_RETAILMEDIAPRODUCTRELATION_RECID] PRIMARY KEY NONCLUSTERED ([RECID] ASC),
    CONSTRAINT [I_1181535486_-1920435397] UNIQUE CLUSTERED ([PRODUCT] ASC, [MEDIARESOURCE] ASC, [CATALOG] ASC, [INTERNALORGANIZATION] ASC)
);


GO
PRINT N'Creating [ax].[RETAILMEDIATEMPLATE]...';


GO
CREATE TABLE [ax].[RETAILMEDIATEMPLATE] (
    [RECID]            BIGINT         NOT NULL,
    [MASTERENTITYTYPE] INT            NOT NULL,
    [IMAGEINDEX]       INT            NOT NULL,
    [IMAGEURL]         NVARCHAR (MAX) NULL,
    [ISDEFAULT]        INT            NOT NULL,
    [ROWVERSION]       TIMESTAMP      NOT NULL,
    CONSTRAINT [I_RETAILMEDIATEMPLATE_RECID] PRIMARY KEY NONCLUSTERED ([RECID] ASC),
    CONSTRAINT [I_-1625247853_2081799500] UNIQUE CLUSTERED ([MASTERENTITYTYPE] ASC, [IMAGEINDEX] ASC)
);


GO
PRINT N'Creating [crt].[PRODUCTASSORTMENTRULES_V2]...';


GO
CREATE TABLE [crt].[PRODUCTASSORTMENTRULES_V2] (
    [ASSORTMENTID] BIGINT NOT NULL,
    [PRODUCTID]    BIGINT NOT NULL,
    [VALIDFROM]    DATE   NOT NULL,
    [VALIDTO]      DATE   NOT NULL
);


GO
PRINT N'Creating [crt].[PRODUCTASSORTMENTRULES_V2].[IX_PRODUCTASSORTMENTRULES]...';


GO
CREATE UNIQUE CLUSTERED INDEX [IX_PRODUCTASSORTMENTRULES]
    ON [crt].[PRODUCTASSORTMENTRULES_V2]([PRODUCTID] ASC, [ASSORTMENTID] ASC, [VALIDFROM] ASC, [VALIDTO] ASC);


GO
PRINT N'Creating [ax].[INVENTTABLE].[IX_INVENTTABLE_RECID]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_INVENTTABLE_RECID]
    ON [ax].[INVENTTABLE]([RECID] ASC)
    INCLUDE([PRODUCT]);


GO
PRINT N'Creating [ax].[PRICEDISCTABLE].[IX_PRICEDISCTABLE_PRICE_BY_ITEM]...';


GO
CREATE NONCLUSTERED INDEX [IX_PRICEDISCTABLE_PRICE_BY_ITEM]
    ON [ax].[PRICEDISCTABLE]([ITEMRELATION] ASC, [RELATION] ASC, [ITEMCODE] ASC)
    INCLUDE([ACCOUNTCODE], [ACCOUNTRELATION], [INVENTDIMID], [CURRENCY], [FROMDATE], [TODATE], [DATAAREAID]);


GO
PRINT N'Creating [ax].[RETAILPUBECORESCATEGORY].[IX_RETAILPUBECORESCATEGORY_NESTEDSETLEFT_NESTEDSETRIGHT_ORIGINID_CHANNEL]...';


GO
CREATE NONCLUSTERED INDEX [IX_RETAILPUBECORESCATEGORY_NESTEDSETLEFT_NESTEDSETRIGHT_ORIGINID_CHANNEL]
    ON [ax].[RETAILPUBECORESCATEGORY]([NESTEDSETLEFT] ASC, [NESTEDSETRIGHT] ASC, [ORIGINID] ASC, [CHANNEL] ASC);


GO
PRINT N'Creating [crt].[DOWNLOADSESSION].[IX_DOWNLOADSESSION_DATEREQUESTED]...';


GO
CREATE NONCLUSTERED INDEX [IX_DOWNLOADSESSION_DATEREQUESTED]
    ON [crt].[DOWNLOADSESSION]([DATEREQUESTED] ASC);


GO
PRINT N'Creating [crt].[UPLOADSESSION].[IX_UPLOADSESSION_DATEUPLOADED]...';


GO
CREATE NONCLUSTERED INDEX [IX_UPLOADSESSION_DATEUPLOADED]
    ON [crt].[UPLOADSESSION]([DATEUPLOADED] ASC);


GO
PRINT N'Creating [ax].[DF_CFOPTABLE_BR_NAME]...';


GO
ALTER TABLE [ax].[CFOPTABLE_BR]
    ADD CONSTRAINT [DF_CFOPTABLE_BR_NAME] DEFAULT ('') FOR [NAME];


GO
PRINT N'Creating [ax].[DF_RETAILMEDIAPRODUCTRELATION_INTERNALORGANIZATION]...';


GO
ALTER TABLE [ax].[RETAILMEDIAPRODUCTRELATION]
    ADD CONSTRAINT [DF_RETAILMEDIAPRODUCTRELATION_INTERNALORGANIZATION] DEFAULT ((0)) FOR [INTERNALORGANIZATION];


GO
PRINT N'Creating [ax].[DF_RETAILMEDIAPRODUCTRELATION_ISDEFAULT]...';


GO
ALTER TABLE [ax].[RETAILMEDIAPRODUCTRELATION]
    ADD CONSTRAINT [DF_RETAILMEDIAPRODUCTRELATION_ISDEFAULT] DEFAULT ((0)) FOR [ISDEFAULT];


GO
PRINT N'Creating [ax].[DF_RETAILMEDIAPRODUCTRELATION_MEDIARESOURCE]...';


GO
ALTER TABLE [ax].[RETAILMEDIAPRODUCTRELATION]
    ADD CONSTRAINT [DF_RETAILMEDIAPRODUCTRELATION_MEDIARESOURCE] DEFAULT ((0)) FOR [MEDIARESOURCE];


GO
PRINT N'Creating [ax].[DF_RETAILMEDIAPRODUCTRELATION_PRODUCT]...';


GO
ALTER TABLE [ax].[RETAILMEDIAPRODUCTRELATION]
    ADD CONSTRAINT [DF_RETAILMEDIAPRODUCTRELATION_PRODUCT] DEFAULT ((0)) FOR [PRODUCT];


GO
PRINT N'Creating [ax].[DF_RETAILMEDIAPRODUCTRELATION_CATALOG]...';


GO
ALTER TABLE [ax].[RETAILMEDIAPRODUCTRELATION]
    ADD CONSTRAINT [DF_RETAILMEDIAPRODUCTRELATION_CATALOG] DEFAULT ((0)) FOR [CATALOG];


GO
PRINT N'Creating [ax].[DF_RETAILMEDIATEMPLATE_IMAGEINDEX]...';


GO
ALTER TABLE [ax].[RETAILMEDIATEMPLATE]
    ADD CONSTRAINT [DF_RETAILMEDIATEMPLATE_IMAGEINDEX] DEFAULT ((0)) FOR [IMAGEINDEX];


GO
PRINT N'Creating [ax].[DF_RETAILMEDIATEMPLATE_ISDEFAULT]...';


GO
ALTER TABLE [ax].[RETAILMEDIATEMPLATE]
    ADD CONSTRAINT [DF_RETAILMEDIATEMPLATE_ISDEFAULT] DEFAULT ((0)) FOR [ISDEFAULT];


GO
PRINT N'Creating [ax].[DF_RETAILMEDIATEMPLATE_MASTERENTITYTYPE]...';


GO
ALTER TABLE [ax].[RETAILMEDIATEMPLATE]
    ADD CONSTRAINT [DF_RETAILMEDIATEMPLATE_MASTERENTITYTYPE] DEFAULT ((0)) FOR [MASTERENTITYTYPE];


GO
PRINT N'Creating Full-text Index on [ax].[INVENTTABLE]...';


GO
CREATE FULLTEXT INDEX ON [ax].[INVENTTABLE]
    ([ITEMID])
    KEY INDEX [IX_INVENTTABLE_RECID]
    ON [COMMERCEFULLTEXTCATALOG];


GO
PRINT N'Altering [crt].[GETCATALOGIMAGEATTRIBUTEDEFAULTVALUE]...';


GO

ALTER FUNCTION [crt].GETCATALOGIMAGEATTRIBUTEDEFAULTVALUE ()
RETURNS nvarchar(MAX)
BEGIN
    DECLARE @IMAGE nvarchar(MAX);

    SELECT  TOP 1 @IMAGE = IMAGEURL
    FROM AX.RETAILMEDIATEMPLATE 
    WHERE MASTERENTITYTYPE = 11 -- 11 means Catalog entity type, refer to AX enum RetailMediaMasterEntity.

    RETURN ISNULL(@IMAGE, '');
END
GO
PRINT N'Altering [crt].[GETCATEGORYIMAGEATTRIBUTEDEFAULTVALUE]...';


GO
ALTER FUNCTION [crt].GETCATEGORYIMAGEATTRIBUTEDEFAULTVALUE()
RETURNS nvarchar(MAX)
BEGIN
    DECLARE @IMAGE nvarchar(MAX);

    SELECT  TOP 1 @IMAGE = IMAGEURL
    FROM AX.RETAILMEDIATEMPLATE 
    WHERE MASTERENTITYTYPE = 13  -- 13 means Category entity type, refer to AX enum RetailMediaMasterEntity.

    RETURN ISNULL(@IMAGE, '');
END
GO
PRINT N'Altering [crt].[GETCUSTOMERIMAGEATTRIBUTEDEFAULTVALUE]...';


GO
ALTER FUNCTION [crt].[GETCUSTOMERIMAGEATTRIBUTEDEFAULTVALUE] ()
RETURNS nvarchar(MAX)
BEGIN
    DECLARE @IMAGE nvarchar(MAX);

    SELECT  TOP 1 @IMAGE = IMAGEURL
    FROM AX.RETAILMEDIATEMPLATE 
    WHERE MASTERENTITYTYPE = 16 -- 16 means Customer entity type, refer to AX enum RetailMediaMasterEntity.

    RETURN ISNULL(@IMAGE, '');
END
GO
PRINT N'Altering [crt].[GETEMPLOYEEIMAGEATTRIBUTEDEFAULTVALUE]...';


GO
ALTER FUNCTION [crt].GETEMPLOYEEIMAGEATTRIBUTEDEFAULTVALUE()
RETURNS nvarchar(MAX)
BEGIN
    DECLARE @IMAGE nvarchar(MAX);

    SELECT  TOP 1 @IMAGE = IMAGEURL
    FROM AX.RETAILMEDIATEMPLATE 
    WHERE MASTERENTITYTYPE = 15 -- 15 means Employee entity type, refer to AX enum RetailMediaMasterEntity.

    RETURN ISNULL(@IMAGE, '');
END
GO
PRINT N'Altering [crt].[GETMAXAXDATETIME]...';


GO

ALTER FUNCTION [crt].GETMAXAXDATETIME
(
)
RETURNS DATETIME
BEGIN
    DECLARE @MaxAxDateTime DATETIME;
    SET @MaxAxDateTime = CONVERT(DATETIME, '2154-12-31 23:59:59.000', 20);
    
    RETURN @MaxAxDateTime
END
GO
PRINT N'Altering [crt].[GETMINAXDATETIME]...';


GO

ALTER FUNCTION [crt].GETMINAXDATETIME
(
)
RETURNS DATETIME
BEGIN
    DECLARE @MinAxDateTime DATETIME;
    SET @MinAxDateTime = CONVERT(DATETIME, '1900-01-01 00:00:00.000', 20);
    
    RETURN @MinAxDateTime
END
GO
PRINT N'Refreshing [crt].[GETCUSTOMERSEARCHRESULTS]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[GETCUSTOMERSEARCHRESULTS]';


GO
PRINT N'Refreshing [crt].[GETGLOBALCUSTOMERSBYPARTYID]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[GETGLOBALCUSTOMERSBYPARTYID]';


GO
PRINT N'Refreshing [crt].[GETASSORTEDINVENTDIMCOMBINATIONFORITEM]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[GETASSORTEDINVENTDIMCOMBINATIONFORITEM]';


GO
PRINT N'Refreshing [crt].[GETASSORTEDINVENTITEM]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[GETASSORTEDINVENTITEM]';


GO
PRINT N'Altering [crt].[SEARCHPRODUCTS]...';


GO

-- Dead code (deprecated): This code is not used as of AX 7 RTW.

ALTER FUNCTION [crt].[SEARCHPRODUCTS]
(
    @bi_ChannelId               BIGINT,
    @dt_ChannelDate             DATE,
    @nvc_Locale                 NVARCHAR(7),
    @nvc_SearchText             NVARCHAR(1000)  -- 1000 because the size of the biggest column being looked up is [ax].ECORESPRODUCTTRANSLATION.DESCRIPTION of type NVARCHAR(1000)
)
RETURNS TABLE
RETURN
SELECT RECORDID, SUM(RANKING) AS RANKING
FROM
(
    SELECT [par].PRODUCTID AS RECORDID, [results_itemId].[RANK] AS RANKING
    FROM [crt].LOCALPRODUCTASSORTMENTRULESVIEW par WITH (NOEXPAND)
    INNER JOIN [ax].INVENTTABLE it ON [it].PRODUCT = [par].PRODUCTID
    INNER JOIN CONTAINSTABLE([ax].INVENTTABLE, [ITEMID], @nvc_SearchText) results_itemId ON [it].RECID = [results_itemId].[KEY]
    WHERE [par].CHANNELID = @bi_ChannelId AND [par].VARIANTID = 0 AND @dt_ChannelDate BETWEEN [par].VALIDFROM AND [par].VALIDTO

    UNION ALL
        
    SELECT [par].PRODUCTID AS RECORDID, [results_name].[RANK] AS RANKING
    FROM [crt].LOCALPRODUCTASSORTMENTRULESVIEW par WITH (NOEXPAND)
    INNER JOIN [ax].ECORESPRODUCTTRANSLATION erpt ON [erpt].PRODUCT = [par].PRODUCTID AND [erpt].LANGUAGEID = @nvc_Locale
    INNER JOIN FREETEXTTABLE([ax].ECORESPRODUCTTRANSLATION, [NAME], @nvc_SearchText) results_name ON [erpt].RECID = [results_name].[KEY]
    WHERE [par].CHANNELID = @bi_ChannelId AND [par].VARIANTID = 0 AND @dt_ChannelDate BETWEEN [par].VALIDFROM AND [par].VALIDTO

    UNION ALL

    SELECT [par].PRODUCTID AS RECORDID, [results_partialName].[RANK] AS RANKING
    FROM [crt].LOCALPRODUCTASSORTMENTRULESVIEW par WITH (NOEXPAND)
    INNER JOIN [ax].ECORESPRODUCTTRANSLATION erpt ON [erpt].PRODUCT = [par].PRODUCTID AND [erpt].LANGUAGEID = @nvc_Locale
    INNER JOIN CONTAINSTABLE([ax].ECORESPRODUCTTRANSLATION, [NAME], @nvc_SearchText) results_partialName ON [erpt].RECID = [results_partialName].[KEY]
    WHERE [par].CHANNELID = @bi_ChannelId AND [par].VARIANTID = 0 AND @dt_ChannelDate BETWEEN [par].VALIDFROM AND [par].VALIDTO

    UNION ALL
    
    SELECT [par].PRODUCTID AS RECORDID, [results_description].[RANK] AS RANKING
    FROM [crt].LOCALPRODUCTASSORTMENTRULESVIEW par WITH (NOEXPAND)
    INNER JOIN [ax].ECORESPRODUCTTRANSLATION erpt ON [erpt].PRODUCT = [par].PRODUCTID AND [erpt].LANGUAGEID = @nvc_Locale
    INNER JOIN FREETEXTTABLE([ax].ECORESPRODUCTTRANSLATION, [DESCRIPTION], @nvc_SearchText) results_description ON [erpt].RECID = [results_description].[KEY]
    WHERE [par].CHANNELID = @bi_ChannelId AND [par].VARIANTID = 0 AND @dt_ChannelDate BETWEEN [par].VALIDFROM AND [par].VALIDTO

    UNION ALL

    SELECT [par].PRODUCTID AS RECORDID, [results_translatedColor].[RANK] AS RANKING
    FROM [crt].LOCALPRODUCTASSORTMENTRULESVIEW par WITH (NOEXPAND)
    INNER JOIN [ax].ECORESPRODUCTMASTERCOLOR erpmc ON [erpmc].COLORPRODUCTMASTER = [par].PRODUCTID
    INNER JOIN [ax].ECORESPRODUCTMASTERDIMVALUETRANSLATION erpmdvt ON [erpmdvt].LANGUAGEID = @nvc_Locale AND [erpmdvt].PRODUCTMASTERDIMENSIONVALUE = [erpmc].RECID
    INNER JOIN FREETEXTTABLE([ax].ECORESPRODUCTMASTERDIMVALUETRANSLATION, NAME, @nvc_SearchText) results_translatedColor ON [results_translatedColor].[KEY] = [erpmdvt].RECID
    WHERE [par].CHANNELID = @bi_ChannelId AND [par].VARIANTID = 0 AND @dt_ChannelDate BETWEEN [par].VALIDFROM AND [par].VALIDTO

    UNION ALL

    SELECT [par].PRODUCTID AS RECORDID, [results_translatedConfiguration].[RANK] AS RANKING
    FROM [crt].LOCALPRODUCTASSORTMENTRULESVIEW par WITH (NOEXPAND)
    INNER JOIN [ax].ECORESPRODUCTMASTERCONFIGURATION erpmc ON [erpmc].CONFIGPRODUCTMASTER = [par].PRODUCTID
    INNER JOIN [ax].ECORESPRODUCTMASTERDIMVALUETRANSLATION erpmdvt ON [erpmdvt].LANGUAGEID = @nvc_Locale AND [erpmdvt].PRODUCTMASTERDIMENSIONVALUE = [erpmc].RECID
    INNER JOIN FREETEXTTABLE([ax].ECORESPRODUCTMASTERDIMVALUETRANSLATION, NAME, @nvc_SearchText) results_translatedConfiguration ON [results_translatedConfiguration].[KEY] = [erpmdvt].RECID
    WHERE [par].CHANNELID = @bi_ChannelId AND [par].VARIANTID = 0 AND @dt_ChannelDate BETWEEN [par].VALIDFROM AND [par].VALIDTO

    UNION ALL

    SELECT [par].PRODUCTID AS RECORDID, [results_translatedSize].[RANK] AS RANKING
    FROM [crt].LOCALPRODUCTASSORTMENTRULESVIEW par WITH (NOEXPAND)
    INNER JOIN [ax].ECORESPRODUCTMASTERSIZE erpms ON [erpms].SIZEPRODUCTMASTER = [par].PRODUCTID
    INNER JOIN [ax].ECORESPRODUCTMASTERDIMVALUETRANSLATION erpmdvt ON [erpmdvt].LANGUAGEID = @nvc_Locale AND [erpmdvt].PRODUCTMASTERDIMENSIONVALUE = [erpms].RECID
    INNER JOIN FREETEXTTABLE([ax].ECORESPRODUCTMASTERDIMVALUETRANSLATION, NAME, @nvc_SearchText) results_translatedSize ON [results_translatedSize].[KEY] = [erpmdvt].RECID
    WHERE [par].CHANNELID = @bi_ChannelId AND [par].VARIANTID = 0 AND @dt_ChannelDate BETWEEN [par].VALIDFROM AND [par].VALIDTO

    UNION ALL

    SELECT [par].PRODUCTID AS RECORDID, [results_translatedStyle].[RANK] AS RANKING
    FROM [crt].LOCALPRODUCTASSORTMENTRULESVIEW par WITH (NOEXPAND)
    INNER JOIN [ax].ECORESPRODUCTMASTERSTYLE erpms ON [erpms].STYLEPRODUCTMASTER = [par].PRODUCTID
    INNER JOIN [ax].ECORESPRODUCTMASTERDIMVALUETRANSLATION erpmdvt ON [erpmdvt].LANGUAGEID = @nvc_Locale AND [erpmdvt].PRODUCTMASTERDIMENSIONVALUE = [erpms].RECID
    INNER JOIN FREETEXTTABLE([ax].ECORESPRODUCTMASTERDIMVALUETRANSLATION, NAME, @nvc_SearchText) results_translatedStyle ON [results_translatedStyle].[KEY] = [erpmdvt].RECID
    WHERE [par].CHANNELID = @bi_ChannelId AND [par].VARIANTID = 0 AND @dt_ChannelDate BETWEEN [par].VALIDFROM AND [par].VALIDTO

    UNION ALL

    SELECT [par].PRODUCTID AS RECORDID, [results_color].[RANK] AS RANKING
    FROM [crt].LOCALPRODUCTASSORTMENTRULESVIEW par WITH (NOEXPAND)
    INNER JOIN [ax].ECORESPRODUCTMASTERCOLOR erpmc ON [erpmc].COLORPRODUCTMASTER = [par].PRODUCTID
    INNER JOIN FREETEXTTABLE([ax].ECORESCOLOR, NAME, @nvc_SearchText) results_color ON [results_color].[KEY] = [erpmc].COLOR
    WHERE [par].CHANNELID = @bi_ChannelId AND [par].VARIANTID = 0 AND @dt_ChannelDate BETWEEN [par].VALIDFROM AND [par].VALIDTO

    UNION ALL

    SELECT [par].PRODUCTID AS RECORDID, [results_configuration].[RANK] AS RANKING
    FROM [crt].LOCALPRODUCTASSORTMENTRULESVIEW par WITH (NOEXPAND)
    INNER JOIN [ax].ECORESPRODUCTMASTERCONFIGURATION erpmc ON [erpmc].CONFIGPRODUCTMASTER = [par].PRODUCTID
    INNER JOIN FREETEXTTABLE([ax].ECORESCONFIGURATION, NAME, @nvc_SearchText) results_configuration ON [results_configuration].[KEY] = [erpmc].CONFIGURATION
    WHERE [par].CHANNELID = @bi_ChannelId AND [par].VARIANTID = 0 AND @dt_ChannelDate BETWEEN [par].VALIDFROM AND [par].VALIDTO

    UNION ALL

    SELECT [par].PRODUCTID AS RECORDID, [results_size].[RANK] AS RANKING
    FROM [crt].LOCALPRODUCTASSORTMENTRULESVIEW par WITH (NOEXPAND)
    INNER JOIN [ax].ECORESPRODUCTMASTERSIZE erpms ON [erpms].SIZEPRODUCTMASTER = [par].PRODUCTID
    INNER JOIN FREETEXTTABLE([ax].ECORESSIZE, NAME, @nvc_SearchText) results_size ON [results_size].[KEY] = [erpms].SIZE
    WHERE [par].CHANNELID = @bi_ChannelId AND [par].VARIANTID = 0 AND @dt_ChannelDate BETWEEN [par].VALIDFROM AND [par].VALIDTO

    UNION ALL

    SELECT [par].PRODUCTID AS RECORDID, [results_style].[RANK] AS RANKING
    FROM [crt].LOCALPRODUCTASSORTMENTRULESVIEW par WITH (NOEXPAND)
    INNER JOIN [ax].ECORESPRODUCTMASTERSTYLE erpms ON [erpms].STYLEPRODUCTMASTER = [par].PRODUCTID
    INNER JOIN FREETEXTTABLE([ax].ECORESSTYLE, NAME, @nvc_SearchText) results_style ON [results_style].[KEY] = [erpms].STYLE
    WHERE [par].CHANNELID = @bi_ChannelId AND [par].VARIANTID = 0 AND @dt_ChannelDate BETWEEN [par].VALIDFROM AND [par].VALIDTO
) results
GROUP BY [results].RECORDID
GO
PRINT N'Creating [crt].[GETELECTRONICADDRESS]...';


GO
CREATE FUNCTION [crt].[GETELECTRONICADDRESS]
(
	@i_MethodType INT,
	@i_IsPrimary INT,
	@bi_ParentLocation BIGINT,
	@bi_DirPartyRecId BIGINT,
	@i_IsMobilePhone INT
)
RETURNS TABLE
RETURN

 SELECT
        lea.TYPE AS METHODYTPE,
        lea.RECID AS RECORDID,
		dpl.RECID AS DIRPARTYLOCATIONRECORDID,
        dpt.RECID AS DIRPARTYRECORDID,
        dpt.PARTYNUMBER AS PARTYNUMBER,
		lea.DESCRIPTION AS LOCATIONDESCRIPTION,
        lea.LOCATOR,
        lea.LOCATOREXTENSION,
		ll.LOCATIONID,
        ll.RECID AS LOGISTICSLOCATIONRECORDID,
        ll.PARENTLOCATION,
		lea.ISPRIMARY,
	    lea.ISMOBILEPHONE
    FROM [ax].LOGISTICSELECTRONICADDRESS lea
    INNER JOIN [ax].LOGISTICSLOCATION ll ON lea.LOCATION = ll.RECID
    INNER JOIN [ax].DIRPARTYLOCATION dpl ON ll.RECID = dpl.LOCATION
    INNER JOIN [ax].DIRPARTYTABLE dpt ON dpt.RECID = dpl.PARTY 
    WHERE
        (ll.ISPOSTALADDRESS = 0)
    AND (dpl.ISPOSTALADDRESS = 0)
    AND (lea.ISPRIVATE = 0) 

	AND lea.TYPE = @i_MethodType
	AND lea.ISPRIMARY = @i_IsPrimary
	AND ((@bi_ParentLocation IS NOT NULL AND (@bi_ParentLocation = ll.PARENTLOCATION)) OR (ll.PARENTLOCATION = ll.PARENTLOCATION))
	AND ((@i_IsMobilePhone IS NOT NULL AND (@i_IsMobilePhone = lea.ISMOBILEPHONE)) OR (lea.ISMOBILEPHONE = lea.ISMOBILEPHONE))
	AND @bi_DirPartyRecId = dpt.RECID
GO
PRINT N'Creating [crt].[GETMEDIALOCATIONBYPRODUCTID]...';


GO
/**
 * Product media( in particular image) is modeled as attributes.These attributes can be set at various levels and are checked
 * in the following order and it also shows their priority.
 *   1. ChannelCatalogProduct (priority = 1)
 *   2. CatalogProduct (priority = 2)
 *   3. ChannelProduct (priority = 3)
 *   4. Product (priority = 4)
 *   5. Default product attribute template (priority = 5)
 *...Product media association information is stored in the RetailMediaProductRelation table and this function retrieves the same from this table.
 */
CREATE FUNCTION [crt].[GETMEDIALOCATIONBYPRODUCTID]
(
    @bi_ChannelId    BIGINT,
    @bi_CatalogId    BIGINT,
    @bi_ProductId    BIGINT,
    @nvc_LanguageId  NVARCHAR(7)
)
RETURNS TABLE
RETURN

-- Select image by Channel, Catalog and Product(1st priority).
SELECT rmd.RESOURCEURL AS URI, rmd.Description AS ALTTEXT, rmpr.ISDEFAULT AS ISDEFAULT, 0 as ISSELFHOSTED, 1 AS PRIORITY
FROM [ax].RETAILMEDIARESOURCE rmd
INNER JOIN [ax].RETAILMEDIAPRODUCTRELATION rmpr ON rmd.RECID = rmpr.MEDIARESOURCE
INNER JOIN [ax].RETAILPUBRETAILCHANNELTABLE rprct ON rprct.ORIGINID = @bi_ChannelId
WHERE rmpr.PRODUCT = @bi_ProductId AND rmpr.CATALOG = @bi_CatalogId AND rmpr.INTERNALORGANIZATION = rprct.INTERNALORGANIZATION

UNION ALL

-- Select image by Catalog and Product(2nd priority).
SELECT rmd.RESOURCEURL AS URI, rmd.Description AS ALTTEXT, rmpr.ISDEFAULT AS ISDEFAULT, 0 as ISSELFHOSTED, 2 AS PRIORITY
FROM [ax].RETAILMEDIARESOURCE rmd
INNER JOIN [ax].RETAILMEDIAPRODUCTRELATION rmpr ON rmd.RECID = rmpr.MEDIARESOURCE
WHERE rmpr.PRODUCT = @bi_ProductId AND rmpr.CATALOG = @bi_CatalogId AND rmpr.INTERNALORGANIZATION = 0

UNION ALL

-- Select image by Channel and Product(3rd priority).
SELECT rmd.RESOURCEURL AS URI, rmd.Description AS ALTTEXT, rmpr.ISDEFAULT AS ISDEFAULT, 0 as ISSELFHOSTED, 3 AS PRIORITY
FROM [ax].RETAILMEDIARESOURCE rmd
INNER JOIN [ax].RETAILMEDIAPRODUCTRELATION rmpr ON rmd.RECID = rmpr.MEDIARESOURCE
INNER JOIN [ax].RETAILPUBRETAILCHANNELTABLE rprct ON rprct.ORIGINID = @bi_ChannelId
WHERE rmpr.PRODUCT = @bi_ProductId AND rmpr.CATALOG = 0 AND rmpr.INTERNALORGANIZATION = rprct.INTERNALORGANIZATION

UNION ALL

-- Select image by Product(4th priority).
SELECT rmd.RESOURCEURL AS URI, rmd.Description AS ALTTEXT, rmpr.ISDEFAULT AS ISDEFAULT, 0 as ISSELFHOSTED, 4 AS PRIORITY
FROM [ax].RETAILMEDIARESOURCE rmd
INNER JOIN [ax].RETAILMEDIAPRODUCTRELATION rmpr ON rmd.RECID = rmpr.MEDIARESOURCE
WHERE rmpr.PRODUCT = @bi_ProductId AND rmpr.CATALOG = 0 AND rmpr.INTERNALORGANIZATION = 0

UNION ALL

-- Select image by Product template(5th or the last priority).
SELECT rmt.IMAGEURL AS URI, NULL AS ALTTEXT, rmt.ISDEFAULT AS ISDEFAULT, 0 as ISSELFHOSTED, 5 AS PRIORITY
FROM [ax].RETAILMEDIATEMPLATE rmt 
WHERE rmt.MASTERENTITYTYPE = 12 -- 12 means product entity type, refer to AX enum RetailMediaMasterEntity.
GO
PRINT N'Creating [crt].[GETPRODUCTBEHAVIORBYPRODUCTIDS_V2]...';


GO
CREATE FUNCTION [crt].[GETPRODUCTBEHAVIORBYPRODUCTIDS_V2]
(
    @nvc_DataAreaId          NVARCHAR(10),
    @tvp_ProductIds          [crt].RECORDIDTABLETYPE READONLY    
)
RETURNS TABLE
RETURN
    SELECT
        CASE
            WHEN [siv].PRODUCTID IS NULL THEN 0
            ELSE 1
        END AS HASSERIALNUMBER,
        [rit].PROHIBITRETURN_RU ^ 1 AS ISRETURNALLOWED,
        [rit].BLOCKEDONPOS ^ 1 AS ISSALEATPHYSICALSTORESALLOWED,
        [rit].QTYBECOMESNEGATIVE AS ISNEGATIVEQUANTITYALLOWED,
        [rit].NODISCOUNTALLOWED ^ 1 AS ISDISCOUNTALLOWED,
        [rk].DISASSEMBLYATREGISTERALLOWED AS ISKITDISASSEMBLYALLOWED,
        [rit].ZEROPRICEVALID AS ISZEROSALEPRICEALLOWED,
        [rit].KEYINGINPRICE AS KEYINPRICE,
        [rit].KEYINGINQTY AS KEYINQUANTITY,
        [rit].MUSTKEYINCOMMENT AS MUSTKEYINCOMMENT,
        [rit].PRINTVARIANTSSHELFLABELS AS MUSTPRINTINDIVIDUALSHELFLABELSFORVARIANTS,
        [siv].ISSALESPROCESSACTIVATED AS MUSTPROMPTFORSERIALNUMBERONLYATSALE,
        [rit].SCALEITEM AS MUSTWEIGHPRODUCTATSALE,
        [ids].RECID AS PRODUCTID,
        [rit].DATETOACTIVATEITEM AS VALIDFROMDATEFORSALEATPHYSICALSTORES,
        CASE [rit].DATETOBEBLOCKED
            WHEN [crt].GETMINAXDATE() THEN [crt].GETMAXAXDATE()
            ELSE [rit].DATETOBEBLOCKED
        END AS VALIDTODATEFORSALEATPHYSICALSTORES
    FROM @tvp_ProductIds ids
        LEFT JOIN [ax].ECORESDISTINCTPRODUCTVARIANT pv ON [pv].RECID = [ids].RECID -- if the product is a variant, then we will get PRODUCTMASTER (the recid of its master)
        INNER JOIN [ax].INVENTTABLE it ON [it].PRODUCT = COALESCE([pv].PRODUCTMASTER, [ids].RECID) AND [it].DATAAREAID = @nvc_DataAreaId -- COALESCE([pv].PRODUCTMASTER, [ids].RECID) means "master/standalone recid"
        INNER JOIN [ax].RETAILINVENTTABLE rit ON [rit].ITEMID = [it].ITEMID AND [rit].DATAAREAID = @nvc_DataAreaId
        LEFT OUTER JOIN [crt].SERIALIZEDITEMSVIEW siv ON [siv].PRODUCTID = COALESCE([pv].PRODUCTMASTER, [ids].RECID) AND [siv].ITEMDATAAREAID = @nvc_DataAreaId
        LEFT OUTER JOIN [ax].RETAILKIT rk ON [rk].PRODUCTMASTER = COALESCE([pv].PRODUCTMASTER, [ids].RECID)
GO
PRINT N'Creating [crt].[GETPRODUCTDIMENSIONVALUESBYVARIANTPRODUCTIDS_V2]...';


GO
CREATE FUNCTION [crt].[GETPRODUCTDIMENSIONVALUESBYVARIANTPRODUCTIDS_V2]
(
    @nvc_DataAreaId          NVARCHAR(10),
    @nvc_Locale              NVARCHAR(7),
    @tvp_ProductIds          [crt].RECORDIDTABLETYPE READONLY
)
RETURNS TABLE
RETURN
    WITH PRODUCTDIMENSIONS AS
    (
        SELECT
            [idc].DISTINCTPRODUCTVARIANT AS PRODUCTID,
            [pv].PRODUCTMASTER,
            [id].INVENTSIZEID AS SIZE,
            [id].INVENTCOLORID AS COLOR,
            [id].CONFIGID AS CONFIG,
            [id].INVENTSTYLEID AS STYLE
        FROM [ax].INVENTDIMCOMBINATION idc
            INNER JOIN [ax].INVENTDIM id ON [id].INVENTDIMID = [idc].INVENTDIMID
            INNER JOIN [ax].ECORESDISTINCTPRODUCTVARIANT pv ON [pv].RECID = [idc].DISTINCTPRODUCTVARIANT
        WHERE
            [idc].DISTINCTPRODUCTVARIANT IN (SELECT RECID FROM @tvp_ProductIds)
            AND [idc].DATAAREAID = @nvc_DataAreaId
            AND [id].DATAAREAID = @nvc_DataAreaId
    )
    
    SELECT
        [pd].PRODUCTID,
        1 AS DIMENSION,  -- Color
        [pd].COLOR AS DIMENSIONID,
        COALESCE([dvc].NAME, [pd].COLOR, '') AS VALUE
    FROM PRODUCTDIMENSIONS pd
        INNER JOIN [ax].ECORESCOLOR erc ON [erc].NAME = [pd].COLOR
            INNER JOIN [ax].ECORESPRODUCTMASTERCOLOR erpmc ON [erpmc].COLOR = [erc].RECID AND [erpmc].COLORPRODUCTMASTER = [pd].PRODUCTMASTER
                LEFT OUTER JOIN [ax].ECORESPRODUCTMASTERDIMVALUETRANSLATION dvc ON [dvc].PRODUCTMASTERDIMENSIONVALUE = [erpmc].RECID AND [dvc].LANGUAGEID = @nvc_Locale    

    UNION ALL
    
    SELECT
        [pd].PRODUCTID,
        2 AS DIMENSION,  -- Configuration
        [pd].CONFIG AS DIMENSIONID,
        COALESCE([dvcfg].NAME, [pd].CONFIG, '') AS VALUE
    FROM PRODUCTDIMENSIONS pd
        INNER JOIN [ax].ECORESCONFIGURATION ercfg ON [ercfg].NAME = [pd].CONFIG
            INNER JOIN [ax].ECORESPRODUCTMASTERCONFIGURATION erpmcfg ON [erpmcfg].CONFIGURATION = [ercfg].RECID AND [erpmcfg].CONFIGPRODUCTMASTER = [pd].PRODUCTMASTER
                LEFT OUTER JOIN [ax].ECORESPRODUCTMASTERDIMVALUETRANSLATION dvcfg ON [dvcfg].PRODUCTMASTERDIMENSIONVALUE = [erpmcfg].RECID AND [dvcfg].LANGUAGEID = @nvc_Locale

    UNION ALL
    
    SELECT
        [pd].PRODUCTID,
        3 AS DIMENSION,  -- Size
        [pd].SIZE AS DIMENSIONID,
        COALESCE([dvsz].NAME, [pd].SIZE, '') AS VALUE
    FROM PRODUCTDIMENSIONS pd
        INNER JOIN [ax].ECORESSIZE ers ON [ers].NAME = [pd].SIZE
            INNER JOIN [ax].ECORESPRODUCTMASTERSIZE erpms ON [erpms].SIZE = [ers].RECID AND [erpms].SIZEPRODUCTMASTER = [pd].PRODUCTMASTER
                LEFT OUTER JOIN [ax].ECORESPRODUCTMASTERDIMVALUETRANSLATION dvsz ON [dvsz].PRODUCTMASTERDIMENSIONVALUE = [erpms].RECID AND [dvsz].LANGUAGEID = @nvc_Locale

    UNION ALL
    
    SELECT
        [pd].PRODUCTID,
        4 AS DIMENSION,  -- Style
        [pd].STYLE AS DIMENSIONID,
        COALESCE([dvst].NAME, [pd].STYLE, '') AS VALUE
    FROM PRODUCTDIMENSIONS pd
        INNER JOIN [ax].ECORESSTYLE erst ON [erst].NAME = [pd].STYLE
            INNER JOIN [ax].ECORESPRODUCTMASTERSTYLE erpmst ON [erpmst].STYLE = [erst].RECID AND [erpmst].STYLEPRODUCTMASTER = [pd].PRODUCTMASTER
                LEFT OUTER JOIN [ax].ECORESPRODUCTMASTERDIMVALUETRANSLATION dvst ON [dvst].PRODUCTMASTERDIMENSIONVALUE = [erpmst].RECID AND [dvst].LANGUAGEID = @nvc_Locale
GO
PRINT N'Creating [crt].[GETPRODUCTMEDIALOCATIONS]...';


GO
/**
 * Product media is modeled as attributes. These attributes can be set at various levels and are checked
 * in the following order and it also shows their rank.
 *   1. ChannelCatalogProduct (rank = 1)
 *   2. CatalogProduct (rank = 2)
 *   3. ChannelProduct (rank = 3)
 *   4. Product (rank = 4)
 *   5. Default product attribute template (rank = 5)
 * The first attribute found is returned for the specified product. Image and video attributes are stored
 * as RichMediaLocations XML blob. Each XML document is parsed and the collection of media locations is returned.
 */
CREATE FUNCTION [crt].[GETPRODUCTMEDIALOCATIONS]
(
    @bi_ChannelId    BIGINT,
    @bi_CatalogId    BIGINT,
    @bi_ProductId    BIGINT,
    @nvc_LanguageId  NVARCHAR(7)
)
RETURNS TABLE
RETURN
SELECT REPLACE(REPLACE(gpml.URI, '{LANGUAGEID}', @nvc_LanguageId), 
       '{PRODUCTNUMBER}', (SELECT [crt].REPLACEUNWANTEDCHARACTERS(erp.DISPLAYPRODUCTNUMBER))) AS URI,
       gpml.ALTTEXT AS ALTTEXT,
       gpml.ISDEFAULT AS ISDEFAULT,
       gpml.ISSELFHOSTED as ISSELFHOSTED,
       gpml.PRIORITY
FROM [crt].GETMEDIALOCATIONBYPRODUCTID(@bi_ChannelId, @bi_CatalogId, @bi_ProductId, @nvc_LanguageId) gpml
JOIN [ax].ECORESPRODUCT erp ON erp.RECID = @bi_ProductId
WHERE gpml.PRIORITY = (
        SELECT MIN(gpml_1.PRIORITY) FROM [crt].GETMEDIALOCATIONBYPRODUCTID(@bi_ChannelId, @bi_CatalogId, @bi_ProductId, @nvc_LanguageId) gpml_1
        WHERE gpml_1.PRIORITY < 5 -- exclude the default product image template.
        )

UNION ALL 

SELECT REPLACE(REPLACE(gpml_2.URI, '{LANGUAGEID}', @nvc_LanguageId), 
       '{PRODUCTNUMBER}', (SELECT [crt].REPLACEUNWANTEDCHARACTERS(erp.DISPLAYPRODUCTNUMBER))) AS URI,
       gpml_2.ALTTEXT AS ALTTEXT,
       gpml_2.ISDEFAULT AS ISDEFAULT,
       gpml_2.ISSELFHOSTED as ISSELFHOSTED,
       gpml_2.PRIORITY
FROM [crt].GETMEDIALOCATIONBYPRODUCTID(@bi_ChannelId, @bi_CatalogId, @bi_ProductId, @nvc_LanguageId)  gpml_2
JOIN [ax].ECORESPRODUCT erp ON erp.RECID = @bi_ProductId
WHERE gpml_2.PRIORITY = 5 -- only the default product image template.

UNION ALL

-- Retrieving master product's media locations, if the product is of variant type.
SELECT REPLACE(REPLACE(gpml.URI, '{LANGUAGEID}', @nvc_LanguageId), 
       '{PRODUCTNUMBER}', (SELECT [crt].REPLACEUNWANTEDCHARACTERS(erp.DISPLAYPRODUCTNUMBER))) AS URI,
       gpml.ALTTEXT AS ALTTEXT,
       gpml.ISDEFAULT AS ISDEFAULT,
       gpml.ISSELFHOSTED as ISSELFHOSTED,
       gpml.PRIORITY + 5  -- Adding 5 to ensure master product locations are after variant product locations.
FROM [ax].ECORESDISTINCTPRODUCTVARIANT erdpv
JOIN [ax].ECORESPRODUCT erp ON erp.RECID = [erdpv].PRODUCTMASTER
OUTER APPLY [crt].GETMEDIALOCATIONBYPRODUCTID(@bi_ChannelId, @bi_CatalogId, [erdpv].PRODUCTMASTER, @nvc_LanguageId) gpml
WHERE [erdpv].RECID = @bi_ProductId AND gpml.PRIORITY = (
        SELECT MIN(gpml_1.PRIORITY) FROM [crt].GETMEDIALOCATIONBYPRODUCTID(@bi_ChannelId, @bi_CatalogId, [erdpv].PRODUCTMASTER, @nvc_LanguageId) gpml_1
        WHERE gpml_1.PRIORITY < 5 -- exclude the default product image template.
        )

UNION ALL 

SELECT REPLACE(REPLACE(gpml_2.URI, '{LANGUAGEID}', @nvc_LanguageId), 
       '{PRODUCTNUMBER}', (SELECT [crt].REPLACEUNWANTEDCHARACTERS(erp.DISPLAYPRODUCTNUMBER))) AS URI,
       gpml_2.ALTTEXT AS ALTTEXT,
       gpml_2.ISDEFAULT AS ISDEFAULT,
       gpml_2.ISSELFHOSTED as ISSELFHOSTED,
       gpml_2.PRIORITY + 5  -- Adding 5 to ensure master product locations are after variant product locations.
FROM [crt].GETMEDIALOCATIONBYPRODUCTID(@bi_ChannelId, @bi_CatalogId, @bi_ProductId, @nvc_LanguageId)  gpml_2
JOIN [ax].ECORESDISTINCTPRODUCTVARIANT erdpv ON erdpv.RECID = @bi_ProductId
JOIN [ax].ECORESPRODUCT erp ON erp.RECID = erdpv.PRODUCTMASTER
WHERE gpml_2.PRIORITY = 5 -- only the default product image template.
GO
PRINT N'Refreshing [crt].[GETRETAILKITLINEDEFINITION]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[GETRETAILKITLINEDEFINITION]';


GO
PRINT N'Refreshing [crt].[GETRETAILKITLISTING]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[GETRETAILKITLISTING]';


GO
PRINT N'Creating [crt].[GETPURCHASEHISTORY]...';


GO
/**
 * Get the recently purchased products for a customer.
 * Only distinct item id will be put into one receipt id. 
 */
CREATE FUNCTION [crt].[GETPURCHASEHISTORY]
(
    @nvc_CustAccount NVARCHAR(38),
    @nvc_Locale NVARCHAR(7),
    @startDateTime DATETIME
)
RETURNS @PurchaseHistory TABLE
(
    RECEIPTID       NVARCHAR(18),
    ITEMID          NVARCHAR(20),
    DATEPURCHASED   DATETIME,
    PRODUCTNAME     NVARCHAR(60),
    IMAGEURL        NVARCHAR(MAX) NULL,
    PRODUCTID       BIGINT
)
AS
BEGIN

    INSERT INTO @PurchaseHistory
    SELECT
        rtst.RECEIPTID,
        rtst.ITEMID,
        Max(rtst.CREATEDDATETIME) AS DATEPURCHASED,
        erpt.NAME AS PRODUCTNAME,
        gpml.URI AS IMAGEURL,
        rtst.LISTINGID AS PRODUCTID
    FROM ax.RETAILTRANSACTIONSALESTRANS rtst
    INNER JOIN ax.RETAILTRANSACTIONTABLE rtt on rtt.DATAAREAID = rtst.DATAAREAID AND rtt.TRANSACTIONID = rtst.TRANSACTIONID AND rtt.TYPE = 2 AND rtt.ENTRYSTATUS = 0 -- normal sales transaction
    INNER JOIN ax.ECORESPRODUCTTRANSLATION erpt ON erpt.PRODUCT = rtst.LISTINGID AND erpt.LANGUAGEID = @nvc_Locale -- get the localized name
    INNER JOIN ax.ECORESPRODUCT erp ON erp.RECID = erpt.PRODUCT
    OUTER APPLY (SELECT TOP 1 REPLACE(REPLACE(URI, '{LANGUAGEID}', @nvc_Locale), '{PRODUCTNUMBER}', (SELECT [crt].REPLACEUNWANTEDCHARACTERS(erp.DISPLAYPRODUCTNUMBER))) AS URI FROM [crt].GETMEDIALOCATIONBYPRODUCTID(rtst.CHANNEL, 0, rtst.LISTINGID, @nvc_Locale) ORDER BY PRIORITY, ISDEFAULT, URI) gpml
    WHERE rtst.CUSTACCOUNT = @nvc_CustAccount
        AND rtst.CREATEDDATETIME >= @startDateTime
        AND rtst.QTY < 0 -- filter out sales lines for returning
        AND rtst.GIFTCARD != 1 -- filter out sales lines for issuing gift card
        AND rtst.TRANSACTIONSTATUS = 0 -- filter out voided (1), Posted (2), Concluded (3), Canceled (4), OnHold (5), Training (6) sales lines
    GROUP BY rtst.RECEIPTID, rtst.ITEMID, rtst.LISTINGID, erpt.NAME, gpml.URI
    RETURN;
END
GO
PRINT N'Refreshing [crt].[CHARGESVIEW]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[CHARGESVIEW]';


GO
PRINT N'Refreshing [crt].[MARKUPAUTOCONFIGURATIONVIEW]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[MARKUPAUTOCONFIGURATIONVIEW]';


GO
PRINT N'Altering [crt].[RETAILDISCOUNTSVIEW]...';


GO
/********************************************************************************
    RetailDiscountsView retrieves the discount header information by joining four tables.
    RETAILPERIODICDISCOUNT - AX table that stores the discount definitions.
    RETAILDISCOUNTMIXANDMATCH - AX table that holds mix and match discount parameters.
    RETAILDISCOUNTMULTIBUY - AX table that holds multibuy (quantity) discount parameters.
	RETAILDISCOUNTTHRESHOLD - AX table that holds threshold (amount) discount parameters.
********************************************************************************/
ALTER VIEW crt.RETAILDISCOUNTSVIEW
AS
(
    SELECT
		pd.DATAAREAID,
		pd.CURRENCYCODE,
        pd.OFFERID,
        pd.NAME,
        pd.PERIODICDISCOUNTTYPE,
        pd.CONCURRENCYMODE,
		pd.PRICINGPRIORITYNUMBER,
        pd.ISDISCOUNTCODEREQUIRED,
        pd.VALIDATIONPERIODID,
        pd.DATEVALIDATIONTYPE,
        pd.VALIDFROM,
        pd.VALIDTO,
        ISNULL(pdmm.MIXANDMATCHDISCOUNTTYPE, ISNULL(pdmb.MULTIBUYDISCOUNTTYPE, pd.PERIODICDISCOUNTTYPE)) AS DISCOUNTTYPE,
        ISNULL(pdmm.[DEALPRICEVALUE],0.0) AS DEALPRICEVALUE,
        pd.DISCOUNTPERCENTVALUE,
		ISNULL(pdmm.[DISCOUNTAMOUNTVALUE],0.0) AS DISCOUNTAMOUNTVALUE,
		ISNULL(pdmm.[NOOFLEASTEXPENSIVELINES],0) AS NOOFLEASTEXPENSIVELINES,
		ISNULL(pdmm.[NUMBEROFTIMESAPPLICABLE],0) AS NUMBEROFTIMESAPPLICABLE,
        ISNULL(pdmm.[LEASTEXPENSIVEMODE],0) AS LEASTEXPENSIVEMODE,
		pdt.COUNTNONDISCOUNTITEMS
	FROM [ax].[RETAILPERIODICDISCOUNT] AS pd
		LEFT OUTER JOIN [ax].[RETAILDISCOUNTMIXANDMATCH] AS pdmm ON pd.RECID = pdmm.RECID AND pd.DATAAREAID = pdmm.DATAAREAID
		LEFT OUTER JOIN [ax].[RETAILDISCOUNTMULTIBUY] AS pdmb ON pd.RECID = pdmb.RECID AND pd.DATAAREAID = pdmb.DATAAREAID
		LEFT OUTER JOIN [ax].[RETAILDISCOUNTTHRESHOLD] AS pdt ON pd.RECID = pdt.RECID AND pd.DATAAREAID = pdt.DATAAREAID
    WHERE pd.STATUS = 1
        AND (pd.PERIODICDISCOUNTTYPE != 3) -- Don't fetch promotions
)
GO
PRINT N'Altering [crt].[RETAILPERIODICDISCOUNTSFLATTENEDVIEW]...';


GO

ALTER VIEW [crt].[RETAILPERIODICDISCOUNTSFLATTENEDVIEW] AS
(
    SELECT
       pd.[OFFERID]
       ,pd.[NAME]
       ,pd.[PERIODICDISCOUNTTYPE]
       ,pd.[VALIDATIONPERIODID]
       ,pd.[DATEVALIDATIONTYPE]
       ,pd.[VALIDFROM]
       ,pd.[VALIDTO]
       ,pd.[CONCURRENCYMODE]
       ,pd.[CURRENCYCODE]
	   ,pd.[PRICINGPRIORITYNUMBER]
       ,pd.[STATUS]
       ,pd.[ISDISCOUNTCODEREQUIRED]
	   ,pd.[DATAAREAID]
       ,ISNULL(pdmm.MIXANDMATCHDISCOUNTTYPE
       ,ISNULL(pdmb.MULTIBUYDISCOUNTTYPE, pd.PERIODICDISCOUNTTYPE)) AS DISCOUNTTYPE
       ,0 AS DIFFERENTSAMEMANDMLINES
       ,0 AS NOOFLINESTOTRIGGER
       ,0 AS PRIORITY
       ,pd.[DISCOUNTPERCENTVALUE]
       ,ISNULL(pdmm.[DEALPRICEVALUE],0.0) AS DEALPRICEVALUE
       ,ISNULL(pdmm.[DISCOUNTAMOUNTVALUE],0.0) AS DISCOUNTAMOUNTVALUE
       ,ISNULL(pdmm.[NOOFLEASTEXPENSIVELINES],0) AS NOOFLEASTEXPENSIVELINES
       ,ISNULL(pdmm.[NUMBEROFTIMESAPPLICABLE],0) AS NUMBEROFTIMESAPPLICABLE
       ,ISNULL(pdmm.[LEASTEXPENSIVEMODE],0) AS LEASTEXPENSIVEMODE
       ,pdl.[RETAILGROUPMEMBERLINE]
       ,pdl.[RECID] AS DISCOUNTLINEID
       ,pdl.[LINENUM]
       ,pdl.[DISCOUNTPERCENTORVALUE]
       ,pdl.[UNITOFMEASURE]
       ,pdt.[COUNTNONDISCOUNTITEMS]
    FROM [ax].[RETAILPERIODICDISCOUNT] AS pd
    INNER JOIN [ax].[RETAILPERIODICDISCOUNTLINE] AS pdl ON pd.OFFERID = pdl.OFFERID AND pd.DATAAREAID = pdl.DATAAREAID
    LEFT OUTER JOIN [ax].[RETAILDISCOUNTMIXANDMATCH] AS pdmm ON pd.RECID = pdmm.RECID
    LEFT OUTER JOIN [ax].[RETAILDISCOUNTMULTIBUY] AS pdmb ON pd.RECID = pdmb.RECID
    LEFT OUTER JOIN [ax].[RETAILDISCOUNTTHRESHOLD] AS pdt ON pd.RECID = pdt.RECID
)
GO
PRINT N'Adding schema binding to [crt].[CHANNELCATEGORYHIERARCHYIMAGEVIEW]...';


GO

ALTER VIEW [crt].[CHANNELCATEGORYHIERARCHYIMAGEVIEW]
WITH SCHEMABINDING AS
(
    SELECT
        rpec.[PARENTCATEGORY],
        rpec.[NAME],
        rpec.[ORIGINID] AS RECID,
        rpct.[ORIGINID] AS CHANNELID,
		CAST(N'' AS XML).value('xs:base64Binary(xs:hexBinary(sql:column("[rmr].[RESOURCEBLOB]")))', 'NVARCHAR(MAX)') AS [OFFLINEIMAGE]
    FROM [ax].RETAILPUBRETAILCHANNELTABLE rpct
    INNER JOIN [ax].RETAILPUBECORESCATEGORY rpec ON rpct.[CATEGORYHIERARCHY] = rpec.[CATEGORYHIERARCHY] AND rpct.[ORIGINID] = rpec.[CHANNEL]
	LEFT OUTER JOIN [ax].RETAILMEDIAANDMASTERENTITYRELATION rmamer on rpec.[ORIGINID] = rmamer.[MASTERENTITYRECID] AND rmamer.[ISDEFAULT] = 1
	LEFT OUTER JOIN [ax].RETAILMEDIARESOURCE rmr on rmamer.[MEDIARESOURCEID] = rmr.[RESOURCEID]
)
GO
PRINT N'Altering [crt].[CUSTOMERSVIEW]...';


GO

ALTER VIEW [crt].[CUSTOMERSVIEW] AS
(
    SELECT
        ct.ACCOUNTNUM AS ACCOUNTNUMBER,
        ct.RECID,
        ct.CREATEDDATETIME,
        dpt.RECID AS PARTY,
        dpt.NAME,
        dpn.RECID AS PERSONNAMEID,
        dpn.FIRSTNAME,
        dpn.MIDDLENAME,
        dpn.LASTNAME,
        dpt.PARTYNUMBER,
        CASE
            WHEN dpn.RECID IS NULL THEN 2 -- Organization
            ELSE 1 -- Customer
        END AS CUSTOMERTYPE,
        ceap.LOCATOR PHONE,
        ceap.LOCATOREXTENSION PHONEEXT,
        ceap.RECORDID PHONERECORDID,
        ceae.LOCATOR EMAIL,
        ceae.RECORDID EMAILRECORDID,
        ceau.LOCATOR URL,
        ceau.RECORDID URLRECORDID,
        ceacp.LOCATOR CELLPHONE,
        ceacp.RECORDID CELLPHONERECORDID,
        rct.RECEIPTEMAIL RECEIPTEMAIL,
        dpt.LANGUAGEID AS LANGUAGE,
        ct.DATAAREAID,
        rct.RECEIPTOPTION as RECEIPTSETTINGS,
        ct.CURRENCY,
        ct.INVOICEACCOUNT,
        ct.CREDITMAX,
        ct.MARKUPGROUP,
        ct.PRICEGROUP,
        ct.CUSTGROUP,
        ct.BLOCKED,
        ct.ORGID,
        ct.MULTILINEDISC,
        ct.USEPURCHREQUEST,
        ct.LINEDISC,
        ct.INCLTAX,
        ct.ENDDISC,
        ct.TAXGROUP,
        ct.CREDITRATING,
        ct.TAXLICENSENUM,
        ct.VATNUM,         
        CAST(N'' AS XML).value('xs:base64Binary(xs:hexBinary(sql:column("[rmr].[RESOURCEBLOB]")))', 'NVARCHAR(MAX)') AS OFFLINEIMAGE,
        ct.IDENTIFICATIONNUMBER,
        rmr.RESOURCEURL AS IMAGE,
        0 AS ISASYNCCUSTOMER
/* BEGIN SDKSAMPLE_CUSTOMERPREFERENCES (do not remove this)
              , isnull(rcp.EMAILOPTIN, 0) as EMAILOPTIN
END SDKSAMPLE_CUSTOMERPREFERENCES (do not remove this) */
    FROM [ax].CUSTTABLE ct
    JOIN [ax].DIRPARTYTABLE dpt ON ct.PARTY = dpt.RECID
    LEFT OUTER JOIN ax.RETAILCUSTTABLE rct ON ct.ACCOUNTNUM = rct.ACCOUNTNUM AND ct.DATAAREAID = rct.DATAAREAID
    LEFT OUTER JOIN ax.DIRPERSONNAME dpn ON dpt.RECID = dpn.PERSON AND (GETUTCDATE() BETWEEN dpn.VALIDFROM AND dpn.VALIDTO)
    -- phone
    LEFT OUTER JOIN [crt].CUSTOMERELECTRONICADDRESSESVIEW ceap ON dpt.RECID = ceap.DIRPARTYRECORDID
                AND ceap.METHODYTPE = 1 AND ceap.ISPRIMARY = 1 AND ceap.PARENTLOCATION = 0
    -- email
    LEFT OUTER JOIN [crt].CUSTOMERELECTRONICADDRESSESVIEW ceae ON dpt.RECID = ceae.DIRPARTYRECORDID
                AND ceae.METHODYTPE = 2 AND ceae.ISPRIMARY = 1 AND ceae.PARENTLOCATION = 0
    -- url
    LEFT OUTER JOIN [crt].CUSTOMERELECTRONICADDRESSESVIEW ceau ON dpt.RECID = ceau.DIRPARTYRECORDID
                AND ceau.METHODYTPE = 3 AND ceau.ISPRIMARY = 1 AND ceau.PARENTLOCATION = 0
    -- cellphone
    LEFT OUTER JOIN [crt].CUSTOMERELECTRONICADDRESSESVIEW ceacp ON dpt.RECID = ceacp.DIRPARTYRECORDID
                AND ceacp.METHODYTPE = 1
                AND ceacp.ISPRIMARY = 0
                AND ceacp.ISMOBILEPHONE = 1
    LEFT OUTER JOIN [ax].RETAILMEDIAANDMASTERENTITYRELATION rmamer ON ct.RECID = rmamer.MASTERENTITYRECID 
               AND rmamer.ISDEFAULT = 1 AND rmamer.MASTERENTITYTYPE = 16  -- MasterEntityType = Customer.
    LEFT OUTER JOIN [ax].RETAILMEDIARESOURCE rmr ON rmamer.MEDIARESOURCEID = rmr.RESOURCEID
/* BEGIN SDKSAMPLE_CUSTOMERPREFERENCES (do not remove this)
    LEFT OUTER JOIN [ax].RETAILCUSTPREFERENCE rcp ON ct.ACCOUNTNUM = rcp.ACCOUNTNUM
                   AND ct.DATAAREAID = rcp.DATAAREAID
END SDKSAMPLE_CUSTOMERPREFERENCES (do not remove this) */

   UNION ALL

   SELECT
        rac.CUSTACCOUNTASYNC AS ACCOUNTNUMBER,
        0 AS RECID,
        0 AS CREATEDDATETIME,
        0 AS  PARTY,
        rac.CUSTNAME AS NAME,
        0 AS PERSONNAMEID,
        rac.FIRSTNAME,
        rac.MIDDLENAME,
        rac.LASTNAME,
        '' AS PARTYNUMBER,
        rac.RELATIONSHIPTYPE AS CUSTOMERTYPE,
        rac.PHONE,
        rac.PHONEEXTENSION AS PHONEEXT,
        '' AS PHONERECORDID,
        rac.EMAIL,
        null AS EMAILRECORDID,
        rac.URL,
        '' AS URLRECORDID,
        rac.CELLULARPHONE AS CELLPHONE,
        '' AS CELLPHONERECORDID,
        rac.RECEIPTEMAIL AS  RECEIPTEMAIL,
        rac.LANGUAGEID AS LANGUAGE,
        rac.DATAAREAID,
        rac.RECEIPTOPTION AS RECEIPTSETTINGS,
        rac.CURRENCY,
        rac.INVOICEACCOUNT,
        rac.CREDITMAX,
        '' AS MARKUPGROUP,
        rac.PRICEGROUP,
        rac.CUSTGROUP,
        rac.BLOCKED,
        rac.ORGANIZATIONID AS ORGID,
        rac.MULTILINEDISC AS MULTILINEDISC,
        rac.USEPURCHREQUEST,
        rac.LINEDISC,
        0 AS INCLTAX,
        rac.ENDDISC,
        rac.TAXGROUP,
        '' AS CREDITRATING,
        '' AS TAXLICENSENUM,
        rac.VATNUM,         
        null AS OFFLINEIMAGE,
        rac.IDENTIFICATIONNUMBER,
        null AS IMAGE,
        1 AS ISASYNCCUSTOMER
/* BEGIN SDKSAMPLE_CUSTOMERPREFERENCES (do not remove this)
              , 0 as EMAILOPTIN
END SDKSAMPLE_CUSTOMERPREFERENCES (do not remove this) */
   FROM [ax].RETAILASYNCCUSTOMER rac
)
GO
PRINT N'Refreshing [crt].[EMPLOYEELOGONVIEW]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[EMPLOYEELOGONVIEW]';


GO
PRINT N'Refreshing [crt].[EMPLOYEESVIEW]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[EMPLOYEESVIEW]';


GO
PRINT N'Refreshing [crt].[GETEMPLOYEESBYSTOREVIEW]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[GETEMPLOYEESBYSTOREVIEW]';


GO
PRINT N'Refreshing [crt].[GLOBALCUSTOMERSVIEW]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[GLOBALCUSTOMERSVIEW]';


GO
PRINT N'Altering [crt].[GETSALESORDER]...';


GO
ALTER FUNCTION [crt].[GETSALESORDER]
(
@nvc_CustomerName NVARCHAR(400)
)
RETURNS TABLE

RETURN

SELECT RT.CHANNEL AS 'CHANNELID'
    ,RT.TRANSACTIONID AS 'TRANSACTIONID'
    ,CASE 
        WHEN (RT.SALESORDERID <> '')
            THEN RT.SALESORDERID
        ELSE COALESCE(OS.SALESID, '')
        END AS 'SALESID'
    ,RT.CREATEDDATETIME AS 'CREATEDDATETIME'
    ,(RT.GROSSAMOUNT * - 1.0) AS 'GROSSAMOUNT'
    ,CASE 
        WHEN RT.TYPE = 7
            THEN -- TYPE = 7: TenderDeclaration
                (
                    SELECT SUM(TD.AMOUNTTENDERED)
                    FROM [ax].RETAILTRANSACTIONTENDERDECLARATIONTRANS TD
                    WHERE TD.TRANSACTIONID = RT.TRANSACTIONID
                        AND TD.TERMINAL = RT.TERMINAL
                        AND TD.DATAAREAID = RT.DATAAREAID
                        AND TD.TRANSACTIONSTATUS = 0 -- 0: Normal status transaction
                        AND TD.CHANNEL = RT.CHANNEL
                    )
        WHEN RT.TYPE = 16
            THEN -- TYPE = 16: BankDrop
                (
                    SELECT SUM(B.AMOUNTTENDERED)
                    FROM [ax].RETAILTRANSACTIONBANKEDTENDERTRANS B
                    WHERE B.TRANSACTIONID = RT.TRANSACTIONID
                        AND B.TERMINAL = RT.TERMINAL
                        AND B.DATAAREAID = RT.DATAAREAID
                        AND B.TRANSACTIONSTATUS = 0 -- 0: Normal status transaction
                        AND B.CHANNEL = RT.CHANNEL
                    )
        WHEN RT.TYPE = 17
            THEN -- TYPE = 17: SafeDrop
                (
                    SELECT SUM(S.AMOUNTTENDERED)
                    FROM [ax].RETAILTRANSACTIONSAFETENDERTRANS S
                    WHERE S.TRANSACTIONID = RT.TRANSACTIONID
                        AND S.TERMINAL = RT.TERMINAL
                        AND S.DATAAREAID = RT.DATAAREAID
                        AND S.TRANSACTIONSTATUS = 0 -- 0: Normal status transaction
                        AND S.CHANNEL = RT.CHANNEL
                    )
        WHEN RT.TYPE = 3
            THEN -- TYPE = 3: Payment
                (
                    SELECT SUM(P.AMOUNTTENDERED)
                    FROM [ax].RETAILTRANSACTIONPAYMENTTRANS P
                    WHERE P.TRANSACTIONID = RT.TRANSACTIONID
                        AND P.TERMINAL = RT.TERMINAL
                        AND P.DATAAREAID = RT.DATAAREAID
                        AND P.TRANSACTIONSTATUS = 0 -- 0: Normal status transaction
                        AND P.CHANNEL = RT.CHANNEL
                    )
        ELSE (RT.GROSSAMOUNT * - 1.0)
        END AS 'TOTALAMOUNT'
    ,RT.PAYMENTAMOUNT AS 'AMOUNTPAID'
    ,RT.SALESPAYMENTDIFFERENCE AS 'SALESPAYMENTDIFFERENCE'
    ,RT.TERMINAL AS 'TERMINAL'
    ,RT.BATCHID  AS 'BATCHID'
    ,RT.BATCHTERMINALID AS 'BATCHTERMINALID'
    ,RT.STORE AS 'STORE'
    ,RT.STAFF AS 'STAFF'
    ,RT.CUSTACCOUNT AS 'CUSTOMERID'
    ,RT.RECEIPTEMAIL AS 'RECEIPTEMAIL'
    ,RT.TYPE
    ,RT.DISCAMOUNT AS 'DISCOUNTAMOUNT'
    ,ISNULL(AT.DELIVERYNAME,DPT.NAME) AS 'NAME'
    ,COALESCE((
        SELECT SUM(TAXAMOUNT * -1.0)
        FROM [ax].RETAILTRANSACTIONSALESTRANS RTST
        WHERE RTST.TRANSACTIONID = RT.TRANSACTIONID
            AND RTST.TERMINALID = RT.TERMINAL
            AND RTST.STORE = RT.STORE
            AND RTST.CHANNEL = RT.CHANNEL
            AND RTST.TRANSACTIONSTATUS <> 1	), 0) AS 'TAXAMOUNT' -- Excludes the voided line
    ,COALESCE((
        SELECT TOP 1 ISINCLUDEDINPRICE
        FROM [ax].RETAILTRANSACTIONTAXTRANS TT
        WHERE TT.TRANSACTIONID = RT.TRANSACTIONID
            AND TT.TERMINALID = RT.TERMINAL
            AND TT.STOREID = RT.STORE
            AND TT.CHANNEL = RT.CHANNEL ), 0) AS 'ISTAXINCLUDEDINPRICE'
    ,COALESCE((
        SELECT SUM(CALCULATEDAMOUNT)
        FROM [ax].RETAILTRANSACTIONMARKUPTRANS MT
        WHERE MT.TRANSACTIONID = RT.TRANSACTIONID
            AND MT.TERMINALID = RT.TERMINAL
            AND MT.STORE = RT.STORE
            AND MT.CHANNEL = RT.CHANNEL), 0) AS 'CHARGEAMOUNT'
    ,RT.CHANNELREFERENCEID AS 'CHANNELREFERENCEID'
    ,RT.INVENTLOCATIONID AS 'INVENTLOCATIONID'
    ,RT.DLVMODE AS 'DELIVERYMODE'
    ,RT.SHIPPINGDATEREQUESTED AS 'REQUESTEDDELIVERYDATE'
    ,RT.LOGISTICSPOSTALADDRESS AS 'LOGISTICSPOSTALADDRESS'
    ,RT.RECEIPTID AS 'RECEIPTID'
    ,RT.LOYALTYCARDID AS 'LOYALTYCARDID'
    ,RT.ENTRYSTATUS AS 'ENTRYSTATUS'
    ,CASE 
        WHEN (
                AT.EMAIL IS NOT NULL
                AND AT.EMAIL <> ''
                )
            THEN AT.EMAIL
        WHEN (
                RT.RECEIPTEMAIL IS NOT NULL
                AND RT.RECEIPTEMAIL <> ''
                )
            THEN RT.RECEIPTEMAIL
        ELSE CEV.EMAIL
        END AS 'EMAIL'
    ,ISNULL(AT.PHONE, '') AS 'PHONE'
    ,ISNULL(OS.STATUS, 0) AS 'STATUS'
    ,DATEADD(second, RT.TRANSTIME, CAST(RT.TRANSDATE AS DATETIME)) AS 'BEGINDATETIME'
    ,RT.BUSINESSDATE
    ,RT.STATEMENTCODE
    ,RT.EXCHRATE / 100.00 AS 'EXCHRATE' --ePOS behaviour
    ,RT.COMMENT AS 'COMMENT'
    ,RT.INVOICECOMMENT AS 'INVOICECOMMENT'
    ,CAST(RT.CREATEDOFFLINE AS BIT) AS 'ISCREATEDOFFLINE'
    ,CO.CANCELLATIONCHARGE AS 'CANCELLATIONCHARGE'
    ,CO.DEPOSITOVERRIDE AS 'DEPOSITOVERRIDE'
    ,CO.REQUIREDDEPOSIT AS 'REQUIREDDEPOSIT'
    ,CO.CALCULATEDDEPOSIT AS 'CALCULATEDDEPOSIT'
    ,CO.PREPAYMENTPAID AS 'PREPAYMENTPAID'
    ,CO.PREPAYMENTINVOICED AS 'PREPAYMENTINVOICED'
    ,CO.QUOTEEXPIRATIONDATE AS 'EXPIRYDATE'
    ,CO.CUSTOMERORDERTYPE AS 'CUSTOMERORDERTYPE'
    ,ISNULL((
            SELECT TOP 1 1 AS 'HASREDEEMLINE'
            FROM [ax].RETAILTRANSACTIONLOYALTYREWARDPOINTTRANS RPT
            WHERE RPT.DATAAREAID = RT.DATAAREAID
                AND RPT.TRANSACTIONID = RT.TRANSACTIONID
                AND RPT.TERMINALID = RT.TERMINAL
                AND RPT.STOREID = RT.STORE
                AND RPT.CHANNEL = RT.CHANNEL
                AND RPT.ENTRYTYPE = 2
            ), 0) AS 'HASLOYALTYPAYMENT' -- EntryType 2 is Redeem. HASLOYALTYPAYMENT = 1 if true, 0 if false.
FROM [ax].RETAILTRANSACTIONTABLE RT
LEFT JOIN [ax].RETAILTRANSACTIONORDERSTATUS OS ON OS.TRANSACTIONID = RT.TRANSACTIONID
    AND OS.TERMINAL = RT.TERMINAL
    AND OS.STORE = RT.STORE
    AND OS.CHANNEL = RT.CHANNEL
LEFT JOIN [ax].RETAILTRANSACTIONADDRESSTRANS AT ON AT.TRANSACTIONID = RT.TRANSACTIONID
    AND AT.TERMINAL = RT.TERMINAL
    AND AT.STORE = RT.STORE
    AND AT.CHANNEL = RT.CHANNEL
    AND AT.SALELINENUM = 0 -- SaleLineNum 0 = Header level address
LEFT JOIN [crt].[CUSTOMERORDERTRANSACTION] CO ON CO.CHANNEL = RT.CHANNEL
    AND CO.STORE = RT.STORE
    AND CO.TERMINAL = RT.TERMINAL
    AND CO.TRANSACTIONID = RT.TRANSACTIONID
    AND CO.DATAAREAID = RT.DATAAREAID
LEFT JOIN (
    SELECT DISTINCT ACCOUNTNUMBER
        ,PARTY
        ,DATAAREAID
    FROM [crt].[CUSTOMERSVIEW]
    ) CA ON CA.ACCOUNTNUMBER = RT.CUSTACCOUNT
    AND CA.DATAAREAID = RT.DATAAREAID
LEFT JOIN (
    SELECT TOP 1 ACCOUNTNUMBER
        ,PARTY
        ,DATAAREAID
        ,EMAIL
    FROM [crt].[CUSTOMERSVIEW]
    ) CEV ON CA.ACCOUNTNUMBER = CEV.ACCOUNTNUMBER
    AND CA.DATAAREAID = CEV.DATAAREAID
    AND CA.PARTY = CEV.PARTY
LEFT JOIN [ax].DIRPARTYTABLE DPT ON CA.PARTY = DPT.RECID
WHERE @nvc_CustomerName = '""'
    OR CONTAINS (
        AT.DELIVERYNAME
        ,@nvc_CustomerName
        )
    OR CONTAINS (
        DPT.NAME
        ,@nvc_CustomerName
        )
GO
PRINT N'Altering [crt].[JOURNALTRANSACTIONVIEW]...';


GO

ALTER VIEW [crt].[JOURNALTRANSACTIONVIEW] AS
(
    SELECT  
        RT.CHANNEL AS 'CHANNELID'
        ,RT.BATCHID
        ,RT.BATCHTERMINALID
        ,RT.TRANSACTIONID AS 'TRANSACTIONID'
        ,RT.SALESORDERID AS 'SALESID'
        ,RT.CREATEDDATETIME
        ,RT.DESCRIPTION
        ,(RT.GROSSAMOUNT * -1.0) AS 'GROSSAMOUNT'
        ,CASE WHEN RT.TYPE = 7 THEN    -- TYPE = 7: TenderDeclaration
                (
                    SELECT SUM(TD.AMOUNTTENDERED)
                    FROM [ax].RETAILTRANSACTIONTENDERDECLARATIONTRANS TD
                    WHERE 
                        TD.TRANSACTIONID = RT.TRANSACTIONID
                        AND TD.TERMINAL = RT.TERMINAL
                        AND TD.DATAAREAID = RT.DATAAREAID
                        AND TD.TRANSACTIONSTATUS = 0    -- 0: Normal status transaction
                        AND TD.CHANNEL = RT.CHANNEL
                )
            WHEN RT.TYPE = 16 THEN    -- TYPE = 16: BankDrop
                (
                    SELECT SUM(B.AMOUNTTENDERED)
                    FROM [ax].RETAILTRANSACTIONBANKEDTENDERTRANS B
                    WHERE 
                        B.TRANSACTIONID = RT.TRANSACTIONID
                        AND B.TERMINAL = RT.TERMINAL
                        AND B.DATAAREAID = RT.DATAAREAID
                        AND B.TRANSACTIONSTATUS = 0    -- 0: Normal status transaction
                        AND B.CHANNEL = RT.CHANNEL
                )
            WHEN RT.TYPE = 17 THEN    -- TYPE = 17: SafeDrop
                (
                    SELECT SUM(S.AMOUNTTENDERED)
                    FROM [ax].RETAILTRANSACTIONSAFETENDERTRANS S
                    WHERE 
                        S.TRANSACTIONID = RT.TRANSACTIONID
                        AND S.TERMINAL = RT.TERMINAL
                        AND S.DATAAREAID = RT.DATAAREAID
                        AND S.TRANSACTIONSTATUS = 0    -- 0: Normal status transaction
                        AND S.CHANNEL = RT.CHANNEL
                )
            WHEN RT.TYPE = 3 THEN    -- TYPE = 3: Payment
                (
                    SELECT SUM(P.AMOUNTTENDERED)
                    FROM [ax].RETAILTRANSACTIONPAYMENTTRANS P
                    WHERE
                        P.TRANSACTIONID = RT.TRANSACTIONID
                        AND P.TERMINAL = RT.TERMINAL
                        AND P.DATAAREAID  = RT.DATAAREAID
                        AND P.TRANSACTIONSTATUS = 0    -- 0: Normal status transaction
                        AND P.CHANNEL = RT.CHANNEL
                )
            ELSE (RT.GROSSAMOUNT * -1.0) END AS 'TOTALAMOUNT'
        ,RT.TERMINAL AS 'TERMINAL'
        ,RT.STORE AS 'STORE'
        ,RT.STAFF AS 'STAFF'
        ,RT.CUSTACCOUNT AS 'CUSTOMERID'
        ,RT.RECEIPTEMAIL AS 'RECEIPTEMAIL'
        ,RT.TYPE
        ,CASE LEN(ISNULL(AT.DELIVERYNAME, ''))
            WHEN 0 THEN DPT.NAME
            ELSE AT.DELIVERYNAME END AS 'NAME'
        ,RT.CHANNELREFERENCEID AS 'CHANNELREFERENCEID'
        ,CV.EMAIL
        ,RT.RECEIPTID AS 'RECEIPTID'
        ,DATEADD(second, RT.TRANSTIME, CAST(RT.TRANSDATE AS DATETIME)) AS 'BEGINDATETIME'
        ,RT.BUSINESSDATE
    FROM [ax].RETAILTRANSACTIONTABLE RT
    LEFT JOIN [ax].RETAILTRANSACTIONADDRESSTRANS AT ON
        AT.TRANSACTIONID = RT.TRANSACTIONID
        AND AT.TERMINAL = RT.TERMINAL
        AND AT.STORE = RT.STORE
        AND AT.CHANNEL = RT.CHANNEL
        AND AT.SALELINENUM = 0      -- SaleLineNum 0 = Header level address
    LEFT JOIN [crt].[CUSTOMERSVIEW] CV    
        ON CV.ACCOUNTNUMBER = RT.CUSTACCOUNT AND CV.DATAAREAID = RT.DATAAREAID
    LEFT JOIN [ax].DIRPARTYTABLE DPT ON CV.PARTY = DPT.RECID
    WHERE (
    RT.ENTRYSTATUS = 0 -- Normal
    OR RT.ENTRYSTATUS = 2 -- Posted
    ) AND (
    RT.TYPE = 2 -- Sales
    OR RT.TYPE = 3    -- Payment
    OR RT.TYPE = 7    -- TenderDeclaration
    OR RT.TYPE = 14   -- SalesOrder
    OR RT.TYPE = 15   -- SalesInvoice
    OR RT.TYPE = 16   -- BankDrop
    OR RT.TYPE = 17   -- SafeDrop
    OR RT.TYPE = 18   -- IncomeExpense
    OR RT.TYPE = 19   -- CustomerOrder
    )
)
GO
PRINT N'Refreshing [crt].[ORDERHISTORYVIEW]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[ORDERHISTORYVIEW]';


GO
PRINT N'Refreshing [crt].[EMPLOYEEPASSWORDSVIEW]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[EMPLOYEEPASSWORDSVIEW]';


GO
PRINT N'Refreshing [crt].[EMPLOYEEPERMISSIONOVERRIDESVIEW]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[EMPLOYEEPERMISSIONOVERRIDESVIEW]';


GO
PRINT N'Refreshing [crt].[EMPLOYEEPERMISSIONSPOSITIONSVIEW]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[EMPLOYEEPERMISSIONSPOSITIONSVIEW]';


GO
PRINT N'Altering [crt].[RETAILTILLLAYOUTBYCRITERIAVIEW]...';


GO

ALTER VIEW [crt].[RETAILTILLLAYOUTBYCRITERIAVIEW] AS
(
	SELECT
		rts.STAFFID AS REF_STAFFID,
		NULL AS REF_TERMINALID,
		NULL AS REF_CHANNELID,
		rtl.DEVICETYPE AS REF_DEVICETYPEID,
		1 AS REF_PRIORITY,
		rtl.NAME,
		rtl.WIDTH,
		rtl.HEIGHT,
		rtl.LAYOUTID,
		rtl.CUSTOMERLAYOUTID,
		rtl.TOTALID,
		rtl.RECEIPTID,
		rtl.LAYOUTXML,
		rtl.LAYOUTXMLPORTRAIT,
		rtl.CUSTOMERLAYOUTXML,
		rtl.TOTALSLAYOUTXML,
		rtl.CASHCHANGERLAYOUTXML,
		rtl.RECEIPTPAYMENTLAYOUTXML,
		rtl.RECEIPTITEMSLAYOUTXML,
		rtl.RECID,
		rtl.STARTSCREEN
	FROM
		ax.RETAILSTAFFTABLE AS rts
		INNER JOIN ax.RETAILTILLLAYOUTSTAFF AS rtls ON rtls.STAFF = rts.RECID
		INNER JOIN ax.RETAILTILLLAYOUT AS rtl ON rtl.LAYOUTID = rtls.LAYOUTID
		LEFT JOIN ax.RETAILDEVICETYPES AS rdt ON rdt.RECID = rtl.DEVICETYPE

	UNION ALL

	SELECT
		NULL AS REF_STAFFID,
		rtt.RECID AS REF_TERMINALID,
		NULL AS REF_CHANNELID,
		rtl.DEVICETYPE  AS REF_DEVICETYPEID,
		2 AS REF_PRIORITY,
		rtl.NAME,
		rtl.WIDTH,
		rtl.HEIGHT,
		rtl.LAYOUTID,
		rtl.CUSTOMERLAYOUTID,
		rtl.TOTALID,
		rtl.RECEIPTID,
		rtl.LAYOUTXML,
		rtl.LAYOUTXMLPORTRAIT,
		rtl.CUSTOMERLAYOUTXML,
		rtl.TOTALSLAYOUTXML,
		rtl.CASHCHANGERLAYOUTXML,
		rtl.RECEIPTPAYMENTLAYOUTXML,
		rtl.RECEIPTITEMSLAYOUTXML,
		rtl.RECID,
		rtl.STARTSCREEN
	FROM
		ax.RETAILTERMINALTABLE AS rtt
		INNER JOIN ax.RETAILTILLLAYOUT AS rtl ON rtl.LAYOUTID = rtt.LAYOUTID
		LEFT JOIN ax.RETAILDEVICETYPES AS rdt ON rdt.RECID = rtl.DEVICETYPE

	UNION ALL

	SELECT
		NULL AS REF_STAFFID,
		NULL AS REF_TERMINALID,
		rct.RECID AS REF_CHANNELID,
		rtl.DEVICETYPE  AS REF_DEVICETYPEID,
		3 AS REF_PRIORITY,
		rtl.NAME,
		rtl.WIDTH,
		rtl.HEIGHT,
		rtl.LAYOUTID,
		rtl.CUSTOMERLAYOUTID,
		rtl.TOTALID,
		rtl.RECEIPTID,
		rtl.LAYOUTXML,
		rtl.LAYOUTXMLPORTRAIT,
		rtl.CUSTOMERLAYOUTXML,
		rtl.TOTALSLAYOUTXML,
		rtl.CASHCHANGERLAYOUTXML,
		rtl.RECEIPTPAYMENTLAYOUTXML,
		rtl.RECEIPTITEMSLAYOUTXML,
		rtl.RECID,
		rtl.STARTSCREEN
	FROM
		ax.RETAILCHANNELTABLE AS rct
		INNER JOIN ax.RETAILTILLLAYOUTSTORE AS rtls ON rtls.STORE = rct.RECID
		INNER JOIN ax.RETAILTILLLAYOUT AS rtl ON rtl.LAYOUTID = rtls.LAYOUTID
		LEFT JOIN ax.RETAILDEVICETYPES AS rdt ON rdt.RECID = rtl.DEVICETYPE
)
GO
PRINT N'Refreshing [crt].[EMPLOYEEPERMISSIONSVIEW]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[EMPLOYEEPERMISSIONSVIEW]';


GO
PRINT N'Altering [crt].[ASSORTEDPRODUCTSVIEW]...';


GO
/**
 *  Return products assorted to the channel for a date range.
 *  This view will return multiple records for a channel-product within a date range, thus one should only use this view as filter.
 *  Recommended join is with columns: CHANNELID, PRODUCTID, VALIDFROM, VALIDTO.
 *  ISREMOTE equality against 0 or 1 will reduce the query plan complexity by only processing the assortment required.
 */
ALTER VIEW [crt].[ASSORTEDPRODUCTSVIEW] AS
(    
    SELECT
        [rct].RECID AS CHANNELID,
        [par].PRODUCTID,
        [par].VALIDFROM,
        [par].VALIDTO,
        CAST(0 AS BIT)   AS ISREMOTE
    FROM [crt].PRODUCTASSORTMENTRULES_V2 par
        INNER JOIN [ax].RETAILASSORTMENTLOOKUPCHANNELGROUP ralcg ON [ralcg].ASSORTMENTID = [par].ASSORTMENTID
            INNER JOIN [ax].RETAILCHANNELTABLE rct ON [rct].OMOPERATINGUNITID = [ralcg].OMOPERATINGUNITID
    
    UNION ALL

    -- temporary assorted variants
    SELECT
        CHANNELID,
        variantMap.RECID            AS PRODUCTID,

        -- explicitly cast to DATA to avoid casting [crt].PRODUCTASSORTMENTRULES_V2 dates to date time 
        CAST(tempAssortment.VALIDFROM AS DATE)     AS VALIDFROM,
        CAST(tempAssortment.VALIDTO AS DATE)       AS VALIDTO,
        CAST(1 AS BIT)              AS ISREMOTE
    FROM [crt].TMPASSORTEDPRODUCTS tempAssortment
        INNER JOIN [ax].ECORESDISTINCTPRODUCTVARIANT variantMap ON variantMap.PRODUCTMASTER = tempAssortment.PRODUCTID

    UNION ALL

    -- temporary assorted masters and standalones
    SELECT
        tempAssortment.CHANNELID,
        tempAssortment.PRODUCTID        AS PRODUCTID,
        CAST(tempAssortment.VALIDFROM AS DATE)     AS VALIDFROM,
        CAST(tempAssortment.VALIDTO AS DATE)       AS VALIDTO,
        CAST(1 AS BIT)              AS ISREMOTE
    FROM [crt].TMPASSORTEDPRODUCTS tempAssortment
)
GO
PRINT N'Refreshing [crt].[REMOTEPRODUCTASSORTMENTRULESVIEW]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[REMOTEPRODUCTASSORTMENTRULESVIEW]';


GO
PRINT N'Refreshing [crt].[RETAILOFFLINEPRODUCTSBYCHANNELVIEW]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[RETAILOFFLINEPRODUCTSBYCHANNELVIEW]';


GO
PRINT N'Refreshing [crt].[PRODUCTIDENTITIESVIEW]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[PRODUCTIDENTITIESVIEW]';


GO
PRINT N'Refreshing [crt].[GETLINKEDPRODUCTRELATIONS]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[GETLINKEDPRODUCTRELATIONS]';


GO
PRINT N'Refreshing [crt].[GETPRODUCTBEHAVIORBYPRODUCTIDS]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[GETPRODUCTBEHAVIORBYPRODUCTIDS]';


GO
PRINT N'Refreshing [crt].[GETPRODUCTCOMPONENTS]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[GETPRODUCTCOMPONENTS]';


GO
PRINT N'Refreshing [crt].[GETPRODUCTDIMENSIONVALUESBYVARIANTPRODUCTIDS]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[GETPRODUCTDIMENSIONVALUESBYVARIANTPRODUCTIDS]';


GO
PRINT N'Altering [crt].[GETVARIANTSWITHCOMPONENTVALUES]...';


GO

ALTER FUNCTION [crt].[GETVARIANTSWITHCOMPONENTVALUES]
(
    @bi_ChannelId                    BIGINT,
    @dt_ChannelDate                  DATE,
    @tvp_SlotToComponentRelationship [crt].[RECORDIDSTABLETYPE] READONLY
)
RETURNS TABLE
RETURN
    SELECT
        [rkvc].KITVARIANT AS PRODUCTID,
        0 AS ISREMOTE
    FROM @tvp_SlotToComponentRelationship stcr
    INNER JOIN [ax].RETAILKITVARIANTCOMPONENT rkvc ON [rkvc].COMPONENT = [stcr].RECID AND [rkvc].COMPONENTRECID = [stcr].PARENTRECID
    WHERE EXISTS (SELECT 1 FROM [crt].LOCALPRODUCTASSORTMENTRULESVIEW par WITH (NOEXPAND) WHERE [par].VARIANTID = [rkvc].KITVARIANT
    AND [par].CHANNELID = @bi_ChannelId AND @dt_ChannelDate BETWEEN [par].VALIDFROM AND [par].VALIDTO)
    GROUP BY [rkvc].KITVARIANT
    HAVING COUNT(*) = (SELECT COUNT(*) FROM @tvp_SlotToComponentRelationship)

    UNION ALL
    
    SELECT
        [rkvc].KITVARIANT AS PRODUCTID,
        1 AS ISREMOTE
    FROM @tvp_SlotToComponentRelationship stcr
    INNER JOIN [ax].RETAILKITVARIANTCOMPONENT rkvc ON [rkvc].COMPONENT = [stcr].RECID AND [rkvc].COMPONENTRECID = [stcr].PARENTRECID
    WHERE EXISTS (SELECT 1 FROM [crt].REMOTEPRODUCTASSORTMENTRULESVIEW par WHERE [par].VARIANTID = [rkvc].KITVARIANT
    AND [par].CHANNELID = @bi_ChannelId AND @dt_ChannelDate BETWEEN [par].VALIDFROM AND [par].VALIDTO)
    GROUP BY [rkvc].KITVARIANT
    HAVING COUNT(*) = (SELECT COUNT(*) FROM @tvp_SlotToComponentRelationship)
GO
PRINT N'Refreshing [crt].[GETVARIANTSWITHDIMENSIONVALUES]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[GETVARIANTSWITHDIMENSIONVALUES]';


GO
PRINT N'Altering [crt].[CHANNELCONFIGURATIONVIEW]...';


GO

-- [Deprecated] [Last used release = CTP-8]

ALTER VIEW [crt].[CHANNELCONFIGURATIONVIEW] AS
(
    SELECT
        [rct].[RECID],
        [rct].[CHANNELTYPE],
        [rct].[INVENTLOCATION],
        [rct].[INVENTLOCATIONDATAAREAID],
        [rct].[CURRENCY],
        [rct].[PRICEINCLUDESSALESTAX],
        [rct].[DISPLAYTAXPERTAXCOMPONENT],
        [l].ACCOUNTINGCURRENCY AS 'COMPANYCURRENCY',
        [lpa].[COUNTRYREGIONID],
        [lacr].[ISOCODE] AS 'COUNTRYREGIONISOCODE',
        [rsp].[EXCHANGERATETYPE],
        [rsp].[STAFFPASSWORDHASH],
        [rsp].[TSPASSWORDENCRYPTION],
        [rsp].[DEVICETOKENALGORITHM],
        [rsp].[DEVICETOKENEXPIRATION],
        [rsp].[EARNLOYALTYOFFLINE],
        [rtsp].[PROFILEID] AS 'TSPROFILEID',
        [rtsp].[LANGUAGE] AS 'TSLANGUAGEID',
        [rfp].[TSSTAFF] AS 'TSSTAFFLOGONCONFIGURATION',
		[rfp].[DAYSCUSTOMERHISTORY] AS 'DAYSCUSTOMERHISTORY',
        [dpt].LANGUAGEID AS 'COMPANYLANGUAGEID',
        [rtsp].[SERVERSERVICENAME] AS 'TSSERVICENAME',
        [rtsp].[SECURITYOFF] AS 'TSSECURITYOFF',
        [rtsp].[USERID] AS 'TSUSERID',
        [rtsp].[SERVICEHOSTURL] AS 'TSSERVICEHOSTURL',
        [rtsp].[ISSUERURI] AS 'TSISSUERURI',
        [rtsp].[IDENTITYPROVIDER] AS 'TSIDENTITYPROVIDER',
        [rtsp].[IDENTITYPROVIDERCLAIMTYPE] AS 'TSIDENTITYPROVIDERCLAIMTYPE',
        [rtsp].[AUDIENCEURN] AS 'TSAUDIENCEURN',
        [rtsp].[ISSUEDTOKENTYPE] AS 'TSISSUEDTOKENTYPE',
        [rp].PICKUPDELIVERYMODECODE,
        [rp].ELECTRONICDELIVERYMODECODE,
        [rp].GIFTCARDITEM,
        [rp].CANCELLATIONCHARGE,
        [rp].CANCELLATIONCHARGECODE,
        [rp].EXPIRATIONDATE AS 'QUOTEEXPIRATIONDAYS',
        [rp].MINIMUMDEPOSITFORSALESORDER,
        [rp].SHIPPINGCHARGECODE,
        [rp].PASSWORDEXPIRYINTERVAL AS 'PASSWORDEXPIRYINTERVAL',
        [rp].PASSWORDEXPIRYNOTIFICATIONTHRESHOLD AS 'PASSWORDEXPIRYNOTIFICATIONTHRESHOLD',
        [rct].CHANNELTIMEZONE AS 'TIMEZONECODE',
        [rct].CHANNELTIMEZONEINFOID AS 'TIMEZONEINFOID',
        [clv].LANGUAGEID AS 'DEFAULTLANGUAGEID',
        [rsbp].[APIKEY] AS 'BINGAPIKEY',
        [lpa].VALIDFROM,
        [lpa].VALIDTO,
        [crt].GETCATALOGIMAGEATTRIBUTEDEFAULTVALUE() AS CATALOGDEFAULTIMAGETEMPLATE,
        [crt].GETEMPLOYEEIMAGEATTRIBUTEDEFAULTVALUE() AS EMPLOYEEDEFAULTIMAGETEMPLATE,
        [crt].GETCUSTOMERIMAGEATTRIBUTEDEFAULTVALUE() AS CUSTOMERDEFAULTIMAGETEMPLATE,
        [crt].GETCATEGORYIMAGEATTRIBUTEDEFAULTVALUE() AS CATEGORYDEFAULTIMAGETEMPLATE,
        [crt].GETPRODUCTIMAGEATTRIBUTEDEFAULTVALUE() AS PRODUCTDEFAULTIMAGETEMPLATE
    FROM [ax].RETAILCHANNELTABLE rct

    -- Get transaction service profile information
    LEFT JOIN [ax].RETAILTRANSACTIONSERVICEPROFILE rtsp ON rct.TRANSACTIONSERVICEPROFILE = rtsp.PROFILEID
    LEFT JOIN [ax].RETAILSTORETABLE rst ON rst.RECID = rct.RECID
    LEFT JOIN [ax].RETAILFUNCTIONALITYPROFILE rfp on rfp.PROFILEID = rst.FUNCTIONALITYPROFILE

    -- Get the store's country/region
    INNER JOIN [ax].COMPANYINFO ci ON ci.DATAAREA = rct.INVENTLOCATIONDATAAREAID
    INNER JOIN [ax].LEDGER l ON l.PRIMARYFORLEGALENTITY = ci.RECID
    INNER JOIN [ax].DIRPARTYLOCATION drl ON drl.ISPRIMARY = 1 AND drl.PARTY = ci.RECID
    INNER JOIN [ax].LOGISTICSPOSTALADDRESS lpa ON lpa.ISPRIVATE = 0 AND lpa.LOCATION = drl.LOCATION
    INNER JOIN [ax].LOGISTICSADDRESSCOUNTRYREGION lacr ON lacr.COUNTRYREGIONID = lpa.COUNTRYREGIONID

    -- Get the company's language
    INNER JOIN [ax].DIRPARTYTABLE dpt on dpt.RECID = ci.RECID

     -- Get the store's default language
    INNER JOIN [crt].CHANNELLANGUAGESVIEW clv ON clv.CHANNEL = rct.RECID AND clv.ISDEFAULT = 1
    INNER JOIN [ax].RETAILPARAMETERS rp ON rp.[KEY] = 0 AND rp.DATAAREAID = rct.INVENTLOCATIONDATAAREAID

    CROSS JOIN [ax].RETAILSHAREDPARAMETERS rsp

    LEFT JOIN [ax].RETAILSHAREDBINGPARAMETERS rsbp ON rsbp.[KEY] = 0
    WHERE rsp.[KEY] = 0
)
GO
PRINT N'Altering [crt].[EXCHANGERATEVIEW]...';


GO

ALTER VIEW [crt].[EXCHANGERATEVIEW] AS
(
    SELECT
        er.EXCHANGERATE,
        cp.FROMCURRENCYCODE,
        cp.TOCURRENCYCODE,
        er.VALIDFROM,
        er.VALIDTO,
        er.RECID
    FROM [ax].EXCHANGERATE er
    INNER JOIN [ax].EXCHANGERATECURRENCYPAIR cp ON cp.RECID = er.EXCHANGERATECURRENCYPAIR
    INNER JOIN [ax].RETAILSHAREDPARAMETERS rsp ON rsp.EXCHANGERATETYPE = cp.EXCHANGERATETYPE
)
GO
PRINT N'Refreshing [crt].[STAFFCREDENTIALSVIEW]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[STAFFCREDENTIALSVIEW]';


GO
PRINT N'Altering [crt].[CATALOGPRODUCTCATEGORYVIEW]...';


GO

-- [Deprecated] [Last used release = CTP-8]

ALTER VIEW [crt].[CATALOGPRODUCTCATEGORYVIEW] AS
(
    SELECT
        [rpcp].CATALOG,
        [rpcp].PRODUCT,
        [rpcpc].CATEGORY,
        [rpcpc].CATEGORYHIERARCHY,
        [rpcpc].INCLUDEEXCLUDETYPE
    FROM [ax].RETAILPUBCATALOGPRODUCT rpcp
    INNER JOIN [ax].RETAILPUBCATALOGPRODUCTCATEGORY rpcpc ON [rpcp].ORIGIN = [rpcpc].CATALOGPRODUCT
)
GO
PRINT N'Altering [crt].[DEVICECONFIGURATIONSVIEW]...';


GO
ALTER VIEW [crt].[DEVICECONFIGURATIONSVIEW] AS
(
    SELECT
        rfp.AGGREGATEITEMS,
        rfp.AGGREGATEITEMSFORPRINTING,
        rfp.AGGREGATEPAYMENTS,
        rfp.AUDITENABLED,
        rfp.CANCELREASON AS NFCEVOIDED,
        rfp.CONTINGENCYREASON AS NFCECONTINGENCYMNODENABLED,
        rfp.CREATEASYNCCUSTOMERS,
        rfp.CREATEOFFLINECUSTOMERORDERS,
        rfp.DAYSTRANSACTIONSEXISTS,
        rfp.DISCOUNTATTOTAL,
        rfp.DISPLAYSECONDARYTOTALCURRENCY,
        rfp.ENDOFTRANSACTION,
        rfp.ITEMNOTONFILE,
        rfp.LIMITSTAFFLISTTOSTORE,
        rfp.LINEITEMTAXCHANGE,
        rfp.MARKDOWN AS PRODUCTDISCOUNT,
        rfp.MARKUP,
        rfp.MAXIMUMPRICE,
        rfp.MAXIMUMQTY,
        rfp.MINIMUMPASSWORDLENGTH,
        rfp.MUSTKEYINPRICEIFZERO,
        rfp.NAME AS FUNCTIONALITYPROFILEDESCRIPTION,
        rfp.NEGATIVESALESLINE AS RETURNPRODUCT,
        rfp.NOSALE AS OPENDRAWER,
        rfp.OVERRIDEPRICE,
        rfp.PRINTXREPORTONTERMINAL,
        rfp.PROFILEID,
        rfp.REFUNDSALE,
        rfp.SALESPERSON,
        rfp.SEARCHCUSTOMERSINAX,
        rfp.SECONDARYTOTALCURRENCY,
        rfp.SERIALNUMBER,
        rfp.SHOWSTAFFLISTATLOGON,
        rfp.STAFFBARCODELOGON,
        rfp.STAFFBARCODELOGONREQUIRESPASSWORD,
        rfp.STAFFCARDLOGON,
        rfp.STAFFCARDLOGONREQUIRESPASSWORD,
        rfp.STARTOFTRANSACTION,
        rfp.TAENABLEREGISTRATION,
        rfp.TENDERDECLARATION,
        rfp.TRANSACTIONTAXCHANGE,
        rfp.VOIDISPRESSED,
        rfp.VOIDPAYMENT,
        rfp.VOIDTRANSACTION,
        rfp.INCLUDEKITCOMPONENTS,
        rfp.MAXTRANSACTIONSEARCHRESULTS,
        rfp.REQUIREAMOUNTDECLARATION,
        rfp.DECIMALNOTREQUIREDFORMINORCURRENCYUNIT,
        rfp.MANUALCALCULATEDISCOUNTS,
        rst.CULTURENAME,
        rst.HIDETRAININGMODE,
        rst.PHONE,
        COALESCE(rtt.STATEMENTMETHOD, rst.STATEMENTMETHOD) AS STATEMENTMETHOD,
        rst.RECID AS CHANNELID,
        rst.STORENUMBER,
        rst.TAXGROUP,
        rst.TAXIDENTIFICATIONNUMBER,
        rst.TAXOVERRIDEGROUP,
        rst.TENDERDECLARATIONCALCULATION,
        rst.USECUSTOMERBASEDTAX,
        rst.USEDESTINATIONBASEDTAX,
        rtt.AUTOLOGOFFTIMEOUT,
        rtt.CREATERECORDING,
        rtt.CUSTOMERDISPLAYTEXT1,
        rtt.CUSTOMERDISPLAYTEXT2,
        rtt.EFTSTORERECID,
        rtt.EFTTERMINALID,
        rtt.EXITAFTEREACHTRANSACTION,
        rtt.HARDWAREPROFILE,
        rtt.LOCATION,
        rtt.NAME AS TERMINALDESCRIPTION,
        rtt.OPENDRAWERATLILO,
        rtt.PLAYBACKRECORDING,
        rtt.PRINTVATREFUNDCHECKS,
        rtt.SELECTHARDWARESTATIONONTENDERING,
        rtt.STANDALONE,
        rtt.TERMINALID,
        rtt.TERMINALSTATEMENT,
        rtac.COLOR,
        rvp.POSSKINNAME,
        rvp.FONTSCHEME,
        rilb.PICTURE AS LOGONBACKGROUNDPICTURE,
        rilbp.PICTURE AS LOGONBACKGROUNDPICTUREPORTRAIT,
        rib.PICTURE AS BACKGROUNDPICTURE,
        rct.CURRENCY,
        rct.INVENTLOCATION,
        rst.STMTPOSTASBUSINESSDAY AS 'STATEMENTPOSTINGASBUSINESSDAY',
        rst.STMTCALCBATCHENDTIME AS 'STATEMENTCALCULATIONBATCHENDTIMEINSECONDS',
        rop.RECID AS 'OFFLINEPROFILE',
        rop.CHECKNEWDBINTERVAL,
        rop.TRXUPLOADINTERVAL,
        rop.RECONNECTINTERVAL,
        rop.[TIMEOUT] AS 'OFFLINETIMEOUT'
    FROM [ax].RETAILCHANNELTABLE AS rct
    INNER JOIN [ax].RETAILSTORETABLE AS rst ON rct.RECID = rst.RECID
    INNER JOIN [ax].RETAILTERMINALTABLE AS rtt ON rtt.STORERECID = rst.RECID
    INNER JOIN [ax].RETAILFUNCTIONALITYPROFILE AS rfp ON rst.FUNCTIONALITYPROFILE = rfp.PROFILEID
    INNER JOIN [ax].RETAILVISUALPROFILE AS rvp ON rvp.PROFILEID = rtt.VISUALPROFILE
    LEFT JOIN [ax].RETAILTHEMEPALLET AS rtp ON rtp.NAME = rvp.PALLET
    LEFT JOIN [ax].RETAILTHEMEACCENTCOLOR AS rtac ON rtac.PALLET = rtp.RECID
    LEFT JOIN [ax].RETAILIMAGES as rilb ON rilb.PICTUREID = rvp.PICTUREID
    LEFT JOIN [ax].RETAILIMAGES as rilbp ON rilbp.PICTUREID = rvp.PICTUREIDPORTRAIT
    LEFT JOIN [ax].RETAILIMAGES as rib ON rib.PICTUREID = rvp.BACKGROUNDPICTUREID
    LEFT JOIN [ax].RETAILOFFLINEPROFILE as rop on rst.OFFLINEPROFILE = rop.RECID
)
GO
PRINT N'Altering [crt].[DISCOUNTCODEVIEW]...';


GO

ALTER VIEW [crt].[DISCOUNTCODEVIEW] AS
(
    SELECT
        rdc.[RECID],
        rdc.[BARCODE],
        rdc.[DISCOUNTCODE],
        rdc.[DISCOUNTOFFERID],
        rpd.[NAME],
        rpd.[DESCRIPTION],
        rpd.[DISCLAIMER],
        rpd.[VALIDFROM],
        rpd.[VALIDTO],
        rpd.[CONCURRENCYMODE],
        rpd.[STATUS],
        rpd.[ISDISCOUNTCODEREQUIRED],
		rdc.[DATAAREAID]
    FROM [ax].[RETAILDISCOUNTCODE] AS rdc
    INNER JOIN [ax].[RETAILPERIODICDISCOUNT] AS rpd ON rpd.[OFFERID] = rdc.[DISCOUNTOFFERID] AND rpd.DATAAREAID = rdc.DATAAREAID
	INNER JOIN [ax].[RETAILPERIODICDISCOUNT] pd ON pd.OFFERID = rdc.DISCOUNTOFFERID AND pd.DATAAREAID = rdc.DATAAREAID
	WHERE pd.STATUS = 1
	    AND (pd.PERIODICDISCOUNTTYPE != 3) -- Don't fetch promotions
)
GO
PRINT N'Altering [crt].[GETHARDWARESTATIONSVIEW]...';


GO

ALTER VIEW [crt].[GETHARDWARESTATIONSVIEW] AS
(
    SELECT
        rshws.[RECID],
        rhws.[HARDWAREPROFILEID],
        rhws.[HARDWARESTATIONID],
        rhws.[HARDWARESTATIONNAME],
        rshws.[DESCRIPTION] AS [HARDWARESTATIONDESCRIPTION],
        rshws.[STORE] AS [STORE],
        rshws.[HOSTNAME] AS [HOSTNAME],
        CASE
        WHEN rhws.[HARDWARESTATIONPORTNUMBER] = 0
        THEN
        'https://' + rshws.[HOSTNAME] + '/HardwareStation'
        ELSE
        'https://' + rshws.[HOSTNAME] + ':' + CAST(rhws.[HARDWARESTATIONPORTNUMBER] AS varchar(15)) + '/HardwareStation'
        END
        AS [HARDWARESTATIONURL],
        rshws.EFTTERMINALID AS [EFTTERMINALID]
    FROM ax.RETAILHARDWARESTATION rhws
    INNER JOIN ax.RETAILSTOREHARDWARESTATIONTABLE rshws
    ON rhws.HARDWARESTATIONID = rshws.HARDWARESTATIONID
)
GO
PRINT N'Altering [crt].[HARDWAREPROFILESVIEW]...';


GO

ALTER VIEW [crt].[HARDWAREPROFILESVIEW] AS
(
SELECT rhp.DELAYFORLINKEDITEMS
      ,rhp.DISPLAYBALANCETEXT
      ,rhp.DISPLAYBINCONVERSION
      ,rhp.DISPLAYCHARACTERSET
      ,rhp.DISPLAYCLOSEDLINE1
      ,rhp.DISPLAYCLOSEDLINE2
      ,rhp.DISPLAYDESCRIPTION
      ,rhp.DISPLAYDEVICE
      ,rhp.DISPLAYDEVICENAME
      ,rhp.DISPLAYLINKEDITEM
      ,rhp.DISPLAYTERMINALCLOSED
      ,rhp.DISPLAYTOTALTEXT
      ,rhp.DUALDISPLAY
      ,rhp.DUALDISPLAYBROWSERURL
      ,rhp.DUALDISPLAYIMAGEINTERVAL
      ,rhp.DUALDISPLAYIMAGEPATH
      ,rhp.DUALDISPLAYRECEIPTPERCENTAGE
      ,rhp.DUALDISPLAYTYPE
      ,rhp.EFT
      ,rhp.EFTCOMPANYID
      ,rhp.EFTCONFIGURATION
      ,rhp.EFTCONNECTORNAME
      ,rhp.EFTDATA
      ,rhp.EFTDESCRIPTION
      ,rhp.EFTMERCHANTID
      ,rhp.EFTPASSWORD
      ,rhp.EFTSERVERNAME
      ,rhp.EFTSERVERPORT
      ,rhp.EFTUSERID
      ,rhp.ENDTRACK1
      ,rhp.ENDTRACK2
      ,rhp.KEYBOARDMAPPINGID
      ,rhp.KEYLOCK
      ,rhp.KEYLOCKDESCRIPTION
      ,rhp.KEYLOCKDEVICENAME
      ,rhp.MANUALINPUTALLOWED
      ,rhp.MSR
      ,rhp.MSRDESCRIPTION
      ,rhp.MSRDEVICENAME
      ,rhp.MSRMAKE
      ,rhp.MSRMODEL
      ,rhp.NAME
      ,rhp.PINPAD
      ,rhp.PINPADDESCRIPTION
      ,rhp.PINPADDEVICENAME
      ,rhp.PINPADMAKE
      ,rhp.PINPADMODEL
      ,rhp.PROFILEID
      ,rhp.RFIDDESCRIPTION
      ,rhp.RFIDDEVICENAME
      ,rhp.RFIDSCANNERTYPE
      ,rhp.SCALE
      ,rhp.SCALEDESCRIPTION
      ,rhp.SCALEDEVICENAME
      ,rhp.SEPARATOR1
      ,rhp.SIGCAP
      ,rhp.SIGCAPDESCRIPTION
      ,rhp.SIGCAPDEVICENAME
      ,rhp.SIGCAPFORMNAME
      ,rhp.SIGCAPMAKE
      ,rhp.SIGCAPMODEL
      ,rhp.STARTTRACK1
      ,rhp.TIMEOUTINSEC
      ,CAST(rhp.EFTTESTMODE as bit) as EFTTESTMODE
      ,rhp.[RECID]
  FROM [ax].[RETAILHARDWAREPROFILE] AS rhp
)
GO
PRINT N'Altering [crt].[INVENTITEMBARCODESVIEW]...';


GO

ALTER VIEW [crt].[INVENTITEMBARCODESVIEW] AS
(
    SELECT
        IIB.[RECID],
        IIB.[BARCODESETUPID],
        CAST(IIB.[BLOCKED] AS BIT) AS BLOCKED,
        IIB.[DESCRIPTION],
        CASE
            WHEN IIB.[RETAILVARIANTID] = '' THEN NULL -- This is needed to replace 'AllBlank' values with NULL
            ELSE IIB.[INVENTDIMID]
        END AS INVENTDIMID,
        IIB.[ITEMBARCODE],
        IIB.[ITEMID],
        IIB.[QTY],
        IIB.[RETAILSHOWFORITEM],
        IIB.[RETAILVARIANTID],
        IIB.[UNITID],
        IIB.[USEFORINPUT],
        IIB.[USEFORPRINTING],
        IIB.[DATAAREAID]
    FROM [ax].INVENTITEMBARCODE IIB
)
GO
PRINT N'Altering [crt].[ITEMCHANNELBASEPRICEVIEW]...';


GO

ALTER VIEW [crt].[ITEMCHANNELBASEPRICEVIEW]
AS
(
    SELECT
        [rct].RECID         AS CHANNEL,
        [it].PRODUCT        AS PRODUCT,
        [itm].PRICE         AS PRICE
    FROM [ax].INVENTTABLEMODULE itm
    INNER JOIN [ax].INVENTTABLE it ON [it].ITEMID = [itm].ITEMID AND [it].DATAAREAID = [itm].DATAAREAID AND [itm].MODULETYPE = 2
    INNER JOIN [ax].RETAILCHANNELTABLE rct ON [rct].INVENTLOCATIONDATAAREAID = [it].DATAAREAID
)
GO
PRINT N'Altering [crt].[ITEMCHANNELTRADEAGREEMENTPRICEVIEW]...';


GO

ALTER VIEW [crt].[ITEMCHANNELTRADEAGREEMENTPRICEVIEW]
AS
(
    SELECT
        [rcpg].RETAILCHANNEL    AS CHANNEL,
        [it].PRODUCT            AS PRODUCT,
        [pdt].AMOUNT            AS PRICE,
        [pdt].FROMDATE          AS FROMDATE, 
        [pdt].TODATE            AS TODATE 
    FROM [ax].RETAILCHANNELPRICEGROUP rcpg 
    INNER JOIN [ax].PRICEDISCGROUP pdg ON [rcpg].PRICEGROUP = [pdg].RECID
    INNER JOIN [ax].PRICEDISCTABLE pdt ON [pdg].GROUPID = [pdt].ACCOUNTRELATION AND [pdg].DATAAREAID = [pdt].DATAAREAID AND [pdt].ITEMCODE = 0 /* Table */ AND [pdt].ACCOUNTCODE = 1 /* Group */ AND [pdt].RELATION = 4 /* Price */
    INNER JOIN [ax].RETAILCHANNELTABLE rct ON [rct].RECID = [rcpg].RETAILCHANNEL AND [rct].CURRENCY = [pdt].CURRENCY
    INNER JOIN [ax].INVENTTABLE it ON [it].ITEMID = [pdt].ITEMRELATION AND [it].DATAAREAID = [pdt].DATAAREAID
)
GO
PRINT N'Altering [crt].[MEDIAATTRIBUTESVIEW]...';


GO

ALTER VIEW [crt].[MEDIAATTRIBUTESVIEW]
WITH SCHEMABINDING AS
(
    SELECT
        era.RECID AS 'ATTRIBUTE',
        era.ATTRIBUTETYPE AS 'ATTRIBUTETYPE',
        era.NAME AS 'NAME',
		CASE erat.RECID
			WHEN rsp.IMAGESATTRIBUTETYPE THEN 41  -- Image data type
			WHEN rsp.VIDEOSATTRIBUTETYPE THEN 40  -- Video data type
		END AS DATATYPE
    FROM [ax].ECORESATTRIBUTE era
    INNER JOIN [ax].ECORESATTRIBUTETYPE erat ON erat.RECID = era.ATTRIBUTETYPE
    INNER JOIN [ax].RETAILSHAREDPARAMETERS rsp ON rsp.IMAGESATTRIBUTETYPE = erat.RECID OR rsp.VIDEOSATTRIBUTETYPE = erat.RECID
    WHERE erat.ISHIDDEN = 0
)
GO
PRINT N'Altering [crt].[NONCATALOGPRODUCTCATEGORYVIEW]...';


GO

-- [Deprecated] [Last used release = CTP-8]

ALTER VIEW [crt].[NONCATALOGPRODUCTCATEGORYVIEW] AS
(
    SELECT
        [rperc].CHANNEL AS CHANNELID,
        [erpc].CATEGORY AS CATEGORYID,
        [erpc].PRODUCT AS PRODUCTID,
        [erpc].CATEGORYHIERARCHY
    FROM [ax].ECORESPRODUCTCATEGORY AS erpc
    INNER JOIN [ax].RETAILPUBECORESCATEGORY AS rperc ON [rperc].ORIGINID = [erpc].CATEGORY 
         
    UNION ALL

    SELECT
        [rperc].CHANNEL AS CHANNELID,
        [erpc].CATEGORY AS CATEGORYID,
        [erdpv].RECID AS PRODUCTID,
        [erpc].CATEGORYHIERARCHY
    FROM [ax].ECORESDISTINCTPRODUCTVARIANT AS erdpv
    INNER JOIN [ax].ECORESPRODUCTCATEGORY AS erpc ON [erpc].PRODUCT = [erdpv].PRODUCTMASTER
    INNER JOIN [ax].RETAILPUBECORESCATEGORY AS rperc ON [rperc].ORIGINID = [erpc].CATEGORY
)
GO
PRINT N'Altering [crt].[OPERATIONPERMISSIONSVIEW]...';


GO

ALTER VIEW [crt].OPERATIONPERMISSIONSVIEW AS
(
    SELECT
        ops.OPERATIONID,
        ops.CHECKUSERACCESS,
        ops.ALLOWANONYMOUSACCESS,
        ops.ALLOWCUSTOMERACCESS,
        ops.OPERATIONNAME,
        CASE
            WHEN perms1.PERMISSIONNAME IS NOT NULL AND perms2.PERMISSIONNAME IS NOT NULL
                THEN perms1.PERMISSIONNAME + ',' + perms2.PERMISSIONNAME
            ELSE COALESCE(perms1.PERMISSIONNAME, perms2.PERMISSIONNAME, '')
        END AS PERMISSIONNAME
        FROM [ax].RETAILOPERATIONS ops
        LEFT JOIN [ax].RETAILPERMISSIONS perms1 ON perms1.PERMISSIONID = ops.PERMISSIONID
        LEFT JOIN [ax].RETAILPERMISSIONS perms2 ON perms2.PERMISSIONID = ops.PERMISSIONID2
        LEFT JOIN [ax].RETAILPERMISSIONSEX permex ON permex.PERMISSIONID = ops.PERMISSIONIDEX
)
GO
PRINT N'Altering [crt].[PRICEGROUPSVIEW]...';


GO

ALTER VIEW [crt].[PRICEGROUPSVIEW] AS
(
    SELECT
        [pdg].[RECID],
        [pdg].[RECID] AS PRICEGROUP,
        [pdg].[GROUPID],
		[pdg].[RETAILPRICINGPRIORITYNUMBER],
        [c].[RECID] AS CHANNELID
    FROM [ax].PRICEDISCGROUP pdg
    INNER JOIN [ax].RETAILCHANNELTABLE c on c.INVENTLOCATIONDATAAREAID = pdg.DATAAREAID
	WHERE pdg.Module = 1 AND pdg.Type = 0
)
GO
PRINT N'Altering [crt].[PRODUCTCATALOGRULESVIEW]...';


GO
ALTER VIEW [crt].[PRODUCTCATALOGRULESVIEW]
AS
(
    SELECT
        rprct.ORIGINID AS CHANNELID,
        rpcio.[CATALOG] AS CATALOGID,
        [pcp].PRODUCT AS PRODUCTID,
        [rpc].VALIDFROM,
        [rpc].VALIDTO,
        COUNT_BIG(*) AS ANCESTORCOUNT
    FROM ax.RETAILPUBCATALOGINTERNALORG rpcio
    INNER JOIN ax.RETAILPUBCATALOG rpc ON rpc.ORIGIN = rpcio.[CATALOG]
    INNER JOIN ax.RETAILINTERNALORGANIZATION rio ON rio.RECID = rpcio.INTERNALORGANIZATION
    INNER JOIN ax.OMEXPLODEDORGANIZATIONSECURITYGRAPH omeosg ON omeosg.ANCESTORORGANIZATION = rio.INTERNALORGANIZATION
    INNER JOIN ax.OMHIERARCHYPURPOSE omhp ON omhp.HIERARCHYTYPE = omeosg.OMHIERARCHYTYPE AND omhp.HIERARCHYPURPOSE = 9 /* RetailAssortment */ AND omhp.ISDEFAULT = 1
    INNER JOIN ax.RETAILPUBRETAILCHANNELTABLE rprct ON rprct.OMOPERATINGUNITID = omeosg.ORGANIZATION
    INNER JOIN [ax].RETAILPUBCATALOGPRODUCT pcp ON [pcp].CATALOG = [rpc].ORIGIN
    WHERE rpc.VALIDFROMDATETIME BETWEEN omeosg.VALIDFROM AND omeosg.VALIDTO  -- VALIDFROMDATETIME is in UTC
    GROUP BY rprct.ORIGINID, rpcio.[CATALOG], [pcp].PRODUCT, [rpc].VALIDFROM, [rpc].VALIDTO
)
GO
PRINT N'Altering [crt].[PUBCATALOGCHANNELVIEW]...';


GO

-- [Deprecated] This view is not used since AX 7 RTW.

ALTER VIEW [crt].[PUBCATALOGCHANNELVIEW] WITH SCHEMABINDING AS
(
    SELECT
        rprct.ORIGINID AS CHANNEL,
        rpcio.CATALOG,
        COUNT_BIG(*) AS ANCESTORCOUNT
    FROM ax.RETAILPUBCATALOGINTERNALORG rpcio
    JOIN ax.RETAILPUBCATALOG rpc ON rpc.ORIGIN = rpcio.CATALOG
    JOIN ax.RETAILINTERNALORGANIZATION rio ON rio.RECID = rpcio.INTERNALORGANIZATION
    JOIN ax.OMEXPLODEDORGANIZATIONSECURITYGRAPH omeosg ON omeosg.ANCESTORORGANIZATION = rio.INTERNALORGANIZATION
    JOIN ax.OMHIERARCHYPURPOSE omhp ON omhp.HIERARCHYTYPE = omeosg.OMHIERARCHYTYPE AND omhp.HIERARCHYPURPOSE = 9 /* RetailAssortment */ AND omhp.ISDEFAULT = 1
    JOIN ax.RETAILPUBRETAILCHANNELTABLE rprct ON rprct.OMOPERATINGUNITID = omeosg.ORGANIZATION
    WHERE rpc.VALIDFROMDATETIME BETWEEN omeosg.VALIDFROM AND omeosg.VALIDTO -- VALIDFROMDATETIME is in UTC
    GROUP BY rprct.ORIGINID, rpcio.CATALOG
)
GO
PRINT N'Refreshing [crt].[GETCATALOGCHANNELPRODUCTCATEGORY]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[GETCATALOGCHANNELPRODUCTCATEGORY]';


GO
PRINT N'Refreshing [crt].[GETPUBCATALOG]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[GETPUBCATALOG]';


GO
PRINT N'Refreshing [crt].[GETPUBCATALOGCURRENT]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[GETPUBCATALOGCURRENT]';


GO
PRINT N'Refreshing [crt].[GETPRODUCTCATEGORIES]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[GETPRODUCTCATEGORIES]';


GO
PRINT N'Refreshing [crt].[GETCATALOGCHANNELPRODUCTRELATION]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[GETCATALOGCHANNELPRODUCTRELATION]';


GO
PRINT N'Refreshing [crt].[GETCATALOGCHANNELPRODUCTRELATIONEXCLUSION]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[GETCATALOGCHANNELPRODUCTRELATIONEXCLUSION]';


GO
PRINT N'Refreshing [crt].[GETPRODUCTCATEGORY]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[GETPRODUCTCATEGORY]';


GO
PRINT N'Refreshing [crt].[GETPRODUCTRELATIONS]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[GETPRODUCTRELATIONS]';


GO
PRINT N'Refreshing [crt].[GETPRODUCTATTRIBUTESCHEMAS]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[GETPRODUCTATTRIBUTESCHEMAS]';


GO
PRINT N'Altering [crt].[PUBPRODUCTATTRIBUTECHANNELMETADATAVIEW]...';


GO

ALTER VIEW [crt].[PUBPRODUCTATTRIBUTECHANNELMETADATAVIEW] AS
(
    SELECT
        rppacm.HOSTCHANNEL AS CHANNEL,
        rppacm.ATTRIBUTE,
        rppacm.ATTRIBUTE AS ACTUALATTRIBUTE,
        0 AS ISREFERENCE
        FROM ax.RETAILPUBPRODUCTATTRIBUTECHANNELMETADATA rppacm

    UNION ALL

    SELECT
        rppacm.HOSTCHANNEL AS CHANNEL,
        rav.ATTRIBUTE,
        rav.REFERENCEDATTRIBUTE AS ACTUALATTRIBUTE,
        1 AS ISREFERENCE
        FROM ax.RETAILPUBPRODUCTATTRIBUTECHANNELMETADATA rppacm
            JOIN crt.REFERENCEATTRIBUTEVIEW rav WITH (NOEXPAND)
                ON rav.ATTRIBUTE = rppacm.ATTRIBUTE
)
GO
PRINT N'Refreshing [crt].[ATTRIBUTEDEFAULTVALUEVIEW]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[ATTRIBUTEDEFAULTVALUEVIEW]';


GO
PRINT N'Refreshing [crt].[CHANNELPRODUCTATTRIBUTEGROUPDEFAULTVALUEVIEW]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[CHANNELPRODUCTATTRIBUTEGROUPDEFAULTVALUEVIEW]';


GO
PRINT N'Refreshing [crt].[DEFAULTPRODUCTATTRIBUTEGROUPDEFAULTVALUEVIEW]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[DEFAULTPRODUCTATTRIBUTEGROUPDEFAULTVALUEVIEW]';


GO
PRINT N'Refreshing [crt].[GETPUBPRODUCTATTRIBUTEVALUEEXPLODED]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[GETPUBPRODUCTATTRIBUTEVALUEEXPLODED]';


GO
PRINT N'Refreshing [crt].[PUBPRODUCTATTRIBUTEVALUEEXPLODEDVIEW]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[PUBPRODUCTATTRIBUTEVALUEEXPLODEDVIEW]';


GO
PRINT N'Refreshing [crt].[GLOBALPRODUCTATTRIBUTEVALUEVIEW]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[GLOBALPRODUCTATTRIBUTEVALUEVIEW]';


GO
PRINT N'Altering [crt].[RETAILSTOCKCOUNTJOURNALSVIEW]...';


GO

ALTER VIEW [crt].[RETAILSTOCKCOUNTJOURNALSVIEW] AS
(
    SELECT
        scj.[RECID],
        scj.[JOURNALID],
        scj.[DESCRIPTION]
    FROM [crt].RETAILSTOCKCOUNTJOURNALS scj
)
GO
PRINT N'Altering [crt].[RETAILSTOCKCOUNTVIEW]...';


GO

ALTER VIEW [crt].[RETAILSTOCKCOUNTVIEW] AS
(
    SELECT
        DISTINCT (rsc.ID),
        rsc.ITEMID,
        rsc.JOURNALID,
        rsc.RECID,
        rsc.TRACKINGGUID,
        rsc.COUNTED,
        rsc.QUANTITY,
        rsc.UNIT,
        rsc.USERID,
        rsc.TERMINALID,
        rsc.COUNTDATE,
        rsc.STATUS,
        rsc.OPERATIONTYPE,
        rsc.ITEMNAME,
        rsc.INVENTSIZEID,
        rsc.INVENTCOLORID,
        rsc.INVENTSTYLEID,
        rsc.CONFIGID
    FROM [crt].RETAILSTOCKCOUNT rsc
    LEFT OUTER JOIN [ax].INVENTTABLE it ON rsc.ITEMID = it.ITEMID
    LEFT OUTER JOIN [ax].ECORESCOLOR ON ECORESCOLOR.NAME = rsc.INVENTCOLORID
    LEFT OUTER JOIN [ax].ECORESPRODUCTMASTERCOLOR ON (ECORESPRODUCTMASTERCOLOR.COLOR = ECORESCOLOR.RECID) AND (ECORESPRODUCTMASTERCOLOR.COLORPRODUCTMASTER = it.PRODUCT)
    LEFT OUTER JOIN [ax].ECORESSIZE ON ECORESSIZE.NAME = rsc.INVENTSIZEID
    LEFT OUTER JOIN [ax].ECORESPRODUCTMASTERSIZE ON (ECORESPRODUCTMASTERSIZE.SIZE = ECORESSIZE.RECID) AND (ECORESPRODUCTMASTERSIZE.SIZEPRODUCTMASTER = it.PRODUCT)
    LEFT OUTER JOIN [ax].ECORESSTYLE ON (ECORESSTYLE.NAME = rsc.INVENTSTYLEID)
    LEFT OUTER JOIN [ax].ECORESPRODUCTMASTERSTYLE ON (ECORESPRODUCTMASTERSTYLE.STYLE = ECORESSTYLE.RECID) AND (ECORESPRODUCTMASTERSTYLE.STYLEPRODUCTMASTER = it.PRODUCT)
    LEFT OUTER JOIN [ax].ECORESCONFIGURATION ON (ECORESCONFIGURATION.NAME = rsc.CONFIGID)
    LEFT OUTER JOIN [ax].ECORESPRODUCTMASTERCONFIGURATION ON (ECORESPRODUCTMASTERCONFIGURATION.CONFIGURATION = ECORESCONFIGURATION.RECID) AND (ECORESPRODUCTMASTERCONFIGURATION.CONFIGPRODUCTMASTER = it.PRODUCT)
)
GO
PRINT N'Altering [crt].[RETAILTRANSACTIONAFFILIATIONTRANSVIEW]...';


GO

/******* ******* ******* ******* ******* ******* ******* ******* ******* ******* *******
    [crt].[RETAILTRANSACTIONAFFILIATIONTRANSVIEW] creates a view 
    about retail transaction affiliation.
******* ******* ******* ******* ******* ******* ******* ******* ******* ******* *******/

ALTER VIEW [crt].[RETAILTRANSACTIONAFFILIATIONTRANSVIEW] AS
(
    SELECT
      RTAT.AFFILIATION,
      RTAT.LOYALTYTIER,
      RTAT.TRANSACTIONID,
      RTAT.TERMINALID,
      RTAT.RECEIPTID,
      RTAT.STAFFID,
      RTAT.DATAAREAID,
      RTAT.CHANNEL,
	  RA.AFFILIATIONTYPE
    FROM [ax].RETAILTRANSACTIONAFFILIATIONTRANS RTAT
	INNER JOIN [ax].RETAILAFFILIATION RA
	ON RA.RECID = RTAT.AFFILIATION
)
GO
PRINT N'Altering [crt].[RETAILTRANSACTIONPAYMENTTRANSVIEW]...';


GO

ALTER VIEW [crt].[RETAILTRANSACTIONPAYMENTTRANSVIEW] AS
(
    SELECT
        RPT.[AMOUNTCUR] AS [AMOUNTINTENDEREDCURRENCY]
        ,RPT.[AMOUNTMST] AS [AMOUNTINCOMPANYCURRENCY]
        ,RPT.[AMOUNTTENDERED] AS [AMOUNTINSTORECURRENCY]
        ,RPT.[CARDORACCOUNT]
        ,RPT.[CARDTYPEID]
        ,RPT.[CHANGELINE] AS [ISCHANGELINE]
        ,RPT.[CREDITVOUCHERID] AS [CREDITMEMOID]
        ,RPT.[CURRENCY]
        ,RPT.[EXCHRATE]/100.00 AS [EXCHANGERATE]  --ePOS behaviour
        ,RPT.[EXCHRATEMST]/100.00 AS [COMPANYCURRENCYEXCHANGERATE] --ePOS behaviour
        ,RPT.[GIFTCARDID]
        ,RPT.[ISPREPAYMENT]
        ,RPT.[LINENUM]
        ,RPT.[LOYALTYCARDID]
        ,RPT.[PAYMENTAUTHORIZATION]
        ,RPT.[SIGCAPDATA] AS [SIGNATUREDATA]
        ,RPT.[TENDERTYPE] AS [TENDERTYPEID]
        ,RPT.[TRANSACTIONID]
        ,CASE RPT.[TRANSACTIONSTATUS] WHEN 0 THEN 4 ELSE 3 END AS [STATUS] -- if (TransactionStatus == TransactionStatus.Normal)  Status = TenderLineStatus.Comitted  else  Status = TenderLineStatus.Voided 
        ,RPT.[CREATEDDATETIME]
        ,RPT.[MODIFIEDDATETIME]
        ,RPT.[DATAAREAID]
        ,DATEADD(SECOND, RPT.[TRANSTIME], CAST(RPT.[TRANSDATE] as DATETIME)) AS 'TENDERDATE'
    FROM [ax].[RETAILTRANSACTIONPAYMENTTRANS] RPT
)
GO
PRINT N'Altering [crt].[RETAILTRANSACTIONSALESTRANSVIEW]...';


GO

ALTER VIEW [crt].[RETAILTRANSACTIONSALESTRANSVIEW] AS
(
    SELECT
        ST.TRANSACTIONID AS 'TRANSACTIONID'
        ,ST.LINENUM AS 'LINENUM'
        ,ST.ITEMID AS 'ITEMID'
        ,ST.BARCODE AS 'BARCODE'
        ,ST.INVENTSERIALID
        ,(ST.QTY * -1.0) AS 'QUANTITY'
        ,ST.PRICE AS 'PRICE'
        ,ST.UNIT AS 'UNITOFMEASURESYMBOL'
        ,(ST.NETAMOUNT * -1.0) AS 'NETAMOUNT'
        ,(ST.NETAMOUNTINCLTAX * -1.0) AS 'NETAMOUNTINCLTAX'
        ,ST.TAXITEMGROUP AS 'ITEMTAXGROUPID'
        ,ST.TAXGROUP AS 'SALESTAXGROUPID'
        ,(ST.TAXAMOUNT * -1.0) AS 'TAXAMOUNT'
        ,ST.DLVMODE AS 'DELIVERYMODE'
        ,IDC.INVENTDIMID AS 'INVENTORYDIMENSIONID'
        ,ST.INVENTLOCATIONID AS 'INVENTLOCATIONID'
        ,ST.LOGISTICSPOSTALADDRESS AS 'LOGISTICSPOSTALADDRESS'
        ,ST.FULFILLMENTSTOREID AS 'FULFILLMENTSTOREID'
        ,(ST.RETURNQTY * -1.0) AS 'RETURNQTY'
        ,ST.RETURNNOSALE AS 'RETURNNOSALE'
        ,ST.RETURNTRANSACTIONID AS 'RETURNTRANSACTIONID'
        ,ST.RETURNLINENUM AS 'RETURNLINENUM'
        ,ST.RETURNSTORE AS 'RETURNSTORE'
        ,ST.RETURNTERMINALID AS 'RETURNTERMINALID'
        ,ST.DISCAMOUNT AS 'DISCOUNTAMOUNT'
        ,ST.TOTALDISCAMOUNT AS 'TOTALDISCOUNTAMOUNT'
        ,ST.TOTALDISCPCT AS 'TOTALDISCOUNTPERCENTAGE'
        ,ST.LINEDSCAMOUNT AS 'LINEDISCOUNTAMOUNT'
        ,ST.GIFTCARD AS 'GIFTCARD'
        ,ST.COMMENT AS 'COMMENT'
        ,ST.ORIGINALPRICE AS 'ORIGINALPRICE'
        ,ST.PERIODICDISCAMOUNT AS 'PERIODICDISCOUNTAMOUNT'
        ,ST.PERIODICPERCENTAGEDISCOUNT 
        ,ST.LINEMANUALDISCOUNTAMOUNT
        ,ST.LINEMANUALDISCOUNTPERCENTAGE
        ,ST.RECEIPTDATEREQUESTED AS 'REQUESTEDDELIVERYDATE'           
        ,ST.ELECTRONICDELIVERYEMAIL
        ,COALESCE(CAST(NULLIF(ST.LISTINGID, '') AS BIGINT), IDC.DISTINCTPRODUCTVARIANT, IT.PRODUCT, 0)  AS 'LISTINGID'
        ,ST.TRANSACTIONSTATUS as 'TRANSACTIONSTATUS'
        ,DATEADD(ss, ST.TRANSTIME, CAST(ST.TRANSDATE as DATETIME)) as 'SALESDATETIME'
    FROM [ax].RETAILTRANSACTIONSALESTRANS ST
    LEFT OUTER JOIN [ax].INVENTTABLE IT ON ST.LISTINGID = '' AND IT.DATAAREAID = ST.DATAAREAID AND ST.VARIANTID = '' AND IT.ITEMID = ST.ITEMID
    LEFT OUTER JOIN [ax].INVENTDIMCOMBINATION IDC ON ST.ITEMID = IDC.ITEMID AND ST.VARIANTID <> '' AND ST.VARIANTID = IDC.RETAILVARIANTID AND ST.DATAAREAID = IDC.DATAAREAID
)
GO
PRINT N'Altering [crt].[RETAILTRANSACTIONTAXTRANSVIEW]...';


GO

ALTER VIEW [crt].[RETAILTRANSACTIONTAXTRANSVIEW] AS
(
    SELECT
        rttt.[AMOUNT] AS [TAXAMOUNT],
        rttt.[DATAAREAID],
        CAST(rttt.[ISINCLUDEDINPRICE] AS BIT) AS [ISINCLUDEDINPRICE],
        rttt.[TERMINALID],
        rttt.[TRANSACTIONID],
        rttt.[STOREID],
        rttt.[SALELINENUM],
        rttt.[TAXCODE]
    FROM [ax].RETAILTRANSACTIONTAXTRANS rttt
)
GO
PRINT N'Altering [crt].[SALESTAXOVERRIDESVIEW]...';


GO

ALTER VIEW [crt].[SALESTAXOVERRIDESVIEW] AS
(
    SELECT
        T.[CODE],
        T.[OVERRIDEBY],
        CASE
            WHEN T.[OVERRIDETYPE] = 0
            THEN T.[SOURCEITEMTAXGROUP]
            ELSE T.[SOURCETAXGROUP]
            END
        AS SOURCETAXGROUP,
        CASE
            WHEN T.[OVERRIDETYPE] = 0
            THEN T.[DESTINATIONITEMTAXGROUP]
            ELSE T.[DESTINATIONTAXGROUP]
            END
        AS [DESTINATIONTAXGROUP],
        T.[STOREORIGINID] AS CHANNELID
    FROM (
        SELECT
            STO.[CODE],
            STO.[DESCRIPTION],
            STO.[SOURCETAXGROUP],
            STO.[DESTINATIONTAXGROUP],
            STO.[SOURCEITEMTAXGROUP],
            STO.[DESTINATIONITEMTAXGROUP],
            STO.[OVERRIDETYPE],
            STO.[OVERRIDEBY],
            RPRST.[STOREORIGINID]
        FROM [ax].RETAILSALESTAXOVERRIDE STO
        INNER JOIN [ax].RETAILSALESTAXOVERRIDEGROUPMEMBER GM ON STO.[CODE] = GM.[RBOSALESTAXOVERRIDECODE]
        INNER JOIN [ax].RETAILSALESTAXOVERRIDEGROUP ROG ON ROG.[CODE] = GM.[RBOSALESTAXOVERRIDEGROUPCODE]
        INNER JOIN [ax].RETAILPUBRETAILSTORETABLE RPRST ON RPRST.[TAXOVERRIDEGROUP] = ROG.[RECID]
    ) T
)
GO
PRINT N'Altering [crt].[SHIFTSVIEW]...';


GO

ALTER VIEW [crt].[SHIFTSVIEW] AS
(
    SELECT
        SHIFT.SHIFTID,
        SHIFT.CASHDRAWER,
        SHIFT.CHANNEL,
        USEDSHIFT.TERMINALID AS [CURRENTTERMINALID],
        NULL AS [CLOSEDATE],
        NULL AS [CLOSEDATETIMEUTC],
		NULL AS [CLOSEDATTERMINAL],
        0 AS [CUSTOMERSCOUNT],
        0.0 AS [DISCOUNTTOTAL],
        0 AS [LOGONSCOUNT],
        0 AS [NOSALECOUNT],
        0.0 AS [PAIDTOACCOUNTTOTAL],
        0.0 AS [RETURNSTOTAL],
        0.0 AS [ROUNDEDAMOUNTTOTAL],
        0 AS [SALESCOUNT],
        0.0 AS [SALESTOTAL],
        SHIFT.STAFFID,
        USEDSHIFT.STAFFID AS [CURRENTSTAFFID],
        SHIFT.STARTDATETIMEUTC,
        SHIFT.[STATUS],
        SHIFT.STATUSDATETIMEUTC,
        STORE.STORENUMBER AS STOREID,
        0.0 AS [TAXTOTAL],
        SHIFT.TERMINALID,
        0 AS [TRANSACTIONSCOUNT],
        0 AS [VOIDSCOUNT],
		SHIFT.ISSHARED,
        SHIFT.[DATAAREAID],
        SHIFT.[ROWVERSION]
    FROM [crt].RETAILSHIFTSTAGINGTABLE SHIFT
    INNER JOIN [ax].RETAILPUBRETAILSTORETABLE STORE ON SHIFT.CHANNEL = STORE.STOREORIGINID
    LEFT JOIN [crt].RETAILSHIFTUSERSSTAGINGTABLE USEDSHIFT
        ON SHIFT.CHANNEL = USEDSHIFT.CHANNEL AND
        SHIFT.SHIFTID = USEDSHIFT.SHIFTID AND
        SHIFT.TERMINALID = USEDSHIFT.ORIGINALTERMINALID

    UNION

    SELECT
        SHIFT.[BATCHID] AS SHIFTID,
        '' AS [CASHDRAWER],
        SHIFT.[CHANNEL],
        '' AS CURRENTTERMINALID,
        SHIFT.[CLOSEDATE],
        SHIFT.[CLOSEDATETIMEUTC],
		SHIFT.[CLOSEDATTERMINAL],
        SHIFT.[CUSTOMERSCOUNT],
        SHIFT.[DISCOUNTTOTAL],
        SHIFT.[LOGONSCOUNT],
        SHIFT.[NOSALECOUNT],
        SHIFT.[PAIDTOACCOUNTTOTAL],
        SHIFT.[RETURNSTOTAL],
        SHIFT.[ROUNDEDAMOUNTTOTAL],
        SHIFT.[SALESCOUNT],
        SHIFT.[SALESTOTAL],
        SHIFT.[STAFFID],
        '' AS [CURRENTSTAFFID],
        SHIFT.[STARTDATETIMEUTC],
        SHIFT.[STATUS],
        NULL AS [STATUSDATETIMEUTC],
        SHIFT.[STOREID],
        SHIFT.[TAXTOTAL],
        SHIFT.[TERMINALID],
        SHIFT.[TRANSACTIONSCOUNT],
        SHIFT.[VOIDSCOUNT],
		0 AS [ISSHARED],
        SHIFT.[DATAAREAID],
        SHIFT.[ROWVERSION]
    FROM [ax].RETAILPOSBATCHTABLE SHIFT
)
GO
PRINT N'Altering [crt].[STORECASHDECLARATIONVIEW]...';


GO

ALTER VIEW [crt].[STORECASHDECLARATIONVIEW] AS
(
    SELECT
        rpst.[STOREORIGINID] AS CHANNELID,
        rscdt.[RECID],
        rscdt.[TYPE],
        rscdt.[CURRENCY],
        rscdt.[AMOUNT]
    FROM [ax].RETAILSTORECASHDECLARATIONTABLE rscdt
	INNER JOIN [ax].RETAILPUBRETAILSTORETABLE rpst
	ON rscdt.STOREID = rpst.STORENUMBER
)
GO
PRINT N'Altering [crt].[STORESBYEMPLOYEEVIEW]...';


GO

ALTER VIEW [crt].[STORESBYEMPLOYEEVIEW] AS
(
    SELECT DISTINCT rst.STORENUMBER,
        dpt.NAME AS 'STORENAME',
        pav.ADDRESS AS 'STOREADDRESS',
        hw.PERSONNELNUMBER,
        omu.OMOPERATINGUNITNUMBER
    FROM [ax].[DIRADDRESSBOOKPARTY] dabp
        INNER JOIN [ax].[HCMWORKER] hw ON dabp.PARTY = hw.PERSON
        INNER JOIN [ax].[RETAILSTOREADDRESSBOOK] rsab on dabp.ADDRESSBOOK = rsab.ADDRESSBOOK
        INNER JOIN [ax].[RETAILSTORETABLE] rst ON rsab.STORERECID = rst.RECID
        INNER JOIN [ax].[RETAILCHANNELTABLE] rct ON rst.RECID = rct.RECID
        INNER JOIN [ax].[DIRPARTYTABLE] dpt ON rct.OMOPERATINGUNITID = dpt.RECID
        INNER JOIN [ax].[OMOPERATINGUNIT] omu ON rct.OMOPERATINGUNITID = omu.RECID
        LEFT OUTER JOIN [crt].[POSTALADDRESSESVIEW] pav ON (rct.OMOPERATINGUNITID = pav.PARTY AND pav.ISPRIMARY = 1)
    WHERE rsab.ADDRESSBOOKTYPE = 1 
)
GO
PRINT N'Altering [crt].[STOREVIEW]...';


GO

ALTER VIEW [crt].[STOREVIEW] AS
(
	SELECT 
		rct.RECID,
		rct.RECID AS 'CHANNELID',
		rct.CHANNELTYPE,
		rct.INVENTLOCATIONDATAAREAID AS 'DATAAREAID',
		rprct.CATEGORYHIERARCHY,
		rct.EVENTNOTIFICATIONPROFILEID,
		rst.STORENUMBER,
		dp.NAME AS STORENAME,
		rst.TAXGROUP,
		rst.FUNCTIONALITYPROFILE,
		rst.USECUSTOMERBASEDTAX,
		rst.USEDESTINATIONBASEDTAX,
		rct.DEFAULTCUSTACCOUNT,
		rct.CURRENCY,
		rct.INVENTLOCATION,		
		rst.INVENTLOCATIONIDFORCUSTOMERORDER as SHIPPINGINVENTLOCATION,
		rst.OPENFROM,
		rst.OPENTO,
		lpa.RECID AS 'POSTALADDRESSRECID',
		lpa.ADDRESS AS 'STOREADDRESS',
		lpa.BUILDINGCOMPLIMENT,
		lpa.CITY,
		lpa.CITYRECID,
		lpa.COUNTRYREGIONID, -- Three letters country / region code.
		lacr.ISOCODE, -- Two letters country / region code.
		lpa.COUNTY,
		lac.NAME AS COUNTYNAME,
		lpa.DISTRICT,
		lpa.DISTRICTNAME,
		lpa.ISPRIVATE,
		lpa.LATITUDE,
		lpa.LOCATION,
		lpa.LONGITUDE,
		lpa.POSTBOX,
		lpa.STATE,
		las.NAME AS STATENAME,
		lpa.STREET,
		lpa.STREETNUMBER,
		lpa.ZIPCODE,
		lpa.ZIPCODERECID,
		lpa.MODIFIEDDATETIME,
		il.INVENTSITEID,
		rfp.RETAILRECEIPTPROFILE AS EMAILRECEIPTPROFILEID,
		(CASE WHEN rprct.RECID IS NULL THEN 0 ELSE 1 END) AS 'ISPUBLISHED'
		
	FROM [ax].RETAILCHANNELTABLE rct	
	INNER JOIN [ax].RETAILSTORETABLE rst ON rct.RECID = rst.RECID
	LEFT OUTER JOIN [ax].RETAILPUBRETAILCHANNELTABLE rprct ON rprct.ORIGINID = rct.RECID
	LEFT OUTER JOIN [ax].DIRPARTYTABLE dp ON dp.RECID = rct.OMOPERATINGUNITID
	LEFT OUTER JOIN [ax].RETAILFUNCTIONALITYPROFILE rfp ON rfp.PROFILEID = rst.FUNCTIONALITYPROFILE
	-- ADDRESS INFORMATION
	LEFT OUTER JOIN [ax].DIRPARTYLOCATION AS dpl ON dpl.PARTY = dp.RECID AND dpl.ISPRIMARY = 1
	LEFT OUTER JOIN [ax].INVENTLOCATION AS il ON rprct.INVENTLOCATION = il.INVENTLOCATIONID and rprct.INVENTLOCATIONDATAAREAID = il.DATAAREAID
	LEFT OUTER JOIN [ax].LOGISTICSPOSTALADDRESS AS lpa ON 
						lpa.LOCATION = dpl.LOCATION 
						AND lpa.ISPRIVATE = 0 
						AND GETUTCDATE() BETWEEN VALIDFROM AND VALIDTO
    LEFT OUTER JOIN [ax].LOGISTICSADDRESSCOUNTRYREGION AS lacr ON lpa.COUNTRYREGIONID = lacr.COUNTRYREGIONID
	--state name
	LEFT OUTER JOIN [ax].LOGISTICSADDRESSSTATE las on lpa.COUNTRYREGIONID = las.COUNTRYREGIONID
	            and lpa.STATE = las.STATEID
	--county name
	LEFT OUTER JOIN [ax].LOGISTICSADDRESSCOUNTY lac on lpa.COUNTRYREGIONID = lac.COUNTRYREGIONID
	            and lpa.STATE = lac.STATEID
				and lpa.COUNTY = lac.COUNTYID
)
GO
PRINT N'Creating [crt].[GETLINKEDPRODUCTRELATIONS_V2]...';


GO
CREATE FUNCTION [crt].[GETLINKEDPRODUCTRELATIONS_V2]
(
    @bi_ChannelId            BIGINT,
    @dt_ChannelDate          DATETIME,
    @tvp_ProductIds          [crt].RECORDIDTABLETYPE READONLY,
    @nvc_DataAreaId          NVARCHAR(10)
)
RETURNS TABLE
RETURN    
    -- Get the ITEMID for the values inside @tvp_ProductIds
    WITH INPUTITEMIDS AS
    (
        -- master and standalones
        SELECT
            [ids].RECID AS PRODUCTID,
            [it].ITEMID
        FROM @tvp_ProductIds ids
            INNER JOIN [ax].INVENTTABLE it ON [it].PRODUCT = [ids].RECID  AND [it].DATAAREAID = @nvc_DataAreaId           

        UNION ALL
        
        -- variants
        SELECT
            [ids].RECID AS PRODUCTID,
            [idc].ITEMID
        FROM @tvp_ProductIds ids
            INNER JOIN [ax].INVENTDIMCOMBINATION idc ON [idc].DISTINCTPRODUCTVARIANT = [ids].RECID  AND [idc].DATAAREAID = @nvc_DataAreaId
    ),

    -- Join INPUTITEMIDS and RETAILINVENTLINKEDITEM to get the linked products for the input requested
    LINKEDPRODUCTS AS
    (
        SELECT
            [i].PRODUCTID,
            [l_it].PRODUCT AS LINKEDPRODUCTID,  -- productid of the linked product
            [rili].QTY AS QUANTITY,
            [rili].UNIT AS UNITOFMEASURE
        FROM INPUTITEMIDS [i]
            INNER JOIN [ax].RETAILINVENTLINKEDITEM [rili] ON [rili].ITEMID = [i].ITEMID AND [rili].DATAAREAID = @nvc_DataAreaId
                INNER JOIN [ax].INVENTTABLE l_it ON [l_it].ITEMID = [rili].LINKEDITEMID AND [l_it].DATAAREAID = [rili].DATAAREAID
    )

    -- filter LINKEDPRODUCTS by remote and local assortments
    SELECT
        0 AS ISREMOTE,
        [lp].LINKEDPRODUCTID,
        [lp].PRODUCTID,
        [lp].QUANTITY,
        [lp].UNITOFMEASURE
    FROM LINKEDPRODUCTS lp
    WHERE
        EXISTS
        (
            SELECT * FROM [crt].ASSORTEDPRODUCTSVIEW ap
            WHERE
                [ap].ISREMOTE = 0
                AND [ap].PRODUCTID = [lp].PRODUCTID
                AND [ap].CHANNELID = @bi_ChannelId
                AND @dt_ChannelDate BETWEEN [ap].VALIDFROM AND [ap].VALIDTO
        )

    UNION ALL

    SELECT
        1 AS ISREMOTE,
        [lp].LINKEDPRODUCTID,
        [lp].PRODUCTID,
        [lp].QUANTITY,
        [lp].UNITOFMEASURE
    FROM LINKEDPRODUCTS lp
    WHERE
        EXISTS
        (
            SELECT * FROM [crt].ASSORTEDPRODUCTSVIEW ap
            WHERE
                [ap].ISREMOTE = 1
                AND [ap].PRODUCTID = [lp].PRODUCTID
                AND [ap].CHANNELID = @bi_ChannelId
                AND @dt_ChannelDate BETWEEN [ap].VALIDFROM AND [ap].VALIDTO
        )
GO
PRINT N'Creating [crt].[GETPRODUCTATTRIBUTESCONTAININGVALUES]...';


GO
CREATE FUNCTION [crt].[GETPRODUCTATTRIBUTESCONTAININGVALUES]
(
    @bi_ChannelId               BIGINT,
    @bi_CatalogId               BIGINT,
    @dt_ChannelDate             DATE,
    @tvp_ProductIds             [crt].[RECORDIDTABLETYPE] READONLY,
    @tvp_DummyId                [crt].[RECORDIDTABLETYPE] READONLY  -- A single row of ID 0
)
RETURNS TABLE
RETURN
	-- Global product attributes
	SELECT
		gpavv.ATTRIBUTE
	FROM [crt].GLOBALPRODUCTATTRIBUTEVALUEVIEW gpavv
    WHERE gpavv.CHANNEL = @bi_ChannelId
	
	UNION ALL

	-- Live product attributes
	SELECT
		cpav.ATTRIBUTE
    FROM [crt].GETPRODUCTCATEGORY(@bi_ChannelId, @bi_CatalogId, @dt_ChannelDate, 1 /* @b_ProductIdsPassed */, @tvp_ProductIds, @tvp_DummyId) pc
	INNER JOIN [crt].CATEGORYPRODUCTATTRIBUTEVIEW cpav ON cpav.CATEGORY = pc.CATEGORY

	UNION ALL

	-- Published product attributes
	SELECT
		ppacmv.ATTRIBUTE
    FROM ax.RETAILPUBPRODUCTATTRIBUTEVALUE rppav
	JOIN @tvp_ProductIds as ids ON ids.RECID = rppav.PRODUCT
    JOIN crt.PUBPRODUCTATTRIBUTECHANNELMETADATAVIEW ppacmv ON ppacmv.ACTUALATTRIBUTE = rppav.ATTRIBUTE
	WHERE ppacmv.CHANNEL = @bi_ChannelId
GO
PRINT N'Creating [crt].[GETPRODUCTIDSBYCATEGORYID]...';


GO

CREATE FUNCTION [crt].[GETPRODUCTIDSBYCATEGORYID]
(
    @bi_ChannelId            BIGINT,
    @bi_CatalogId            BIGINT,
    @dt_ChannelDate          DATETIME,
    @bi_CategoryId           BIGINT
)
RETURNS TABLE
RETURN
    -- Retrieving products associated to a category and sub-categories, when catalog is not specified.
    SELECT
        [erpc].PRODUCT AS PRODUCTID
    FROM [ax].RETAILPUBECORESCATEGORY parent
        INNER JOIN [ax].RETAILPUBECORESCATEGORY child ON [child].CHANNEL = [parent].CHANNEL AND [child].NESTEDSETLEFT BETWEEN [parent].NESTEDSETLEFT AND [parent].NESTEDSETRIGHT
            INNER JOIN [ax].ECORESPRODUCTCATEGORY erpc ON [child].ORIGINID = [erpc].CATEGORY
    WHERE [parent].ORIGINID = @bi_CategoryId AND [parent].CHANNEL = @bi_ChannelId AND @bi_CatalogId = 0
    AND EXISTS
        (
            SELECT 1 FROM [crt].ASSORTEDPRODUCTSVIEW apv
            WHERE [apv].PRODUCTID = [erpc].PRODUCT AND [apv].CHANNELID = @bi_ChannelId AND @dt_ChannelDate BETWEEN [apv].VALIDFROM AND [apv].VALIDTO AND [apv].ISREMOTE = 0  -- Search is only supported in locally available channels
        )

    UNION ALL

    (
        -- Retrieving non-variant products in the context of a catalog from the default channel navigation hierarchy.
        SELECT
            [rpcp_nonvariants].PRODUCT AS PRODUCTID
        FROM [ax].RETAILPUBECORESCATEGORY parent
            INNER JOIN [ax].RETAILPUBECORESCATEGORY child ON [child].CHANNEL = [parent].CHANNEL AND [child].NESTEDSETLEFT BETWEEN [parent].NESTEDSETLEFT AND [parent].NESTEDSETRIGHT
                INNER JOIN [ax].ECORESPRODUCTCATEGORY erpc ON [erpc].CATEGORY = [child].ORIGINID
                    INNER JOIN [ax].RETAILPUBCATALOGPRODUCT rpcp_nonvariants ON [rpcp_nonvariants].PRODUCT = [erpc].PRODUCT
        WHERE [parent].ORIGINID = @bi_CategoryId AND [parent].CHANNEL = @bi_ChannelId AND @bi_CatalogId != 0 AND [rpcp_nonvariants].[CATALOG] = @bi_CatalogId AND [rpcp_nonvariants].USEHIERARCHY = 1
        AND EXISTS
            (
                SELECT 1 FROM [crt].ASSORTEDPRODUCTSVIEW apv
                WHERE [apv].PRODUCTID = [rpcp_nonvariants].PRODUCT AND [apv].CHANNELID = @bi_ChannelId AND @dt_ChannelDate BETWEEN [apv].VALIDFROM AND [apv].VALIDTO AND [apv].ISREMOTE = 0  -- Search is only supported in locally available channels
            )
        AND EXISTS(
                SELECT 1
                FROM [ax].RETAILPUBCATALOG
                WHERE ORIGIN = @bi_CatalogId AND ENABLESNAPSHOT = 0  -- Snapshotted catalogs should not inherit category association from default channel navigation hierarchy.
            )

        UNION ALL

        -- Retrieving variant products in the context of a catalog from the default channel navigation hierarchy.
        SELECT
            [rpcp_variantmasters].PRODUCT AS PRODUCTID
        FROM [ax].RETAILPUBECORESCATEGORY parent
            INNER JOIN [ax].RETAILPUBECORESCATEGORY child ON [child].CHANNEL = [parent].CHANNEL AND [child].NESTEDSETLEFT BETWEEN [parent].NESTEDSETLEFT AND [parent].NESTEDSETRIGHT
                INNER JOIN [ax].ECORESPRODUCTCATEGORY erpc ON [erpc].CATEGORY = [child].ORIGINID
                    INNER JOIN [ax].ECORESDISTINCTPRODUCTVARIANT erdpv ON [erdpv].PRODUCTMASTER = [erpc].PRODUCT
                        INNER JOIN [ax].RETAILPUBCATALOGPRODUCT rpcp_variantmasters ON [rpcp_variantmasters].PRODUCT = [erdpv].RECID
        WHERE [parent].ORIGINID = @bi_CategoryId AND [parent].CHANNEL = @bi_ChannelId AND @bi_CatalogId != 0 AND [rpcp_variantmasters].[CATALOG] = @bi_CatalogId AND [rpcp_variantmasters].USEHIERARCHY = 1
        AND EXISTS
            (
                SELECT 1 FROM [crt].ASSORTEDPRODUCTSVIEW apv
                WHERE [apv].PRODUCTID = [rpcp_variantmasters].PRODUCT AND [apv].CHANNELID = @bi_ChannelId AND @dt_ChannelDate BETWEEN [apv].VALIDFROM AND [apv].VALIDTO AND [apv].ISREMOTE = 0  -- Search is only supported in locally available channels
            )
        AND EXISTS(
                SELECT 1
                FROM [ax].RETAILPUBCATALOG
                WHERE ORIGIN = @bi_CatalogId AND ENABLESNAPSHOT = 0  -- Snapshotted catalogs should not inherit category association from default channel navigation hierarchy.
            )
    )

    UNION  -- Performing UNION here (not UNION ALL) because if product(s) have been retrieved by implicit association, they should not retrieved by re-categorization.

    -- Retrieving products re-categorized (or have been added from a category) in the context of a catalog.
    SELECT
        [rpcp].PRODUCT AS PRODUCTID
    FROM [ax].RETAILPUBECORESCATEGORY parent
        INNER JOIN [ax].RETAILPUBECORESCATEGORY child ON [child].CHANNEL = [parent].CHANNEL AND [child].NESTEDSETLEFT BETWEEN [parent].NESTEDSETLEFT AND [parent].NESTEDSETRIGHT
             INNER JOIN [ax].RETAILPUBCATALOGPRODUCTCATEGORY rpcpc ON [rpcpc].CATEGORY = [child].ORIGINID
                INNER JOIN [ax].RETAILPUBCATALOGPRODUCT rpcp ON [rpcp].ORIGIN = [rpcpc].CATALOGPRODUCT
    WHERE [parent].ORIGINID = @bi_CategoryId AND [parent].CHANNEL = @bi_ChannelId AND [rpcp].[CATALOG] = @bi_CatalogId AND @bi_CatalogId != 0 AND [rpcpc].INCLUDEEXCLUDETYPE = 1  -- Include
    AND EXISTS
        (
            SELECT 1 FROM [crt].ASSORTEDPRODUCTSVIEW apv
            WHERE [apv].PRODUCTID = [rpcp].PRODUCT AND [apv].CHANNELID = @bi_ChannelId AND @dt_ChannelDate BETWEEN [apv].VALIDFROM AND [apv].VALIDTO AND [apv].ISREMOTE = 0  -- Search is only supported in locally available channels
        )
GO
PRINT N'Creating [crt].[GETPRODUCTIDSBYSEARCHTEXT]...';


GO

CREATE FUNCTION [crt].[GETPRODUCTIDSBYSEARCHTEXT]
(
    @bi_ChannelId               BIGINT,
    @bi_CatalogId               BIGINT,
    @dt_ChannelDate             DATE,
    @i_MaxTop                   INT,
    @nvc_Locale                 NVARCHAR(7),
    @nvc_SearchText             NVARCHAR(1000)  -- 1000 because the size of the biggest column being looked up is [ax].ECORESPRODUCTTRANSLATION.DESCRIPTION of type NVARCHAR(1000)
)
RETURNS TABLE
RETURN
SELECT PRODUCTID, SUM(RANKING) AS RANKING
FROM
(
    SELECT [it].PRODUCT AS PRODUCTID, [results_itemId].[RANK] AS RANKING
    FROM CONTAINSTABLE([ax].INVENTTABLE, [ITEMID], @nvc_SearchText, @i_MaxTop) results_itemId
    INNER JOIN [ax].INVENTTABLE it ON [it].RECID = [results_itemId].[KEY]

    UNION ALL
        
    SELECT [erpt].PRODUCT AS PRODUCTID, [results_name].[RANK] AS RANKING
    FROM FREETEXTTABLE([ax].ECORESPRODUCTTRANSLATION, [NAME], @nvc_SearchText, @i_MaxTop) results_name
    INNER JOIN [ax].ECORESPRODUCTTRANSLATION erpt ON [erpt].RECID = [results_name].[KEY]

    UNION ALL

    SELECT [erpt].PRODUCT AS PRODUCTID, [results_partialName].[RANK] AS RANKING
    FROM CONTAINSTABLE([ax].ECORESPRODUCTTRANSLATION, [NAME], @nvc_SearchText, @i_MaxTop) results_partialName
    INNER JOIN [ax].ECORESPRODUCTTRANSLATION erpt ON [erpt].RECID = [results_partialName].[KEY]

    UNION ALL
    
    SELECT [erpt].PRODUCT AS PRODUCTID, [results_description].[RANK] AS RANKING
    FROM FREETEXTTABLE([ax].ECORESPRODUCTTRANSLATION, [DESCRIPTION], @nvc_SearchText, @i_MaxTop) results_description
    INNER JOIN [ax].ECORESPRODUCTTRANSLATION erpt ON [erpt].RECID = [results_description].[KEY]

    UNION ALL

    SELECT [erpmc].COLORPRODUCTMASTER AS PRODUCTID, [results_translatedColor].[RANK] AS RANKING
    FROM FREETEXTTABLE([ax].ECORESPRODUCTMASTERDIMVALUETRANSLATION, NAME, @nvc_SearchText, @i_MaxTop) results_translatedColor
    INNER JOIN [ax].ECORESPRODUCTMASTERDIMVALUETRANSLATION erpmdvt ON [results_translatedColor].[KEY] = [erpmdvt].RECID
    INNER JOIN [ax].ECORESPRODUCTMASTERCOLOR erpmc ON [erpmc].RECID = [erpmdvt].PRODUCTMASTERDIMENSIONVALUE

    UNION ALL

    SELECT [erpmc].CONFIGPRODUCTMASTER AS PRODUCTID, [results_translatedConfiguration].[RANK] AS RANKING
    FROM FREETEXTTABLE([ax].ECORESPRODUCTMASTERDIMVALUETRANSLATION, NAME, @nvc_SearchText, @i_MaxTop) results_translatedConfiguration
    INNER JOIN [ax].ECORESPRODUCTMASTERDIMVALUETRANSLATION erpmdvt ON [results_translatedConfiguration].[KEY] = [erpmdvt].RECID
    INNER JOIN [ax].ECORESPRODUCTMASTERCONFIGURATION erpmc ON [erpmc].RECID = [erpmdvt].PRODUCTMASTERDIMENSIONVALUE

    UNION ALL

    SELECT [erpms].SIZEPRODUCTMASTER AS PRODUCTID, [results_translatedSize].[RANK] AS RANKING
    FROM FREETEXTTABLE([ax].ECORESPRODUCTMASTERDIMVALUETRANSLATION, NAME, @nvc_SearchText, @i_MaxTop) results_translatedSize
    INNER JOIN [ax].ECORESPRODUCTMASTERDIMVALUETRANSLATION erpmdvt ON [results_translatedSize].[KEY] = [erpmdvt].RECID
    INNER JOIN [ax].ECORESPRODUCTMASTERSIZE erpms ON [erpms].RECID = [erpmdvt].PRODUCTMASTERDIMENSIONVALUE

    UNION ALL

    SELECT [erpms].STYLEPRODUCTMASTER AS PRODUCTID, [results_translatedStyle].[RANK] AS RANKING
    FROM FREETEXTTABLE([ax].ECORESPRODUCTMASTERDIMVALUETRANSLATION, NAME, @nvc_SearchText, @i_MaxTop) results_translatedStyle
    INNER JOIN [ax].ECORESPRODUCTMASTERDIMVALUETRANSLATION erpmdvt ON [results_translatedStyle].[KEY] = [erpmdvt].RECID
    INNER JOIN [ax].ECORESPRODUCTMASTERSTYLE erpms ON [erpms].RECID = [erpmdvt].PRODUCTMASTERDIMENSIONVALUE

    UNION ALL

    SELECT [erpmc].COLORPRODUCTMASTER AS PRODUCTID, [results_color].[RANK] AS RANKING
    FROM FREETEXTTABLE([ax].ECORESCOLOR, NAME, @nvc_SearchText, @i_MaxTop) results_color
    INNER JOIN [ax].ECORESPRODUCTMASTERCOLOR erpmc ON [results_color].[KEY] = [erpmc].COLOR

    UNION ALL

    SELECT [erpmc].CONFIGPRODUCTMASTER AS PRODUCTID, [results_configuration].[RANK] AS RANKING
    FROM FREETEXTTABLE([ax].ECORESCONFIGURATION, NAME, @nvc_SearchText, @i_MaxTop) results_configuration
    INNER JOIN [ax].ECORESPRODUCTMASTERCONFIGURATION erpmc ON [results_configuration].[KEY] = [erpmc].CONFIGURATION

    UNION ALL

    SELECT [erpms].SIZEPRODUCTMASTER AS PRODUCTID, [results_size].[RANK] AS RANKING
    FROM FREETEXTTABLE([ax].ECORESSIZE, NAME, @nvc_SearchText, @i_MaxTop) results_size
    INNER JOIN [ax].ECORESPRODUCTMASTERSIZE erpms ON [results_size].[KEY] = [erpms].SIZE

    UNION ALL

    SELECT [erpms].STYLEPRODUCTMASTER AS PRODUCTID, [results_style].[RANK] AS RANKING
    FROM FREETEXTTABLE([ax].ECORESSTYLE, NAME, @nvc_SearchText, @i_MaxTop) results_style
    INNER JOIN [ax].ECORESPRODUCTMASTERSTYLE erpms ON [results_style].[KEY] = [erpms].STYLE
) results
WHERE EXISTS
        (
            SELECT 1 FROM [crt].LOCALPRODUCTASSORTMENTRULESVIEW par WITH (NOEXPAND)
            WHERE [par].VARIANTID = 0 AND [par].PRODUCTID = results.PRODUCTID AND [par].CHANNELID = @bi_ChannelId AND @dt_ChannelDate BETWEEN [par].VALIDFROM AND [par].VALIDTO --AND [apv].ISREMOTE = 0  -- Search is only supported in locally available channels
        )
        AND
        (
            @bi_CatalogId = 0 OR EXISTS
            (
                SELECT 1 FROM [crt].[PRODUCTCATALOGRULESVIEW] pcrv
                WHERE pcrv.CHANNELID = @bi_ChannelId AND pcrv.CATALOGID = @bi_CatalogId AND pcrv.PRODUCTID = results.PRODUCTID
            )
        )
GROUP BY [results].PRODUCTID
GO
PRINT N'Creating [crt].[GETPRODUCTSBYIDS_V2]...';


GO
CREATE FUNCTION [crt].[GETPRODUCTSBYIDS_V2]
(
    @bi_ChannelId            BIGINT,
    @dt_ChannelDate          DATE,
    @nvc_Locale              NVARCHAR(7),
    @tvp_ProductIds          [crt].RECORDIDTABLETYPE READONLY,
    @nvc_DefaultLocale       NVARCHAR(7),
    @nvc_DataAreaId          NVARCHAR(10)
)
RETURNS TABLE
RETURN
    -- basic filtering on assortment
    WITH ASSORTEDPRODUCTIDS AS
    (
        SELECT
            PRODUCTID,
            ISREMOTE
        FROM [crt].ASSORTEDPRODUCTSVIEW ap
        WHERE
            ap.CHANNELID = @bi_ChannelId
            AND @dt_ChannelDate BETWEEN ap.VALIDFROM AND ap.VALIDTO
    ),

    -- filter input records for locally and remotely assorted products
    ASSORTEDINPUT AS
    (
        SELECT
            input.RECID,
            CAST(0 AS BIT) AS ISREMOTE
        FROM @tvp_ProductIds input
        WHERE
            input.RECID IN (SELECT PRODUCTID FROM ASSORTEDPRODUCTIDS WHERE ISREMOTE = 0) -- filter is prefered over join as ASSORTEDPRODUCTIDS may have more than a record for each product/channel combination

        UNION ALL

        SELECT
            input.RECID,
            CAST(1 AS BIT) AS ISREMOTE
        FROM @tvp_ProductIds input
        WHERE
            input.RECID IN (SELECT PRODUCTID FROM ASSORTEDPRODUCTIDS WHERE ISREMOTE = 1)
    ),

    MASTERSTANDALONEDETAILS AS
    (
        SELECT
            erp.RECID,
            NULL                                                                                            AS MASTERPRODUCTID,
            it.ITEMID,
            itm.UNITID,
            COALESCE(NULLIF(erpt.DESCRIPTION, ''), erpt_default.DESCRIPTION, '')                            AS [DESCRIPTION],
            COALESCE(NULLIF(erpt.NAME, ''), NULLIF(erpt_default.NAME, ''), erp.DISPLAYPRODUCTNUMBER)        AS NAME,
                        
            CASE
                WHEN EXISTS (SELECT * FROM [ax].RETAILKIT rk WHERE [rk].PRODUCTMASTER = erp.RECID) THEN 1                       -- Kit Master                
                WHEN EXISTS (SELECT * FROM [ax].ECORESDISTINCTPRODUCTVARIANT dpv WHERE [dpv].PRODUCTMASTER = erp.RECID) THEN 3  -- Master
                ELSE 4                                                                                                          -- Standalone
            END                                                                                             AS PRODUCTTYPE

        FROM [ax].ECORESPRODUCT erp WITH (FORCESEEK)
            INNER JOIN [ax].INVENTTABLE it WITH (FORCESEEK) ON it.PRODUCT = erp.RECID    -- because we inner join with this table, this guarantees that all records in this select will be non-variants
            INNER JOIN [ax].INVENTTABLEMODULE itm WITH (FORCESEEK) ON itm.ITEMID = it.ITEMID
            LEFT OUTER JOIN [ax].ECORESPRODUCTTRANSLATION erpt_default WITH (FORCESEEK) ON erpt_default.PRODUCT = erp.RECID AND erpt_default.LANGUAGEID = @nvc_DefaultLocale
            LEFT OUTER JOIN [ax].ECORESPRODUCTTRANSLATION erpt WITH (FORCESEEK) ON erpt.PRODUCT = erp.RECID AND erpt.LANGUAGEID = @nvc_Locale
        WHERE
            it.DATAAREAID = @nvc_DataAreaId
            AND itm.DATAAREAID = @nvc_DataAreaId
            AND itm.MODULETYPE = 2  -- Sales        
    ),

    VARIANTDETAILS AS
    (
        SELECT
            [idc].DISTINCTPRODUCTVARIANT                                                                                        AS RECID,
            [masterDetails].RECID                                                                                               AS MASTERPRODUCTID,
            masterDetails.ITEMID,
            idc.INVENTDIMID,
            idc.RETAILVARIANTID,
            masterDetails.UNITID,
            COALESCE(NULLIF(erpt.DESCRIPTION, ''), NULLIF(erpt_default.DESCRIPTION, ''), masterDetails.DESCRIPTION)             AS [DESCRIPTION],
            COALESCE(NULLIF(erpt.NAME, ''), NULLIF(erpt_default.NAME, ''), masterDetails.NAME)                                  AS NAME,
            CASE masterDetails.PRODUCTTYPE
                WHEN 1 THEN 2 -- Kit Variant
                ELSE 5        -- Non-kit Variant
            END                                                                                                                 AS PRODUCTTYPE
        FROM [ax].INVENTDIMCOMBINATION idc -- because we inner join with this table, this guarantees that all records in this select will be variants
            INNER JOIN MASTERSTANDALONEDETAILS masterDetails ON masterDetails.ITEMID = idc.ITEMID   -- this will retrieve the details for the master associated to this variant
            
            -- variants can have different name and description from its master
            LEFT OUTER JOIN [ax].ECORESPRODUCTTRANSLATION erpt         WITH (FORCESEEK) ON [erpt].PRODUCT = [idc].DISTINCTPRODUCTVARIANT AND [erpt].LANGUAGEID = @nvc_Locale
            LEFT OUTER JOIN [ax].ECORESPRODUCTTRANSLATION erpt_default WITH (FORCESEEK) ON [erpt_default].PRODUCT = [idc].DISTINCTPRODUCTVARIANT AND [erpt_default].LANGUAGEID = @nvc_DefaultLocale
        WHERE
            idc.DATAAREAID = @nvc_DataAreaId
    )

    SELECT
        details.UNITID                                                          AS DEFAULTUNITOFMEASURE,
        details.DESCRIPTION                                                     AS [DESCRIPTION],        
        details.NAME                                                            AS NAME,
        details.RECID                                                           AS RECID,
        details.MASTERPRODUCTID                                                 AS MASTERPRODUCTID,
        details.PRODUCTTYPE                                                     AS PRODUCTTYPE,
        assortedInput.ISREMOTE                                                  AS ISREMOTE,
        details.ITEMID                                                          AS ITEMID,
        NULL                                                                    AS INVENTDIMID,
        NULL                                                                    AS VARIANTID
    FROM MASTERSTANDALONEDETAILS details
        INNER JOIN ASSORTEDINPUT assortedInput ON assortedInput.RECID = details.RECID

    UNION ALL

    SELECT
        details.UNITID                                                          AS DEFAULTUNITOFMEASURE,
        details.DESCRIPTION                                                     AS [DESCRIPTION],        
        details.NAME                                                            AS NAME,
        details.RECID                                                           AS RECID,
        details.MASTERPRODUCTID                                                 AS MASTERPRODUCTID,
        details.PRODUCTTYPE                                                     AS PRODUCTTYPE,
        assortedInput.ISREMOTE                                                  AS ISREMOTE,
        details.ITEMID                                                          AS ITEMID,
        details.INVENTDIMID                                                     AS INVENTDIMID,
        details.RETAILVARIANTID                                                 AS VARIANTID
    FROM VARIANTDETAILS details
        INNER JOIN ASSORTEDINPUT assortedInput ON assortedInput.RECID = details.RECID
;
GO
PRINT N'Creating [crt].[GETPRODUCTSEARCHRESULTSBYCATEGORYID]...';


GO

CREATE FUNCTION [crt].[GETPRODUCTSEARCHRESULTSBYCATEGORYID]
(
    @bi_ChannelId                 BIGINT,
    @bi_CatalogId                 BIGINT,
    @dt_ChannelDate               DATETIME,
    @nvc_Locale                   NVARCHAR(7),
    @bi_CategoryId                BIGINT
)
RETURNS TABLE
RETURN
    SELECT
        [prods].PRODUCTID AS RECID,
        [it].ITEMID AS ITEMID,
        COALESCE([erpt_locale].NAME, [erpt_default].NAME) AS NAME,
        [itm].PRICE,
        [gpml].URI AS PRIMARYIMAGE
    FROM [crt].GETPRODUCTIDSBYCATEGORYID(@bi_ChannelId, @bi_CatalogId, @dt_ChannelDate, @bi_CategoryId) prods
        LEFT OUTER JOIN [ax].ECORESPRODUCT erp ON [erp].RECID = [prods].PRODUCTID
        LEFT OUTER JOIN [ax].RETAILCHANNELTABLE rct ON [rct].RECID = @bi_ChannelId
            LEFT OUTER JOIN [ax].INVENTTABLE it ON [it].PRODUCT = [prods].PRODUCTID AND [it].DATAAREAID = [rct].INVENTLOCATIONDATAAREAID
                LEFT OUTER JOIN [ax].INVENTTABLEMODULE itm ON [itm].ITEMID = [it].ITEMID AND [itm].DATAAREAID = [it].DATAAREAID AND [itm].MODULETYPE = 2  -- Sales
        LEFT OUTER JOIN [ax].ECORESPRODUCTTRANSLATION erpt_locale ON [erpt_locale].PRODUCT = [prods].PRODUCTID AND [erpt_locale].LANGUAGEID = @nvc_Locale
        LEFT OUTER JOIN [crt].CHANNELLANGUAGESVIEW clv ON [clv].CHANNEL = @bi_ChannelId AND [clv].ISDEFAULT = 1
            LEFT OUTER JOIN [ax].ECORESPRODUCTTRANSLATION erpt_default ON [erpt_default].PRODUCT = [prods].PRODUCTID AND [erpt_default].LANGUAGEID = [clv].LANGUAGEID
        OUTER APPLY (SELECT TOP 1 REPLACE(REPLACE(URI, '{LANGUAGEID}', @nvc_Locale), '{PRODUCTNUMBER}', (SELECT [crt].REPLACEUNWANTEDCHARACTERS([erp].DISPLAYPRODUCTNUMBER))) AS URI FROM [crt].GETMEDIALOCATIONBYPRODUCTID(@bi_ChannelId, @bi_CatalogId, [prods].PRODUCTID, @nvc_Locale) ORDER BY PRIORITY, ISDEFAULT, URI) gpml
GO
PRINT N'Creating [crt].[GETPRODUCTSEARCHRESULTSBYTEXT]...';


GO

CREATE FUNCTION [crt].[GETPRODUCTSEARCHRESULTSBYTEXT]
(
    @bi_ChannelId            BIGINT,
    @bi_CatalogId            BIGINT,
    @dt_ChannelDate          DATE,
    @i_MaxTop                INT,
    @nvc_Locale              NVARCHAR(7),
    @nvc_SearchText          NVARCHAR(1000)  -- 1000 because the size of the biggest column being looked up is [ax].ECORESPRODUCTTRANSLATION.DESCRIPTION of type NVARCHAR(1000)
)
RETURNS TABLE
RETURN
    SELECT
        [prods].PRODUCTID AS RECID,
        [it].ITEMID AS ITEMID,
        COALESCE([erpt_locale].NAME, [erpt_default].NAME) AS NAME,
        [itm].PRICE,
        [gpml].URI AS PRIMARYIMAGE,
        [prods].RANKING
    FROM [crt].GETPRODUCTIDSBYSEARCHTEXT(@bi_ChannelId, @bi_CatalogId, @dt_ChannelDate, @i_MaxTop, @nvc_Locale, @nvc_SearchText) prods
        LEFT OUTER JOIN [ax].ECORESPRODUCT erp ON [erp].RECID = [prods].PRODUCTID
        LEFT OUTER JOIN [ax].RETAILCHANNELTABLE rct ON [rct].RECID = @bi_ChannelId
            LEFT OUTER JOIN [ax].INVENTTABLE it ON [it].PRODUCT = [prods].PRODUCTID AND [it].DATAAREAID = [rct].INVENTLOCATIONDATAAREAID
                LEFT OUTER JOIN [ax].INVENTTABLEMODULE itm ON [itm].ITEMID = [it].ITEMID AND [itm].DATAAREAID = [it].DATAAREAID AND [itm].MODULETYPE = 2  -- Sales
        LEFT OUTER JOIN [ax].ECORESPRODUCTTRANSLATION erpt_locale ON [erpt_locale].PRODUCT = [prods].PRODUCTID AND [erpt_locale].LANGUAGEID = @nvc_Locale
        LEFT OUTER JOIN [crt].CHANNELLANGUAGESVIEW clv ON [clv].CHANNEL = @bi_ChannelId AND [clv].ISDEFAULT = 1
            LEFT OUTER JOIN [ax].ECORESPRODUCTTRANSLATION erpt_default ON [erpt_default].PRODUCT = [prods].PRODUCTID AND [erpt_default].LANGUAGEID = [clv].LANGUAGEID
        OUTER APPLY (SELECT TOP 1 REPLACE(REPLACE(URI, '{LANGUAGEID}', @nvc_Locale), '{PRODUCTNUMBER}', (SELECT [crt].REPLACEUNWANTEDCHARACTERS([erp].DISPLAYPRODUCTNUMBER))) AS URI FROM [crt].GETMEDIALOCATIONBYPRODUCTID(@bi_ChannelId, @bi_CatalogId, [prods].PRODUCTID, @nvc_Locale) ORDER BY PRIORITY, ISDEFAULT, URI) gpml
GO
PRINT N'Creating [crt].[CHANNELCONFIGURATIONVIEW_V2]...';


GO

CREATE VIEW [crt].[CHANNELCONFIGURATIONVIEW_V2] AS
(
    SELECT
        [rct].[RECID],
        [rct].[CHANNELTYPE],
        [rct].[INVENTLOCATION],
        [rct].[INVENTLOCATIONDATAAREAID],
        [rct].[CURRENCY],
        [rct].[PRICEINCLUDESSALESTAX],
        [rct].[DISPLAYTAXPERTAXCOMPONENT],
        [l].ACCOUNTINGCURRENCY AS 'COMPANYCURRENCY',
        [lpa].[COUNTRYREGIONID],
        [lacr].[ISOCODE] AS 'COUNTRYREGIONISOCODE',
        [rsp].[EXCHANGERATETYPE],
        [rsp].[EARNLOYALTYOFFLINE],
        [rfp].[DAYSCUSTOMERHISTORY] AS 'DAYSCUSTOMERHISTORY',
        [dpt].LANGUAGEID AS 'COMPANYLANGUAGEID',
        [rp].PICKUPDELIVERYMODECODE,
        [rp].ELECTRONICDELIVERYMODECODE,
        [rp].GIFTCARDITEM,
        [rp].CANCELLATIONCHARGE,
        [rp].CANCELLATIONCHARGECODE,
        [rp].EXPIRATIONDATE AS 'QUOTEEXPIRATIONDAYS',
        [rp].MINIMUMDEPOSITFORSALESORDER,
        [rp].SHIPPINGCHARGECODE,
        [rp].PASSWORDEXPIRYINTERVAL AS 'PASSWORDEXPIRYINTERVAL',
        [rp].PASSWORDEXPIRYNOTIFICATIONTHRESHOLD AS 'PASSWORDEXPIRYNOTIFICATIONTHRESHOLD',
        [rct].CHANNELTIMEZONE AS 'TIMEZONECODE',
        [rct].CHANNELTIMEZONEINFOID AS 'TIMEZONEINFOID',
        [clv].LANGUAGEID AS 'DEFAULTLANGUAGEID',
        [rsbp].[APIKEY] AS 'BINGAPIKEY',
        [lpa].VALIDFROM,
        [lpa].VALIDTO,
        [crt].GETCATALOGIMAGEATTRIBUTEDEFAULTVALUE() AS CATALOGDEFAULTIMAGETEMPLATE,
        [crt].GETEMPLOYEEIMAGEATTRIBUTEDEFAULTVALUE() AS EMPLOYEEDEFAULTIMAGETEMPLATE,
        [crt].GETCUSTOMERIMAGEATTRIBUTEDEFAULTVALUE() AS CUSTOMERDEFAULTIMAGETEMPLATE,
        [crt].GETCATEGORYIMAGEATTRIBUTEDEFAULTVALUE() AS CATEGORYDEFAULTIMAGETEMPLATE,
        [crt].GETPRODUCTIMAGEATTRIBUTEDEFAULTVALUE() AS PRODUCTDEFAULTIMAGETEMPLATE
    FROM [ax].RETAILCHANNELTABLE rct

    -- Get functionality profile information
    LEFT JOIN [ax].RETAILSTORETABLE rst ON rst.RECID = rct.RECID
    LEFT JOIN [ax].RETAILFUNCTIONALITYPROFILE rfp on rfp.PROFILEID = rst.FUNCTIONALITYPROFILE

    -- Get the store's country/region
    INNER JOIN [ax].COMPANYINFO ci ON ci.DATAAREA = rct.INVENTLOCATIONDATAAREAID
    INNER JOIN [ax].LEDGER l ON l.PRIMARYFORLEGALENTITY = ci.RECID
    INNER JOIN [ax].DIRPARTYLOCATION drl ON drl.ISPRIMARY = 1 AND drl.PARTY = ci.RECID
    INNER JOIN [ax].LOGISTICSPOSTALADDRESS lpa ON lpa.ISPRIVATE = 0 AND lpa.LOCATION = drl.LOCATION
    INNER JOIN [ax].LOGISTICSADDRESSCOUNTRYREGION lacr ON lacr.COUNTRYREGIONID = lpa.COUNTRYREGIONID

    -- Get the company's language
    INNER JOIN [ax].DIRPARTYTABLE dpt on dpt.RECID = ci.RECID

     -- Get the store's default language
    INNER JOIN [crt].CHANNELLANGUAGESVIEW clv ON clv.CHANNEL = rct.RECID AND clv.ISDEFAULT = 1
    INNER JOIN [ax].RETAILPARAMETERS rp ON rp.[KEY] = 0 AND rp.DATAAREAID = rct.INVENTLOCATIONDATAAREAID

    -- Get the shared parameters
    LEFT JOIN ax.RETAILSHAREDPARAMETERS rsp ON rsp.[KEY] = 0     -- KEY = 0 to make sure it is unique

    LEFT JOIN [ax].RETAILSHAREDBINGPARAMETERS rsbp ON rsbp.[KEY] = 0
    WHERE rsp.[KEY] = 0
)
GO
PRINT N'Creating [crt].[ORGUNITADDRESSVIEW]...';


GO
/********************************************************************************
    [OrgUnitAddressView] retrieves postal address information of a channel.

********************************************************************************/
CREATE VIEW [crt].[ORGUNITADDRESSVIEW] AS
(
    SELECT 
        rct.RECID AS 'CHANNELID',
        rst.TAXGROUP,
        lpa.RECID AS 'RECID', -- POSTALADDRESSRECID, the RecId of Address class
        lpa.BUILDINGCOMPLIMENT,
        lpa.CITY,
        lpa.COUNTRYREGIONID, -- Three letters country / region code.
        lacr.ISOCODE, -- Two letters country / region code.
        lpa.COUNTY,
        lac.NAME AS 'COUNTYNAME',
        lpa.DISTRICTNAME,
        1 AS 'ISPRIMARY', -- only select primary address
        lpa.ISPRIVATE,
        lpa.POSTBOX,
        lpa.STATE,
        las.NAME AS 'STATENAME',
        lpa.STREET,
        lpa.STREETNUMBER,
        lpa.ZIPCODE,
        lpa.ADDRESS, --Address.FullAddresss
        dp.RECID AS 'DIRPARTYTABLERECID',
        dpl.RECID AS 'DIRPARTYLOCATIONRECID',
        dpl.ATTENTIONTOADDRESSLINE,
        dp.PARTYNUMBER
    FROM [ax].RETAILCHANNELTABLE rct    
    INNER JOIN [ax].RETAILSTORETABLE rst ON rct.RECID = rst.RECID
    LEFT OUTER JOIN [ax].DIRPARTYTABLE dp ON dp.RECID = rct.OMOPERATINGUNITID
    -- ADDRESS INFORMATION
    LEFT OUTER JOIN [ax].DIRPARTYLOCATION AS dpl ON dpl.PARTY = dp.RECID AND dpl.ISPRIMARY = 1
    LEFT OUTER JOIN [ax].LOGISTICSPOSTALADDRESS AS lpa ON 
                        lpa.LOCATION = dpl.LOCATION 
                        AND lpa.ISPRIVATE = 0 
                        AND GETUTCDATE() BETWEEN VALIDFROM AND VALIDTO
    LEFT OUTER JOIN [ax].LOGISTICSADDRESSCOUNTRYREGION AS lacr ON lpa.COUNTRYREGIONID = lacr.COUNTRYREGIONID
    --state name
    LEFT OUTER JOIN [ax].LOGISTICSADDRESSSTATE las ON lpa.COUNTRYREGIONID = las.COUNTRYREGIONID
                and lpa.STATE = las.STATEID
    --county name
    LEFT OUTER JOIN [ax].LOGISTICSADDRESSCOUNTY lac ON lpa.COUNTRYREGIONID = lac.COUNTRYREGIONID
                and lpa.STATE = lac.STATEID
                and lpa.COUNTY = lac.COUNTYID
)
GO
PRINT N'Creating [crt].[ORGUNITCONTACTSVIEW]...';


GO
/********************************************************************************
    OrgunitContactsView retrieves electronic contact information of a channel.

********************************************************************************/
CREATE VIEW [crt].[ORGUNITCONTACTSVIEW] AS
(
    SELECT
        rct.RECID as 'CHANNELID', 
        lea.RECID as 'ELECTRONICADDRESSLOCATIONRECID', 
        lea.LOCATOR AS 'ELECTRONICADDRESSLOCATOR',
        lea.LOCATOREXTENSION AS 'ELECTRONICADDRESSLOCATOREXTENSION', 
        lea.TYPE AS 'ELECTRONICADDRESSTYPE', 
        lea.ISPRIMARY AS 'ISPRIMARY', 
        lea.ISPRIVATE AS 'ISPRIVATE'
    FROM ax.RETAILCHANNELTABLE rct
    INNER JOIN ax.OMOPERATINGUNIT oou ON oou.RECID = rct.OMOPERATINGUNITID
    INNER JOIN ax.DIRPARTYLOCATION dpl ON dpl.PARTY = oou.RECID
    INNER JOIN ax.LogisticsElectronicAddress lea ON lea.LOCATION = dpl.LOCATION
)
GO
PRINT N'Creating [crt].[PRODUCTDIMENSIONSVIEW]...';


GO
CREATE VIEW [crt].[PRODUCTDIMENSIONSVIEW] AS
(
    SELECT
        COLORPRODUCTMASTER AS PRODUCTID,
        1 AS DIMENSION  -- Color
    FROM [ax].ECORESPRODUCTMASTERCOLOR

    UNION ALL

    SELECT
        CONFIGPRODUCTMASTER AS PRODUCTID,
        2 AS DIMENSION  -- Configuration
    FROM [ax].ECORESPRODUCTMASTERCONFIGURATION

    UNION ALL

    SELECT
        SIZEPRODUCTMASTER AS PRODUCTID,
        3 AS DIMENSION  -- Size
    FROM [ax].ECORESPRODUCTMASTERSIZE

    UNION ALL

    SELECT
        STYLEPRODUCTMASTER AS PRODUCTID,
        4 AS DIMENSION  -- Style
    FROM [ax].ECORESPRODUCTMASTERSTYLE
)
GO
PRINT N'Creating [crt].[TRANSACTIONSERVICEPROFILEVIEW]...';


GO

CREATE VIEW [crt].[TRANSACTIONSERVICEPROFILEVIEW] AS
(
    SELECT
        [rct].RECID AS 'CHANNELID',
        [rsp].[STAFFPASSWORDHASH],
        [rsp].[DEVICETOKENALGORITHM],
        [rsp].[DEVICETOKENEXPIRATION],
        [rfp].[TSSTAFF] AS 'TSSTAFFLOGONCONFIGURATION',
        [rtsp].[PROFILEID] AS 'TSPROFILEID',
        [rtsp].[LANGUAGE] AS 'TSLANGUAGEID',
        [rtsp].[SERVERSERVICENAME] AS 'TSSERVICENAME',
        [rtsp].[SECURITYOFF] AS 'TSSECURITYOFF',
        [rtsp].[USERID] AS 'TSUSERID',
        [rtsp].[SERVICEHOSTURL] AS 'TSSERVICEHOSTURL',
        [rtsp].[ISSUERURI] AS 'TSISSUERURI',
        [rtsp].[IDENTITYPROVIDER] AS 'TSIDENTITYPROVIDER',
        [rtsp].[IDENTITYPROVIDERCLAIMTYPE] AS 'TSIDENTITYPROVIDERCLAIMTYPE',
        [rtsp].[AUDIENCEURN] AS 'TSAUDIENCEURN',
        [rtsp].[ISSUEDTOKENTYPE] AS 'TSISSUEDTOKENTYPE'
    FROM [ax].RETAILTRANSACTIONSERVICEPROFILE rtsp 
    LEFT JOIN [ax].RETAILSTORETABLE rst ON rst.RECID = rtsp.RECID
    LEFT JOIN [ax].RETAILFUNCTIONALITYPROFILE rfp ON rfp.PROFILEID = rst.FUNCTIONALITYPROFILE
    LEFT JOIN [ax].RETAILCHANNELTABLE rct ON rct.TRANSACTIONSERVICEPROFILE = rtsp.PROFILEID
    LEFT JOIN [ax].RETAILSHAREDPARAMETERS rsp ON RSP.[KEY] = 0
)
GO
PRINT N'Creating [crt].[UNITOFMEASUREVIEW]...';


GO

CREATE VIEW [crt].[UNITOFMEASUREVIEW] AS
(
    SELECT
        [uom].SYMBOL,
        [uom].DECIMALPRECISION,
        [uom].RECID,
        [uomt].LANGUAGEID,
        [uomt].DESCRIPTION
    FROM [ax].UNITOFMEASURE uom
    LEFT OUTER JOIN [ax].UNITOFMEASURETRANSLATION uomt
    ON uom.RECID = uomt.UNITOFMEASURE
)
GO
PRINT N'Refreshing [crt].[GETCATALOGSPUBLISHEDTOACTIVECHANNEL]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[GETCATALOGSPUBLISHEDTOACTIVECHANNEL]';


GO
PRINT N'Altering [crt].[GETPRODUCTSBYIDS]...';


GO
ALTER FUNCTION [crt].[GETPRODUCTSBYIDS]
(
    @bi_ChannelId            BIGINT,
    @dt_ChannelDate          DATETIME,
    @nvc_Locale              NVARCHAR(7),
    @tvp_ProductIds          [crt].RECORDIDTABLETYPE READONLY
)
RETURNS TABLE
RETURN
    -- Retrieve variant id = 0 products.
    SELECT DISTINCT
        [itm].UNITID AS DEFAULTUNITOFMEASURE,
        ISNULL([erpt].[DESCRIPTION], [erpt_default].[DESCRIPTION]) AS [DESCRIPTION],
        0 AS ISREMOTE,
        [it].ITEMID AS ITEMID,
        NULL AS INVENTDIMID,
        COALESCE([erpt].NAME, [erpt_default].NAME, [erp].DISPLAYPRODUCTNUMBER) AS NAME,
        CASE
            WHEN [pv].RECID IS NOT NULL THEN [par].VARIANTID
            ELSE [par].PRODUCTID
        END AS RECID,
        CASE 
            WHEN [par].VARIANTID = 0 AND [rk].RECID IS NOT NULL THEN 1  -- Kit Master
            WHEN [rk].RECID IS NOT NULL AND [pv].RECID IS NOT NULL THEN 2  -- Kit Variant
            WHEN [pv].RECID IS NULL AND [pv2].RECID IS NOT NULL THEN 3  -- Master
            WHEN [pv].RECID IS NOT NULL THEN 5  -- Variant
            ELSE 4  -- Standalone
        END AS PRODUCTTYPE,
        NULL AS VARIANTID
    FROM @tvp_ProductIds ids
    INNER JOIN [crt].LOCALPRODUCTASSORTMENTRULESVIEW par WITH (NOEXPAND) ON [par].PRODUCTID = [ids].RECID AND [par].VARIANTID = 0
    INNER JOIN [ax].ECORESPRODUCT erp ON [erp].RECID = [par].PRODUCTID
    INNER JOIN [ax].INVENTTABLE it ON [it].PRODUCT = [par].PRODUCTID
    INNER JOIN [ax].INVENTTABLEMODULE itm ON [itm].ITEMID = [it].ITEMID AND [itm].DATAAREAID = [it].DATAAREAID AND [itm].MODULETYPE = 2  -- Sales
    INNER JOIN [crt].CHANNELLANGUAGESVIEW clv ON [clv].CHANNEL = @bi_ChannelId AND [clv].ISDEFAULT = 1
    LEFT OUTER JOIN [ax].ECORESPRODUCTTRANSLATION erpt_default ON [erpt_default].LANGUAGEID = [clv].LANGUAGEID AND [erpt_default].PRODUCT = [par].PRODUCTID
    LEFT OUTER JOIN [ax].ECORESPRODUCTTRANSLATION erpt ON [erpt].PRODUCT = [par].PRODUCTID AND [erpt].LANGUAGEID = @nvc_Locale
    LEFT OUTER JOIN [ax].ECORESDISTINCTPRODUCTVARIANT pv ON [pv].RECID = [par].VARIANTID AND [pv].PRODUCTMASTER = [par].PRODUCTID
    LEFT OUTER JOIN [ax].ECORESDISTINCTPRODUCTVARIANT pv2 ON [pv2].PRODUCTMASTER = [par].PRODUCTID AND [par].VARIANTID = 0
    LEFT OUTER JOIN [ax].RETAILKIT rk ON [rk].PRODUCTMASTER = [par].PRODUCTID AND [par].VARIANTID = 0
    WHERE [par].CHANNELID = @bi_ChannelId AND @dt_ChannelDate BETWEEN [par].VALIDFROM AND [par].VALIDTO

    UNION ALL
    
    -- Retrieve variant id != 0 products.
    SELECT DISTINCT
        [itm].UNITID AS DEFAULTUNITOFMEASURE,
        COALESCE(NULLIF([erpt_variant].[DESCRIPTION], ''), NULLIF([erpt].[DESCRIPTION], ''), NULLIF([erpt_variant_default].[DESCRIPTION], ''), NULLIF([erpt_default].[DESCRIPTION], '')) AS [DESCRIPTION],
        0 AS ISREMOTE,
        [it].ITEMID AS ITEMID,
        [idc].INVENTDIMID AS INVENTDIMID,
        COALESCE(NULLIF([erpt_variant].NAME, ''), NULLIF([erpt].NAME, ''), NULLIF([erpt_variant_default].NAME, ''), NULLIF([erpt_default].NAME, ''), [erp].DISPLAYPRODUCTNUMBER) AS NAME,
        CASE
            WHEN [pv].RECID IS NOT NULL THEN [par].VARIANTID
            ELSE [par].PRODUCTID
        END AS RECID,
        CASE 
            WHEN [par].VARIANTID = 0 AND [rk].RECID IS NOT NULL THEN 1  -- Kit Master
            WHEN [rk].RECID IS NOT NULL AND [pv].RECID IS NOT NULL THEN 2  -- Kit Variant
            WHEN [pv].RECID IS NULL AND [pv2].RECID IS NOT NULL THEN 3  -- Master
            WHEN [pv].RECID IS NOT NULL THEN 5  -- Variant
            ELSE 4  -- Standalone
        END AS PRODUCTTYPE,
        [idc].RETAILVARIANTID AS VARIANTID
    FROM @tvp_ProductIds ids
    INNER JOIN [crt].LOCALPRODUCTASSORTMENTRULESVIEW par WITH (NOEXPAND) ON [par].VARIANTID = [ids].RECID
    INNER JOIN [ax].ECORESPRODUCT erp ON [erp].RECID = [par].PRODUCTID
    INNER JOIN [ax].INVENTTABLE it ON [it].PRODUCT = [par].PRODUCTID
    INNER JOIN [ax].INVENTDIMCOMBINATION idc ON [idc].DISTINCTPRODUCTVARIANT = [par].VARIANTID AND [idc].DATAAREAID = [it].DATAAREAID
    INNER JOIN [ax].INVENTTABLEMODULE itm ON [itm].ITEMID = [it].ITEMID AND [itm].DATAAREAID = [it].DATAAREAID AND [itm].MODULETYPE = 2  -- Sales
    INNER JOIN [crt].CHANNELLANGUAGESVIEW clv ON [clv].CHANNEL = @bi_ChannelId AND [clv].ISDEFAULT = 1
    LEFT OUTER JOIN [ax].ECORESPRODUCTTRANSLATION erpt_variant_default ON [erpt_variant_default].LANGUAGEID = [clv].LANGUAGEID AND [erpt_variant_default].PRODUCT = [par].VARIANTID
    LEFT OUTER JOIN [ax].ECORESPRODUCTTRANSLATION erpt_variant ON [erpt_variant].PRODUCT = [par].VARIANTID AND [erpt_variant].LANGUAGEID = @nvc_Locale
    LEFT OUTER JOIN [ax].ECORESPRODUCTTRANSLATION erpt_default ON [erpt_default].LANGUAGEID = [clv].LANGUAGEID AND [erpt_default].PRODUCT = [par].PRODUCTID
    LEFT OUTER JOIN [ax].ECORESPRODUCTTRANSLATION erpt ON [erpt].PRODUCT = [par].PRODUCTID AND [erpt].LANGUAGEID = @nvc_Locale
    LEFT OUTER JOIN [ax].ECORESDISTINCTPRODUCTVARIANT pv ON [pv].RECID = [par].VARIANTID
    LEFT OUTER JOIN [ax].ECORESDISTINCTPRODUCTVARIANT pv2 ON [pv2].PRODUCTMASTER = [par].PRODUCTID
    LEFT OUTER JOIN [ax].RETAILKIT rk ON [rk].PRODUCTMASTER = [par].PRODUCTID
    WHERE [par].CHANNELID = @bi_ChannelId AND @dt_ChannelDate BETWEEN [par].VALIDFROM AND [par].VALIDTO

    UNION ALL
    
    -- Retrieve variant id = 0 temporarily assorted remote products.
    SELECT DISTINCT
        [itm].UNITID AS DEFAULTUNITOFMEASURE,
        ISNULL([erpt].[DESCRIPTION], [erpt_default].[DESCRIPTION]) AS [DESCRIPTION],
        1 AS ISREMOTE,
        [it].ITEMID AS ITEMID,
        NULL AS INVENTDIMID,
        COALESCE([erpt].NAME, [erpt_default].NAME, [erp].DISPLAYPRODUCTNUMBER) AS NAME,
        CASE
            WHEN [pv].RECID IS NOT NULL THEN [par].VARIANTID
            ELSE [par].PRODUCTID
        END AS RECID,
        CASE 
            WHEN [par].VARIANTID = 0 AND [rk].RECID IS NOT NULL THEN 1  -- Kit Master
            WHEN [rk].RECID IS NOT NULL AND [pv].RECID IS NOT NULL THEN 2  -- Kit Variant
            WHEN [pv].RECID IS NULL AND [pv2].RECID IS NOT NULL THEN 3  -- Master
            WHEN [pv].RECID IS NOT NULL THEN 5  -- Variant
            ELSE 4  -- Standalone
        END AS PRODUCTTYPE,
        NULL AS VARIANTID
    FROM @tvp_ProductIds ids
    INNER JOIN [crt].REMOTEPRODUCTASSORTMENTRULESVIEW par ON [par].PRODUCTID = [ids].RECID AND [par].VARIANTID = 0
    INNER JOIN [ax].ECORESPRODUCT erp ON [erp].RECID = [par].PRODUCTID
    INNER JOIN [ax].INVENTTABLE it ON [it].PRODUCT = [par].PRODUCTID
    INNER JOIN [ax].INVENTTABLEMODULE itm ON [itm].ITEMID = [it].ITEMID AND [itm].DATAAREAID = [it].DATAAREAID AND [itm].MODULETYPE = 2  -- Sales
    INNER JOIN [crt].CHANNELLANGUAGESVIEW clv ON [clv].CHANNEL = @bi_ChannelId AND [clv].ISDEFAULT = 1
    LEFT OUTER JOIN [ax].ECORESPRODUCTTRANSLATION erpt_default ON [erpt_default].LANGUAGEID = [clv].LANGUAGEID AND [erpt_default].PRODUCT = [par].PRODUCTID
    LEFT OUTER JOIN [ax].ECORESPRODUCTTRANSLATION erpt ON [erpt].PRODUCT = [par].PRODUCTID AND [erpt].LANGUAGEID = @nvc_Locale
    LEFT OUTER JOIN [ax].ECORESDISTINCTPRODUCTVARIANT pv ON [pv].RECID = [par].VARIANTID AND [pv].PRODUCTMASTER = [par].PRODUCTID
    LEFT OUTER JOIN [ax].ECORESDISTINCTPRODUCTVARIANT pv2 ON [pv2].PRODUCTMASTER = [par].PRODUCTID AND [par].VARIANTID = 0
    LEFT OUTER JOIN [ax].RETAILKIT rk ON [rk].PRODUCTMASTER = [par].PRODUCTID AND [par].VARIANTID = 0
    WHERE [par].CHANNELID = @bi_ChannelId AND @dt_ChannelDate BETWEEN [par].VALIDFROM AND [par].VALIDTO

    UNION ALL
    
    -- Retrieve variant id != 0 temporarily assorted remote products.
    SELECT DISTINCT
        [itm].UNITID AS DEFAULTUNITOFMEASURE,
        COALESCE(NULLIF([erpt_variant].[DESCRIPTION], ''), NULLIF([erpt].[DESCRIPTION], ''), NULLIF([erpt_variant_default].[DESCRIPTION], ''), NULLIF([erpt_default].[DESCRIPTION], '')) AS [DESCRIPTION],
        1 AS ISREMOTE,
        [it].ITEMID AS ITEMID,
        [idc].INVENTDIMID AS INVENTDIMID,
        COALESCE(NULLIF([erpt_variant].NAME, ''), NULLIF([erpt].NAME, ''), NULLIF([erpt_variant_default].NAME, ''), NULLIF([erpt_default].NAME, ''), [erp].DISPLAYPRODUCTNUMBER) AS NAME,
        CASE
            WHEN [pv].RECID IS NOT NULL THEN [par].VARIANTID
            ELSE [par].PRODUCTID
        END AS RECID,
        CASE 
            WHEN [par].VARIANTID = 0 AND [rk].RECID IS NOT NULL THEN 1  -- Kit Master
            WHEN [rk].RECID IS NOT NULL AND [pv].RECID IS NOT NULL THEN 2  -- Kit Variant
            WHEN [pv].RECID IS NULL AND [pv2].RECID IS NOT NULL THEN 3  -- Master
            WHEN [pv].RECID IS NOT NULL THEN 5  -- Variant
            ELSE 4  -- Standalone
        END AS PRODUCTTYPE,
        [idc].RETAILVARIANTID AS VARIANTID
    FROM @tvp_ProductIds ids
    INNER JOIN [crt].REMOTEPRODUCTASSORTMENTRULESVIEW par ON [par].VARIANTID = [ids].RECID
    INNER JOIN [ax].ECORESPRODUCT erp ON [erp].RECID = [par].PRODUCTID
    INNER JOIN [ax].INVENTTABLE it ON [it].PRODUCT = [par].PRODUCTID
    INNER JOIN [ax].INVENTDIMCOMBINATION idc ON [idc].DISTINCTPRODUCTVARIANT = [par].VARIANTID AND [idc].DATAAREAID = [it].DATAAREAID
    INNER JOIN [ax].INVENTTABLEMODULE itm ON [itm].ITEMID = [it].ITEMID AND [itm].DATAAREAID = [it].DATAAREAID AND [itm].MODULETYPE = 2  -- Sales
    INNER JOIN [crt].CHANNELLANGUAGESVIEW clv ON [clv].CHANNEL = @bi_ChannelId AND [clv].ISDEFAULT = 1
    LEFT OUTER JOIN [ax].ECORESPRODUCTTRANSLATION erpt_variant_default ON [erpt_variant_default].LANGUAGEID = [clv].LANGUAGEID AND [erpt_variant_default].PRODUCT = [par].VARIANTID
    LEFT OUTER JOIN [ax].ECORESPRODUCTTRANSLATION erpt_variant ON [erpt_variant].PRODUCT = [par].VARIANTID AND [erpt_variant].LANGUAGEID = @nvc_Locale
    LEFT OUTER JOIN [ax].ECORESPRODUCTTRANSLATION erpt_default ON [erpt_default].LANGUAGEID = [clv].LANGUAGEID AND [erpt_default].PRODUCT = [par].PRODUCTID
    LEFT OUTER JOIN [ax].ECORESPRODUCTTRANSLATION erpt ON [erpt].PRODUCT = [par].PRODUCTID AND [erpt].LANGUAGEID = @nvc_Locale
    LEFT OUTER JOIN [ax].ECORESDISTINCTPRODUCTVARIANT pv ON [pv].RECID = [par].VARIANTID
    LEFT OUTER JOIN [ax].ECORESDISTINCTPRODUCTVARIANT pv2 ON [pv2].PRODUCTMASTER = [par].PRODUCTID
    LEFT OUTER JOIN [ax].RETAILKIT rk ON [rk].PRODUCTMASTER = [par].PRODUCTID
    WHERE [par].CHANNELID = @bi_ChannelId AND @dt_ChannelDate BETWEEN [par].VALIDFROM AND [par].VALIDTO
GO
PRINT N'Altering [crt].[SEARCHPRODUCTSBYCATEGORY]...';


GO

ALTER FUNCTION [crt].[SEARCHPRODUCTSBYCATEGORY]
(
    @tvp_QueryResultSettings                    [crt].[QUERYRESULTSETTINGSTABLETYPE] READONLY,
    @bi_ChannelId                               BIGINT,
    @bi_CatalogId                               BIGINT,
    @dt_ChannelDate                             DATE,
    @b_IncludeProductsFromDescendantCategories  BIT,
    @tvp_CategoryIds                            [crt].[RECORDIDTABLETYPE] READONLY
)
RETURNS @IDS TABLE
(
    RECID BIGINT
)
AS
BEGIN
    DECLARE @tvp_DummyId [crt].[RECORDIDTABLETYPE]
    DECLARE @tvp_ExpandedCategoryIdSet [crt].[RECORDIDTABLETYPE]
    DECLARE @tvp_SearchedIds [crt].RECORDIDTABLETYPE

    INSERT INTO @tvp_DummyId VALUES (0) -- Insert dummy record to satisfy API contract

    ;WITH CategoryHierarchyTree (RECID, LEVEL)
    AS
    (
        SELECT [cchv].RECID, 0 AS LEVEL
        FROM crt.CHANNELCATEGORYHIERARCHYVIEW cchv
        INNER JOIN @tvp_CategoryIds cids ON [cids].RECID = [cchv].RECID AND [cchv].CHANNELID = @bi_ChannelId

        UNION ALL

        SELECT [cchv].RECID, LEVEL + 1
        FROM crt.CHANNELCATEGORYHIERARCHYVIEW cchv
        INNER JOIN CategoryHierarchyTree ct ON [cchv].PARENTCATEGORY = [ct].RECID AND [cchv].CHANNELID = @bi_ChannelId
    )


    INSERT INTO @tvp_ExpandedCategoryIdSet(RECID)
    SELECT [ct].RECID FROM CategoryHierarchyTree ct
    INNER JOIN [ax].ECORESCATEGORY erc ON [erc].RECID = [ct].RECID
    WHERE (@b_IncludeProductsFromDescendantCategories = 0 AND [ct].LEVEL = 0) OR @b_IncludeProductsFromDescendantCategories = 1

    INSERT INTO @tvp_SearchedIds(RECID)
    -- Return only Master/Standalone product ids as required by paging and assortments
    SELECT DISTINCT COALESCE([pv].PRODUCTMASTER, [pc].PRODUCT) AS RECID
    FROM [crt].GETPRODUCTCATEGORIES(@bi_ChannelId, @bi_CatalogId, @dt_ChannelDate, 0 /* @b_IsForwardLooking */, 0 /* @b_ProductIdsPassed */, @tvp_DummyId, 1 /* @b_CategoryIdsPassed */, @tvp_ExpandedCategoryIdSet) pc
    LEFT OUTER JOIN [ax].ECORESDISTINCTPRODUCTVARIANT pv ON [pv].RECID = [pc].PRODUCT

    ;WITH UnpagedProductSearchResult (RECID, ROWNUM)
    AS
    (
        SELECT DISTINCT
            [gap].PRODUCTID AS RECID,
            ROW_NUMBER() OVER (ORDER BY [gap].PRODUCTID) AS ROWNUM
        FROM [crt].GETASSORTEDPRODUCTS(@bi_ChannelId, @dt_ChannelDate, 0 /* @b_IsForwardLooking */, 1 /* @b_SkipVariantExpansion */, 1 /* @b_ProductIdsPassed */, @tvp_SearchedIds) gap
    )

    INSERT @IDS(RECID)
    SELECT
        RECID
    FROM UnpagedProductSearchResult
    INNER JOIN @tvp_QueryResultSettings settings ON [settings].[TOP] = 0 OR ROWNUM BETWEEN ([settings].[SKIP] + 1) AND ([settings].[SKIP] + [settings].[TOP])

    RETURN;
END
GO
PRINT N'Refreshing [crt].[GETCATALOGIDSASSOCIATEDTOPRODUCTS]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[GETCATALOGIDSASSOCIATEDTOPRODUCTS]';


GO
PRINT N'Altering [crt].[GETPRODUCTRELATIONSHIPS]...';


GO

ALTER FUNCTION [crt].[GETPRODUCTRELATIONSHIPS]
(
    @bi_ChannelId            BIGINT,
    @dt_ChannelDate          DATETIME,
    @nvc_Locale              NVARCHAR(7),
    @bi_ProductId            BIGINT
)
RETURNS TABLE
RETURN
    SELECT
        [par_relatedproducts].PRODUCTID AS RECID,
        [erprt_type].RECID AS RELATIONTYPEID,
        [erprt_type].NAME AS RELATIONNAME,
        0 AS ISREMOTE,
        [it].ITEMID AS ITEMID,
        COALESCE([erpt].NAME, [erp].SEARCHNAME, [it].ITEMID) AS NAME,
        [itm].PRICE,
        COALESCE([tvt].TRANSLATION, [ertv].TEXTVALUE) AS PRIMARYIMAGE
    FROM [crt].LOCALPRODUCTASSORTMENTRULESVIEW par WITH (NOEXPAND)
    INNER JOIN [ax].ECORESPRODUCTRELATIONTABLE erprt_relation ON [erprt_relation].PRODUCT1 = [par].PRODUCTID
    INNER JOIN [ax].ECORESPRODUCTRELATIONTYPE erprt_type ON [erprt_type].RECID = [erprt_relation].PRODUCTRELATIONTYPE
    INNER JOIN [crt].LOCALPRODUCTASSORTMENTRULESVIEW par_relatedproducts WITH (NOEXPAND) ON [par_relatedproducts].CHANNELID = [par].CHANNELID AND [par_relatedproducts].PRODUCTID = [erprt_relation].PRODUCT2 AND @dt_ChannelDate BETWEEN [par].VALIDFROM AND [par].VALIDTO
    INNER JOIN [ax].RETAILCHANNELTABLE rct ON [rct].RECID = @bi_ChannelId
    INNER JOIN [ax].INVENTTABLE it ON [it].PRODUCT = [erprt_relation].PRODUCT2 AND [it].DATAAREAID = [rct].INVENTLOCATIONDATAAREAID
    INNER JOIN [ax].ECORESPRODUCT erp ON [erp].RECID = [erprt_relation].PRODUCT2
    LEFT OUTER JOIN [ax].ECORESPRODUCTTRANSLATION erpt ON [erpt].PRODUCT = [erprt_relation].PRODUCT2 AND [erpt].LANGUAGEID = @nvc_Locale
    LEFT OUTER JOIN [ax].INVENTTABLEMODULE itm ON [itm].ITEMID = [it].ITEMID AND [itm].DATAAREAID = [it].DATAAREAID AND [itm].MODULETYPE = 2  -- Sales
    LEFT OUTER JOIN [crt].DEFAULTPRODUCTATTRIBUTEGROUPDEFAULTVALUEVIEW gpavv ON [gpavv].CHANNEL = @bi_ChannelId
    LEFT OUTER JOIN [ax].ECORESTEXTVALUE ertv ON [ertv].RECID = [gpavv].VALUE
    LEFT OUTER JOIN [crt].GETTEXTVALUETRANSLATION(@bi_ChannelId) tvt ON [tvt].VALUE = [ertv].RECID AND [tvt].LANGUAGE = @nvc_Locale
    WHERE [par].CHANNELID = @bi_ChannelId AND [par].PRODUCTID = @bi_ProductId AND @dt_ChannelDate BETWEEN [par].VALIDFROM AND [par].VALIDTO

    UNION ALL
    
    -- Get temporarily assorted remote products' relationships
    SELECT
        [par_relatedproducts].PRODUCTID AS RECID,
        [erprt_type].RECID AS RELATIONTYPEID,
        [erprt_type].NAME AS RELATIONNAME,
        1 AS ISREMOTE,
        [it].ITEMID AS ITEMID,
        COALESCE([erpt].NAME, [erp].SEARCHNAME, [it].ITEMID) AS NAME,
        [itm].PRICE,
        COALESCE([tvt].TRANSLATION, [ertv].TEXTVALUE) AS PRIMARYIMAGE
    FROM [crt].REMOTEPRODUCTASSORTMENTRULESVIEW par
    INNER JOIN [ax].ECORESPRODUCTRELATIONTABLE erprt_relation ON [erprt_relation].PRODUCT1 = [par].PRODUCTID
    INNER JOIN [ax].ECORESPRODUCTRELATIONTYPE erprt_type ON [erprt_type].RECID = [erprt_relation].PRODUCTRELATIONTYPE
    INNER JOIN [crt].REMOTEPRODUCTASSORTMENTRULESVIEW par_relatedproducts ON [par_relatedproducts].CHANNELID = [par].CHANNELID AND [par_relatedproducts].PRODUCTID = [erprt_relation].PRODUCT2 AND @dt_ChannelDate BETWEEN [par].VALIDFROM AND [par].VALIDTO
    INNER JOIN [ax].RETAILCHANNELTABLE rct ON [rct].RECID = @bi_ChannelId
    INNER JOIN [ax].INVENTTABLE it ON [it].PRODUCT = [erprt_relation].PRODUCT2 AND [it].DATAAREAID = [rct].INVENTLOCATIONDATAAREAID
    INNER JOIN [ax].ECORESPRODUCT erp ON [erp].RECID = [erprt_relation].PRODUCT2
    LEFT OUTER JOIN [ax].ECORESPRODUCTTRANSLATION erpt ON [erpt].PRODUCT = [erprt_relation].PRODUCT2 AND [erpt].LANGUAGEID = @nvc_Locale
    LEFT OUTER JOIN [ax].INVENTTABLEMODULE itm ON [itm].ITEMID = [it].ITEMID AND [itm].DATAAREAID = [it].DATAAREAID AND [itm].MODULETYPE = 2  -- Sales
    LEFT OUTER JOIN [crt].DEFAULTPRODUCTATTRIBUTEGROUPDEFAULTVALUEVIEW gpavv ON [gpavv].CHANNEL = @bi_ChannelId
    LEFT OUTER JOIN [ax].ECORESTEXTVALUE ertv ON [ertv].RECID = [gpavv].VALUE
    LEFT OUTER JOIN [crt].GETTEXTVALUETRANSLATION(@bi_ChannelId) tvt ON [tvt].VALUE = [ertv].RECID AND [tvt].LANGUAGE = @nvc_Locale
    WHERE [par].CHANNELID = @bi_ChannelId AND [par].PRODUCTID = @bi_ProductId AND @dt_ChannelDate BETWEEN [par].VALIDFROM AND [par].VALIDTO
GO
PRINT N'Altering [crt].[GETDEFAULTPRODUCTATTRIBUTEVALUE]...';


GO
-- Gets default product attribute's values
ALTER FUNCTION [crt].[GETDEFAULTPRODUCTATTRIBUTEVALUE]
(
    @bi_ChannelId   BIGINT,
    @tvp_ProductIds [crt].[RECORDIDTABLETYPE] READONLY
)
RETURNS TABLE
RETURN

     SELECT
        ppacmv.CHANNEL,
        ppacmv.ATTRIBUTE,
        ppacmv.ISREFERENCE,
        eraga.ATTRIBUTEGROUP,
        0 AS ATTRIBUTEGROUPTYPE,    -- Default
        erav.VALUE,
        erpiv.PRODUCT
     FROM @tvp_ProductIds as pid
     JOIN [ax].RETAILSHAREDPARAMETERS rsp ON rsp.[KEY] = 0  -- KEY = 0 to make sure it is unique
     JOIN [ax].ECORESATTRIBUTEGROUPATTRIBUTE eraga ON rsp.PRODUCTDEFAULTATTRIBUTEGROUP = eraga.ATTRIBUTEGROUP
     JOIN [ax].ECORESPRODUCTINSTANCEVALUE erpiv ON erpiv.PRODUCT = pid.RECID
     JOIN [ax].ECORESATTRIBUTEVALUE erav ON erav.INSTANCEVALUE = erpiv.RECID AND erav.ATTRIBUTE = eraga.ATTRIBUTE
     JOIN [crt].PUBPRODUCTATTRIBUTECHANNELMETADATAVIEW ppacmv ON ppacmv.ACTUALATTRIBUTE = eraga.ATTRIBUTE AND ppacmv.CHANNEL = @bi_ChannelId
GO
PRINT N'Altering [crt].[GETPRODUCTREFINERS]...';


GO
-- ================================================================
-- Description: Retrieves refiner schema for products.
-- Category and Price are default refiners from channel DB.
-- ================================================================


ALTER FUNCTION [crt].[GETPRODUCTREFINERS]
(
    @bi_ChannelId               BIGINT,
    @bi_CatalogId               BIGINT,
    @dt_ChannelDate             DATE,
    @nvc_Locale                 NVARCHAR(7),
    @tvp_ProductIds             [crt].[RECORDIDTABLETYPE] READONLY,
    @tvp_DummyId                [crt].[RECORDIDTABLETYPE] READONLY  -- A single row of ID 0
)
RETURNS TABLE
RETURN

    -- Attribute product refiners
    SELECT DISTINCT
        [pas].ATTRIBUTE AS RECID,
        COALESCE([erat].FRIENDLYNAME, [era].NAME) AS KEYNAME,
        1 AS SOURCE,  -- Attribute
        [cra].DATATYPE,
        [raf].DISPLAYOPTION,
        [raf].DISPLAYTEMPLATE,
        [raf].THRESHOLDVALUE
    FROM [crt].[GETPRODUCTATTRIBUTESCONTAININGVALUES](@bi_ChannelId, @bi_CatalogId, @dt_ChannelDate, @tvp_ProductIds, @tvp_DummyId) AS pas
    INNER JOIN [crt].CHANNELREFINABLEATTRIBUTE cra ON [cra].ATTRIBUTE = [pas].ATTRIBUTE
    INNER JOIN [ax].RETAILATTRIBUTEFILTER raf ON [raf].ATTRIBUTE = [pas].ATTRIBUTE
    INNER JOIN [ax].ECORESATTRIBUTE era ON [era].RECID = [raf].ATTRIBUTE
    LEFT OUTER JOIN [ax].ECORESATTRIBUTETRANSLATION erat ON [erat].ATTRIBUTE = [raf].ATTRIBUTE AND [erat].LANGUAGE = @nvc_Locale
    WHERE [cra].CHANNEL = @bi_ChannelId

    UNION ALL

    -- Category is a default product refiner
    SELECT
        NULL AS RECID,
        'Category' AS KEYNAME,
        2 AS SOURCE,  -- Category
        5 AS DATATYPE,  -- Text value
        1 AS DISPLAYOPTION,  -- Multi select
        0 AS DISPLAYTEMPLATE,  -- List
        NULL AS THRESHOLDVALUE  -- Threshold values are not applicable to category refiner

    UNION ALL

    -- Price is a default product refiner
    SELECT
        NULL AS RECID,
        'Price' AS KEYNAME,
        3 AS SOURCE,  -- Price
        1 AS DATATYPE,  -- Currency value
        0 AS DISPLAYOPTION,  -- Single select
        1 AS DISPLAYTEMPLATE,  -- Slider
        NULL AS THRESHOLDVALUE  -- Threshold values are not applicable to category refiner
GO
PRINT N'Altering [crt].[GETREFINERPRICES]...';


GO

ALTER FUNCTION [crt].[GETREFINERPRICES]
(
    @bi_ChannelId               BIGINT,
    @dt_ChannelDate             DATE,
    @tvp_ProductIds             [crt].[RECORDIDTABLETYPE] READONLY
)
RETURNS TABLE
RETURN
    SELECT
        ictap.PRODUCT,
        ictap.PRICE
    FROM @tvp_ProductIds products
    LEFT OUTER JOIN [crt].[ITEMCHANNELTRADEAGREEMENTPRICEVIEW] ictap ON [ictap].PRODUCT = [products].RECID
    WHERE @dt_ChannelDate BETWEEN [ictap].FROMDATE AND [ictap].TODATE AND [ictap].CHANNEL = @bi_ChannelId

    UNION ALL
    
    SELECT
        icbp.PRODUCT,
        icbp.PRICE
    FROM @tvp_ProductIds products
    LEFT OUTER JOIN [crt].[ITEMCHANNELBASEPRICEVIEW] icbp ON [icbp].PRODUCT = [products].RECID
    WHERE [icbp].CHANNEL = @bi_ChannelId
GO
PRINT N'Refreshing [crt].[GETPRICEREFINERVALUES]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[GETPRICEREFINERVALUES]';


GO
PRINT N'Creating [crt].[SEARCHPRODUCTSBYTEXT]...';


GO

-- Dead code (deprecated): This code is not used as of AX 7 RTW.

CREATE FUNCTION [crt].[SEARCHPRODUCTSBYTEXT]
(
    @bi_ChannelId            BIGINT,
    @bi_CatalogId            BIGINT,
    @dt_ChannelDate          DATE,
    @nvc_Locale              NVARCHAR(7),
    @nvc_SearchText          NVARCHAR(1000)  -- 1000 because the size of the biggest column being looked up is [ax].ECORESPRODUCTTRANSLATION.DESCRIPTION of type NVARCHAR(1000)
)
RETURNS TABLE
RETURN
    SELECT
        [sp].RECORDID AS RECID,
        [it].ITEMID AS ITEMID,
        COALESCE([erpt_locale].NAME, [erpt_p1].NAME, [erpt_p2].NAME) AS NAME,
        [itm].PRICE AS PRICE,
        [sp].RANKING,
        [gpml].URI AS PRIMARYIMAGE
    FROM [crt].SEARCHPRODUCTS(@bi_ChannelId, @dt_ChannelDate, @nvc_Locale, @nvc_SearchText) sp
    LEFT OUTER JOIN [ax].INVENTTABLE it WITH (FORCESEEK) ON [it].PRODUCT = [sp].RECORDID
    LEFT OUTER JOIN [ax].RETAILCHANNELTABLE rct ON [it].DATAAREAID = [rct].INVENTLOCATIONDATAAREAID
    LEFT OUTER JOIN [crt].CHANNELLANGUAGESVIEW clv ON [clv].CHANNEL = [rct].RECID
    LEFT OUTER JOIN [ax].ECORESPRODUCT erp ON [erp].RECID = [it].PRODUCT
    LEFT OUTER JOIN [ax].ECORESPRODUCTTRANSLATION erpt_locale ON [erpt_locale].PRODUCT = [sp].RECORDID AND [erpt_locale].LANGUAGEID = @nvc_Locale
    LEFT OUTER JOIN [ax].ECORESPRODUCTTRANSLATION erpt_p1 ON [erpt_p1].PRODUCT = [sp].RECORDID AND [clv].PRIORITY = 1 AND [erpt_p1].LANGUAGEID = [clv].LANGUAGEID
    LEFT OUTER JOIN [ax].ECORESPRODUCTTRANSLATION erpt_p2 ON [erpt_p2].PRODUCT = [sp].RECORDID AND [clv].PRIORITY = 2 AND [erpt_p2].LANGUAGEID = [clv].LANGUAGEID
    LEFT OUTER JOIN [ax].INVENTTABLEMODULE itm ON [it].ITEMID = [itm].ITEMID AND [it].DATAAREAID = [itm].DATAAREAID AND [itm].MODULETYPE = 2  -- Sales
    LEFT OUTER JOIN [crt].PRODUCTCATALOGRULESVIEW pcrv ON [pcrv].CHANNELID = [rct].RECID AND [pcrv].PRODUCTID = [sp].RECORDID
    OUTER APPLY (SELECT TOP 1 REPLACE(REPLACE(URI, '{LANGUAGEID}', @nvc_Locale), '{PRODUCTNUMBER}', (SELECT [crt].REPLACEUNWANTEDCHARACTERS([erp].DISPLAYPRODUCTNUMBER))) AS URI FROM [crt].GETMEDIALOCATIONBYPRODUCTID(@bi_ChannelId, @bi_CatalogId, [sp].RECORDID, @nvc_Locale) ORDER BY PRIORITY, ISDEFAULT, URI) gpml
    WHERE [rct].RECID = @bi_ChannelId AND (@bi_CatalogId = 0 OR ([pcrv].CATALOGID = @bi_CatalogId AND @dt_ChannelDate BETWEEN [pcrv].VALIDFROM AND [pcrv].VALIDTO))
GO
PRINT N'Altering [crt].[GETNEARBYSTORESFUNCTION]...';


GO

ALTER FUNCTION [crt].[GETNEARBYSTORESFUNCTION]
(
    @bi_ChannelId       BIGINT,
    @f_Latitude         FLOAT,
    @f_Longitude        FLOAT,
    @f_SearchDistance   FLOAT,
    @f_UnitConversion   FLOAT
)
RETURNS @GETNEARBYSTORESRESULT TABLE
(
    [DISTANCE] [FLOAT] NULL,
    [STORENUMBER] [nvarchar](10) NOT NULL,
    [NAME] [nvarchar](100) NOT NULL,
    [CHANNELID] [bigint] NOT NULL,
    [INVENTLOCATION] [nvarchar](10) NOT NULL,
    [ADDRESS] [nvarchar](250) NULL,
    [COUNTRYREGIONID] [nvarchar](10) NULL,
    [ZIPCODE] [nvarchar](10) NULL,
    [STATE] [nvarchar](10) NULL,
    [STATENAME] [nvarchar](60) NULL,
    [COUNTY] [nvarchar](10) NULL,
    [COUNTYNAME] [nvarchar](60) NULL,
    [CITY] [nvarchar](60) NULL,
    [STREET] [nvarchar](250) NULL,
    [LATITUDE] [numeric](32, 16) NULL,
    [LONGITUDE] [numeric](32, 16) NULL,
    [STREETNUMBER] [nvarchar](20) NULL,
    [BUILDINGCOMPLIMENT] [nvarchar](60) NULL,
    [POSTBOX] [nvarchar](20) NULL,
    [DISTRICTNAME] [nvarchar](60) NULL,
    [MODIFIEDDATETIME] [datetime] NULL,
    [RECID] [bigint] NOT NULL,
    [POSTALADDRESSRECID] [bigint] NULL,
    [OPENFROM] [int] DEFAULT(0),
    [OPENTO] [int] DEFAULT(0)
)
AS
BEGIN
    DECLARE @geo_CenterGeolocation geography;
    DECLARE @geo_ChannelGeolocation geography;
    DECLARE @nvc_DataAreaId NVARCHAR(4);

    SELECT @nvc_DataAreaId = rct.INVENTLOCATIONDATAAREAID FROM [ax].RETAILCHANNELTABLE rct WHERE rct.RECID = @bi_ChannelId

    DECLARE @STORES TABLE(CHANNELID bigint NOT NULL PRIMARY KEY);

    INSERT INTO @STORES(CHANNELID)
    SELECT DISTINCT STORE
    FROM [ax].RETAILSTORELOCATORGROUPMEMBER rslgm
    INNER JOIN [ax].RETAILSTORELOCATORGROUP rslg ON rslg.RECID = rslgm.LOCATORGROUP
    INNER JOIN [ax].RETAILSTORELOCATORGROUPOWNER rslgo ON rslgo.LOCATORGROUP = rslg.RECID
    WHERE rslgo.CHANNEL = @bi_ChannelId

    -- 4326 maps to the WGS 84 spatial reference system. Use link to see more info.
    -- http://msdn.microsoft.com/en-us/library/bb964707.aspx
    SET @geo_CenterGeolocation = geography::STGeomFromText('POINT(' + CONVERT(VARCHAR(100), @f_Longitude) + ' ' +  CONVERT(VARCHAR(100), @f_Latitude) + ')', 4326)
    SELECT @geo_ChannelGeolocation = geography::STGeomFromText('POINT(' + CONVERT(VARCHAR(100), sv.LONGITUDE) + ' ' +  CONVERT(VARCHAR(100), sv.LATITUDE) + ')', 4326) FROM [crt].STOREVIEW sv WHERE sv.CHANNELID = @bi_ChannelId
    -- if the channel doesn't have a geo location then calculate a distance from a center point
    IF @geo_ChannelGeolocation IS NULL SET @geo_ChannelGeolocation = @geo_CenterGeolocation

    INSERT @GETNEARBYSTORESRESULT
    SELECT
        (ss.[GEOLOCATION].STDistance(@geo_ChannelGeolocation)) / @f_UnitConversion AS DISTANCE
        ,ss.[STORENUMBER]
        ,ss.[STORENAME]
        ,ss.[CHANNELID]
        ,ss.[INVENTLOCATION]
        ,ss.[STOREADDRESS]
        ,ss.[COUNTRYREGIONID]
        ,ss.[ZIPCODE]
        ,ss.[STATE]
        ,ss.[STATENAME]
        ,ss.[COUNTY]
        ,ss.[COUNTYNAME]
        ,ss.[CITY]
        ,ss.[STREET]
        ,ss.[LATITUDE]
        ,ss.[LONGITUDE]
        ,ss.[STREETNUMBER]
        ,ss.[BUILDINGCOMPLIMENT]
        ,ss.[POSTBOX]
        ,ss.[DISTRICTNAME]
        ,ss.[MODIFIEDDATETIME]
        ,ss.[RECID]
        ,ss.[POSTALADDRESSRECID]
        ,ss.[OPENFROM]
        ,ss.[OPENTO]
    FROM (
        SELECT
            sv.[STORENUMBER],
            sv.[STORENAME],
            sv.[CHANNELID],
            sv.[INVENTLOCATION],
            sv.[STOREADDRESS],
            sv.[COUNTRYREGIONID],
            sv.[ZIPCODE],
            sv.[STATE],
            sv.[STATENAME],
            sv.[COUNTY],
            sv.[COUNTYNAME],
            sv.[CITY],
            sv.[STREET],
            sv.[LATITUDE],
            sv.[LONGITUDE],
            sv.[STREETNUMBER],
            sv.[BUILDINGCOMPLIMENT],
            sv.[POSTBOX],
            sv.[DISTRICTNAME],
            sv.[MODIFIEDDATETIME],
            sv.[RECID],
            sv.[POSTALADDRESSRECID],
            sv.[OPENFROM],
            sv.[OPENTO],
            sv.[DATAAREAID],
            geography::STGeomFromText('POINT(' + CONVERT(VARCHAR(100), sv.LONGITUDE) + ' ' +  CONVERT(VARCHAR(100), sv.LATITUDE) + ')', 4326) AS 'GEOLOCATION'
        FROM crt.STOREVIEW sv
        INNER JOIN @STORES strs ON strs.CHANNELID = sv.CHANNELID
    ) ss
    WHERE
        (@f_SearchDistance = 0 -- if distance is 0 geolocation is not taken into account
            OR ss.GEOLOCATION.STDistance(@geo_CenterGeolocation) <= (@f_SearchDistance * @f_UnitConversion))
        AND ss.DATAAREAID = @nvc_DataAreaId
    ORDER BY DISTANCE

    RETURN
END;
GO
PRINT N'Altering [crt].[CATALOGCHANNELPRODUCTCATEGORYVIEW]...';


GO

-- [Deprecated] [Last used release = CTP-8]

ALTER VIEW [crt].[CATALOGCHANNELPRODUCTCATEGORYVIEW] AS
(
    SELECT
        [rprct].ORIGINID AS CHANNELID,
        [cpc].CATALOG AS CATALOGID,
        [cpc].CATEGORY AS CATEGORYID,
        [cpc].PRODUCT AS PRODUCTID,
        [cpc].INCLUDEEXCLUDETYPE,
        [rpc].PUBLISHEDVALIDFROM AS VALIDFROM,
        [rpc].PUBLISHEDVALIDTO AS VALIDTO
    FROM [ax].RETAILPUBCATALOG [rpc]
    INNER JOIN [crt].CATALOGPRODUCTCATEGORYVIEW cpc ON [rpc].ORIGIN = [cpc].CATALOG
    INNER JOIN [crt].PUBCATALOGCHANNELVIEW pccv ON pccv.[CATALOG] = [rpc].ORIGIN
    INNER JOIN [ax].RETAILPUBRETAILCHANNELTABLE rprct ON [rprct].ORIGINID = pccv.[CHANNEL]
    WHERE [rprct].CATEGORYHIERARCHY = [cpc].CATEGORYHIERARCHY
)
GO
PRINT N'Altering [crt].[PRODUCTCATEGORYRULESVIEW]...';


GO

-- [Deprecated] [Last used release = CTP-8]

ALTER VIEW [crt].[PRODUCTCATEGORYRULESVIEW] AS
(
	-- @bi_CatalogId = 0: Shared categories
    SELECT
        [ncpc].CHANNELID,
        0 AS CATALOGID,
        [ncpc].CATEGORYID AS CATEGORYID,
        [ncpc].PRODUCTID AS PRODUCTID,
        null AS VALIDFROM,
        null AS VALIDTO
    FROM [crt].NONCATALOGPRODUCTCATEGORYVIEW ncpc
    INNER JOIN [ax].RETAILPUBRETAILCHANNELTABLE rprct ON [rprct].ORIGINID = [ncpc].CHANNELID
    WHERE [rprct].CATEGORYHIERARCHY = [ncpc].CATEGORYHIERARCHY

    UNION

    -- @bi_CatalogId != 0: Inherited categories
    SELECT
        [ncpc].CHANNELID,
        [rpcp].CATALOG AS CATALOGID,
        [ncpc].CATEGORYID,
        [ncpc].PRODUCTID,
        [rpc].VALIDFROM,
        [rpc].VALIDTO
    FROM [crt].NONCATALOGPRODUCTCATEGORYVIEW ncpc
    INNER JOIN [ax].RETAILPUBCATALOGPRODUCT rpcp ON [rpcp].PRODUCT = [ncpc].PRODUCTID
    INNER JOIN [ax].RETAILPUBRETAILCHANNELTABLE rprct ON [rprct].ORIGINID = [ncpc].CHANNELID
    INNER JOIN [crt].CATALOGPRODUCTCATEGORYVIEW cpc ON [cpc].CATALOG = [rpcp].CATALOG AND [cpc].PRODUCT = [rpcp].PRODUCT AND [cpc].CATEGORY = [ncpc].CATEGORYID AND [cpc].INCLUDEEXCLUDETYPE = 1  -- Include
    INNER JOIN [ax].RETAILPUBCATALOG rpc ON [rpc].ORIGIN = [cpc].CATALOG
    WHERE [rprct].CATEGORYHIERARCHY = [ncpc].CATEGORYHIERARCHY AND [rpcp].USEHIERARCHY = 1
        AND EXISTS(
            SELECT 1
            FROM [ax].[RETAILPUBCATALOG]
            WHERE ORIGIN = [rpcp].CATALOG AND ENABLESNAPSHOT = 0
        )

    UNION

    -- @bi_CatalogId != 0: Catalog specific categories
    SELECT
        [ccpc].CHANNELID,
        [ccpc].CATALOGID,
        [ccpc].CATEGORYID,
        [ccpc].PRODUCTID,
        [ccpc].VALIDFROM,
        [ccpc].VALIDTO
    FROM [crt].CATALOGCHANNELPRODUCTCATEGORYVIEW ccpc
    WHERE [ccpc].INCLUDEEXCLUDETYPE = 1  -- Include
)
GO
PRINT N'Altering [crt].[ORGUNITSVIEW]...';


GO

ALTER VIEW [crt].[ORGUNITSVIEW] AS
(
    SELECT
        sv.RECID,
        sv.TAXGROUP,
        sv.STORENUMBER,
        sv.STORENAME,
        sv.STOREADDRESS,
        sv.USECUSTOMERBASEDTAX,
        sv.USEDESTINATIONBASEDTAX,
        sv.FUNCTIONALITYPROFILE,
        sv.CURRENCY,
        sv.SHIPPINGINVENTLOCATION,
        sv.EMAILRECEIPTPROFILEID,
        sv.LATITUDE,
        sv.LONGITUDE,
        sv.EVENTNOTIFICATIONPROFILEID,
        sv.CHANNELTYPE,
        sv.INVENTLOCATION,
        sv.DEFAULTCUSTACCOUNT,
        sv.POSTALADDRESSRECID,
        sv.ISPUBLISHED
    FROM [crt].STOREVIEW sv
)
GO
PRINT N'Refreshing [crt].[GETCATEGORYPRODUCTATTRIBUTEGROUPDEFAULTVALUE]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[GETCATEGORYPRODUCTATTRIBUTEGROUPDEFAULTVALUE]';


GO
PRINT N'Refreshing [crt].[GETCATEGORYPRODUCTATTRIBUTEVALUE]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[GETCATEGORYPRODUCTATTRIBUTEVALUE]';


GO
PRINT N'Refreshing [crt].[GETPUBPRODUCTATTRIBUTEVALUE]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[GETPUBPRODUCTATTRIBUTEVALUE]';


GO
PRINT N'Refreshing [crt].[PRODUCTATTRIBUTESVIEW]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[PRODUCTATTRIBUTESVIEW]';


GO
PRINT N'Refreshing [crt].[GETPUBPRODUCTATTRIBUTEVALUEEXPANDED]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[GETPUBPRODUCTATTRIBUTEVALUEEXPANDED]';


GO
PRINT N'Creating [crt].[PRODUCTIDSTOUNITSOFMEASUREVIEW]...';


GO
CREATE VIEW [crt].PRODUCTIDSTOUNITSOFMEASUREVIEW
AS
(
    -- Retrieve default unit of measure.
    SELECT
        [it].PRODUCT,
        [it].DATAAREAID,
        [uom].RECID,
        [uom].SYMBOL,
        [uom].DECIMALPRECISION,
        [uom].LANGUAGEID,
        [uom].[DESCRIPTION]
    FROM [ax].INVENTTABLEMODULE itm
        INNER JOIN [ax].INVENTTABLE it ON [it].ITEMID = [itm].ITEMID AND [it].DATAAREAID = [itm].DATAAREAID
        INNER JOIN [crt].UNITOFMEASUREVIEW uom ON [uom].SYMBOL = [itm].UNITID
        WHERE [itm].MODULETYPE = 2  -- Sale

    UNION ALL

    -- Retrieve all unit of measures to which a conversion is possible.
    SELECT
        [it].PRODUCT,
        [it].DATAAREAID,
        [uom_to].RECID,
        [uom_to].SYMBOL,
        [uom_to].DECIMALPRECISION,
        [uom_to].LANGUAGEID,
        [uom_to].[DESCRIPTION]
    FROM [ax].INVENTTABLEMODULE itm
        INNER JOIN [ax].INVENTTABLE it ON [it].ITEMID = [itm].ITEMID AND [it].DATAAREAID = [itm].DATAAREAID
        INNER JOIN [ax].UNITOFMEASURE uom_from ON [uom_from].SYMBOL = [itm].UNITID
            INNER JOIN [ax].UNITOFMEASURECONVERSION uomc ON [uomc].FROMUNITOFMEASURE = [uom_from].RECID AND ([uomc].PRODUCT = [it].PRODUCT OR [uomc].PRODUCT = 0)
                INNER JOIN [crt].UNITOFMEASUREVIEW uom_to ON [uom_to].RECID = [uomc].TOUNITOFMEASURE
        WHERE [itm].MODULETYPE = 2  -- Sale
)
GO
PRINT N'Refreshing [crt].[GETLIVEPRODUCTATTRIBUTEVALUE]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[GETLIVEPRODUCTATTRIBUTEVALUE]';


GO
PRINT N'Refreshing [crt].[GETLIVEPRODUCTATTRIBUTEVALUEEXPANDED]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[GETLIVEPRODUCTATTRIBUTEVALUEEXPANDED]';


GO
PRINT N'Refreshing [crt].[GETPRODUCTLANGUAGES]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[GETPRODUCTLANGUAGES]';


GO
PRINT N'Refreshing [crt].[SEARCHPRODUCTSBYKEYWORD]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[SEARCHPRODUCTSBYKEYWORD]';


GO
PRINT N'Refreshing [crt].[GETPRODUCTATTRIBUTEVALUES]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[GETPRODUCTATTRIBUTEVALUES]';


GO
PRINT N'Refreshing [crt].[GETPRODUCTREFINERVALUES]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[GETPRODUCTREFINERVALUES]';


GO
PRINT N'Refreshing [crt].[REFINEPRODUCTS]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[REFINEPRODUCTS]';


GO
PRINT N'Altering [crt].[FINDPRODUCTSBYKEYWORD]...';


GO

ALTER FUNCTION [crt].[FINDPRODUCTSBYKEYWORD]
(
    @tvp_QueryResultSettings [crt].[QUERYRESULTSETTINGSTABLETYPE] READONLY,
    @bi_ChannelId            BIGINT,
    @dt_ChannelDate          DATE,
    @nvc_SearchCondition     NVARCHAR(4000),
    @nvc_LanguageId          NVARCHAR(7)
)
RETURNS @IDS TABLE
(
    RECID BIGINT
)
AS
BEGIN
    DECLARE @tvp_DummyId [crt].RECORDIDTABLETYPE
    DECLARE @tvp_SearchedIds [crt].RECORDIDTABLETYPE

    INSERT INTO @tvp_DummyId VALUES (0)  -- Insert dummy record to satisfy API contract
    
    INSERT INTO @tvp_SearchedIds(RECID)
    -- Return only Master/Standalone product ids as required by paging and assortments
    SELECT DISTINCT COALESCE([pv].PRODUCTMASTER, [spk].RECID) AS RECID
    FROM [crt].SEARCHPRODUCTSBYKEYWORD(@bi_ChannelId, @dt_ChannelDate, @nvc_SearchCondition, @nvc_LanguageId, @tvp_DummyId) spk
    LEFT OUTER JOIN [ax].ECORESDISTINCTPRODUCTVARIANT pv ON [pv].RECID = [spk].RECID

    ;WITH ProductSearchResult (RECID, ROWNUM)
    AS
    (
        SELECT DISTINCT
            [gap].PRODUCTID AS RECID,
            ROW_NUMBER() OVER (ORDER BY [gap].PRODUCTID) AS ROWNUM
        FROM [crt].GETASSORTEDPRODUCTS(@bi_ChannelId, @dt_ChannelDate, 0 /* @b_IsForwardLooking */, 1 /* @b_SkipVariantExpansion */, 1 /* @b_ProductIdsPassed */, @tvp_SearchedIds) gap
    )

    INSERT @IDS(RECID)
    SELECT
        RECID
    FROM ProductSearchResult
    INNER JOIN @tvp_QueryResultSettings settings ON [settings].[TOP] = 0 OR ROWNUM BETWEEN ([settings].[SKIP] + 1) AND ([settings].[SKIP] + [settings].[TOP])

    RETURN;
END
GO
PRINT N'Refreshing [crt].[GETPRODUCTATTRIBUTEVALUECOMBINATIONS]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[GETPRODUCTATTRIBUTEVALUECOMBINATIONS]';


GO
PRINT N'Altering [crt].[REFINEANDSEARCHPRODUCTSBYCATEGORY]...';


GO

ALTER FUNCTION [crt].[REFINEANDSEARCHPRODUCTSBYCATEGORY]
(
    @tvp_QueryResultSettings    [crt].[QUERYRESULTSETTINGSTABLETYPE] READONLY,
    @bi_ChannelId               BIGINT,
    @bi_CatalogId               BIGINT,
    @dt_ChannelDate             DATE,
    @i_CategoryLevels           INT,
    @nvc_LanguageId             NVARCHAR(7),
    @tvp_CategoryIds            [crt].[RECORDIDTABLETYPE] READONLY,
    @tvp_RefinerValues          [crt].[PRODUCTREFINERVALUETABLETYPE] READONLY
)    
RETURNS @IDS TABLE
(
    RECID BIGINT
)
AS
BEGIN
    DECLARE @tvp_SearchedProducts   [crt].[RECORDIDTABLETYPE]
    DECLARE @tvp_DummyId            [crt].[RECORDIDTABLETYPE]
    DECLARE @tvp_SearchSettings     [crt].[QUERYRESULTSETTINGSTABLETYPE]

    -- No paging while retrieving product ids because refined products have to be calculated over the entire span of result set
    INSERT INTO @tvp_SearchSettings VALUES(0, 0, 0, '', 0)

    -- Insert dummy record to satisfy API contract
    INSERT INTO @tvp_DummyId VALUES (0)

    -- Search products
    INSERT INTO @tvp_SearchedProducts(RECID)
    SELECT TOP 1000 RECID  -- We do not support refining products beyond 1,000 to avoid performance degradation
    FROM [crt].[SEARCHPRODUCTSBYCATEGORY](@tvp_SearchSettings, @bi_ChannelId, @bi_CatalogId, @dt_ChannelDate, @i_CategoryLevels, @tvp_CategoryIds)

    -- Retrieve product variants so their attributes can be used for product refinement
    INSERT INTO @tvp_SearchedProducts
    SELECT
        [erdpv].RECID
    FROM [ax].ECORESDISTINCTPRODUCTVARIANT erdpv
    INNER JOIN @tvp_SearchedProducts ids ON [erdpv].PRODUCTMASTER = [ids].RECID

    INSERT INTO @IDS (RECID)
    SELECT DISTINCT
        COALESCE(pv2.PRODUCTMASTER, pv.PRODUCTMASTER, ids.PRODUCT) AS RECID
    FROM [crt].[REFINEPRODUCTS](@bi_ChannelId, @bi_CatalogId, @dt_ChannelDate, @nvc_LanguageId, @tvp_SearchedProducts, @tvp_RefinerValues, @tvp_DummyId) [ids]
    LEFT OUTER JOIN [ax].ECORESDISTINCTPRODUCTVARIANT pv ON [pv].RECID = [ids].PRODUCT
    LEFT OUTER JOIN [ax].ECORESDISTINCTPRODUCTVARIANT pv2 ON [pv2].PRODUCTMASTER = [ids].PRODUCT
    ORDER BY 1  -- meaning sort the first column being returned
    OFFSET (SELECT [SKIP] FROM @tvp_QueryResultSettings) ROWS
    FETCH NEXT (SELECT [TOP] FROM @tvp_QueryResultSettings) ROWS ONLY

    RETURN;
END
GO
PRINT N'Altering [crt].[GETRETAILDISCOUNTSFORITEMS]...';


GO

ALTER PROCEDURE [crt].[GETRETAILDISCOUNTSFORITEMS]
    @tvp_QueryResultSettings        [crt].[QUERYRESULTSETTINGSTABLETYPE] READONLY,
    @bi_ChannelId                   BIGINT,
    @items                          [crt].[ITEMVARIANTINVENTDIMTABLETYPE] READONLY,
    @priceGroups                    [crt].[PRICEGROUPTABLETYPE] READONLY,
    @nvc_CurrencyCode               NVARCHAR(3),
    @MinDate                        DATE,
    @MaxDate                        DATE
AS
BEGIN
    SET NOCOUNT ON

    DECLARE @NoDate DATE = [crt].GETMINAXDATE();
    DECLARE @nvc_DataAreaId NVARCHAR(4);
    SELECT @nvc_DataAreaId = INVENTLOCATIONDATAAREAID from [ax].RETAILCHANNELTABLE where RECID = @bi_ChannelId

    -- fetch price group record ids or lookup if missing
    DECLARE @priceGroupRecIds TABLE (PRICEGROUP BIGINT);
    INSERT INTO @priceGroupRecIds (PRICEGROUP)
    SELECT (CASE(pa.PRICEGROUP)
        WHEN 0
        THEN pg.RECID
        ELSE pa.PRICEGROUP
        END)
    FROM @priceGroups AS pa
    INNER JOIN [ax].PRICEDISCGROUP pg ON pg.GROUPID = pa.GROUPID AND DATAAREAID = @nvc_DataAreaId

    -- resolve item Ids and dimensions into product and variant Ids
    DECLARE @itemIds TABLE (ITEMID nvarchar(20), VARIANTINVENTDIMID nvarchar(20), PRODUCT bigint, DISTINCTPRODUCTVARIANT bigint)
    INSERT INTO @itemIds
    SELECT
        it.ITEMID,
        it.VARIANTINVENTDIMID,
        ISNULL(i.PRODUCT,0),
        ISNULL(idc.DISTINCTPRODUCTVARIANT,0)
    FROM @items AS it
    LEFT JOIN [ax].INVENTTABLE i ON i.ITEMID = it.ITEMID AND i.DATAAREAID = @nvc_DataAreaId
    LEFT JOIN [ax].INVENTDIMCOMBINATION idc ON idc.ITEMID = it.ITEMID AND idc.INVENTDIMID = it.VARIANTINVENTDIMID AND idc.DATAAREAID = @nvc_DataAreaId

    DECLARE @itemDiscounts TABLE (OFFERID nvarchar(20), LINENUM numeric(32,16), ITEMID nvarchar(20), INVENTDIMID nvarchar(20))

	-- get discount and lines by RETAILGROUPMEMBERLINE.product
    INSERT INTO @itemDiscounts
    SELECT pd.OFFERID,
        pdl.LINENUM,
        it.ITEMID,
        it.VARIANTINVENTDIMID AS INVENTDIMID
    FROM [ax].[RETAILPERIODICDISCOUNTLINE] pdl
    INNER JOIN [ax].RETAILGROUPMEMBERLINE rgl ON pdl.RETAILGROUPMEMBERLINE = rgl.RECID AND rgl.VARIANT = 0 AND rgl.PRODUCT != 0
    INNER JOIN @itemIds it ON rgl.PRODUCT = it.PRODUCT
	INNER JOIN [ax].[RETAILPERIODICDISCOUNT] pd on pdl.OFFERID = pd.OFFERID 
		and pd.STATUS = 1
        AND pd.PERIODICDISCOUNTTYPE != 3 -- don't fetch price adjustments
        AND pd.CURRENCYCODE = @nvc_CurrencyCode
		AND pd.DATAAREAID = @nvc_DataAreaId
        AND (pd.VALIDFROM <= @MinDate OR pd.VALIDFROM <= @NoDate)
        AND (pd.VALIDTO >= @MaxDate OR pd.VALIDTO <= @NoDate)
    INNER JOIN [ax].RETAILDISCOUNTPRICEGROUP rdpg on rdpg.OFFERID = pd.OFFERID AND rdpg.DATAAREAID = @nvc_DataAreaId
    WHERE pdl.DATAAREAID = @nvc_DataAreaId 
       AND EXISTS (SELECT * FROM @priceGroupRecIds pg WHERE rdpg.PRICEDISCGROUP = pg.PRICEGROUP)

	-- get discount and lines by RETAILGROUPMEMBERLINE.variant.
	INSERT INTO @itemDiscounts
    SELECT pd.OFFERID,
        pdl.LINENUM,
        it.ITEMID,
        it.VARIANTINVENTDIMID AS INVENTDIMID
    FROM [ax].[RETAILPERIODICDISCOUNTLINE] pdl
    INNER JOIN [ax].RETAILGROUPMEMBERLINE rgl WITH(INDEX([IX_RETAILGROUPMEMBERLINE_PVC])) ON pdl.RETAILGROUPMEMBERLINE = rgl.RECID AND rgl.VARIANT != 0
    INNER JOIN @itemIds it ON rgl.VARIANT = it.DISTINCTPRODUCTVARIANT
	INNER JOIN [ax].[RETAILPERIODICDISCOUNT] pd on pdl.OFFERID = pd.OFFERID 
		and pd.STATUS = 1
        AND pd.PERIODICDISCOUNTTYPE != 3 -- don't fetch price adjustments
        AND pd.CURRENCYCODE = @nvc_CurrencyCode
        AND pd.DATAAREAID = @nvc_DataAreaId
        AND (pd.VALIDFROM <= @MinDate OR pd.VALIDFROM <= @NoDate)
        AND (pd.VALIDTO >= @MaxDate OR pd.VALIDTO <= @NoDate)
    INNER JOIN [ax].RETAILDISCOUNTPRICEGROUP rdpg on rdpg.OFFERID = pd.OFFERID AND rdpg.DATAAREAID = @nvc_DataAreaId
    WHERE pdl.DATAAREAID = @nvc_DataAreaId 
       AND EXISTS (SELECT * FROM @priceGroupRecIds pg WHERE rdpg.PRICEDISCGROUP = pg.PRICEGROUP)

    -- get discount and lines by RETAILGROUPMEMBERLINE.category, product only.
	INSERT INTO @itemDiscounts
    SELECT pd.OFFERID,
        pdl.LINENUM,
        it.ITEMID,
        it.VARIANTINVENTDIMID AS INVENTDIMID
	FROM [ax].[RETAILPERIODICDISCOUNTLINE] pdl
    INNER JOIN [ax].RETAILGROUPMEMBERLINE rgl ON pdl.RETAILGROUPMEMBERLINE = rgl.RECID and rgl.PRODUCT = 0 and rgl.VARIANT = 0 and rgl.CATEGORY != 0
    INNER JOIN [ax].[RETAILCATEGORYCONTAINMENTLOOKUP] rccl ON rccl.CATEGORY = rgl.CATEGORY
    INNER JOIN [ax].[ECORESPRODUCTCATEGORY] pc on pc.CATEGORY = rccl.CONTAINEDCATEGORY
    INNER JOIN @itemIds it ON pc.PRODUCT = it.PRODUCT
	INNER JOIN [ax].[RETAILPERIODICDISCOUNT] pd on pdl.OFFERID = pd.OFFERID
		and pd.STATUS = 1
        AND pd.PERIODICDISCOUNTTYPE != 3 -- don't fetch price adjustments
        AND pd.CURRENCYCODE = @nvc_CurrencyCode
		AND pd.DATAAREAID = @nvc_DataAreaId
        AND (pd.VALIDFROM <= @MinDate OR pd.VALIDFROM <= @NoDate)
        AND (pd.VALIDTO >= @MaxDate OR pd.VALIDTO <= @NoDate)
    INNER JOIN [ax].RETAILDISCOUNTPRICEGROUP rdpg on rdpg.OFFERID = pd.OFFERID AND rdpg.DATAAREAID = @nvc_DataAreaId
    WHERE pdl.DATAAREAID = @nvc_DataAreaId
       AND EXISTS (SELECT * FROM @priceGroupRecIds pg WHERE rdpg.PRICEDISCGROUP = pg.PRICEGROUP)

    -- get discount and lines by RETAILGROUPMEMBERLINE.category, variant only.
	INSERT INTO @itemDiscounts
    SELECT pd.OFFERID,
        pdl.LINENUM,
        it.ITEMID,
        it.VARIANTINVENTDIMID AS INVENTDIMID
    FROM [ax].[RETAILPERIODICDISCOUNTLINE] pdl
    INNER JOIN [ax].RETAILGROUPMEMBERLINE rgl ON pdl.RETAILGROUPMEMBERLINE = rgl.RECID and rgl.PRODUCT = 0 and rgl.VARIANT = 0 and rgl.CATEGORY != 0
    INNER JOIN [ax].[RETAILCATEGORYCONTAINMENTLOOKUP] rccl ON rccl.CATEGORY = rgl.CATEGORY
    INNER JOIN [crt].[RETAILSPECIALCATEGORYVARIANTVIEW] scv on scv.CATEGORY = rccl.CONTAINEDCATEGORY
    INNER JOIN @itemIds it ON scv.PRODUCT = it.DISTINCTPRODUCTVARIANT
	INNER JOIN [ax].[RETAILPERIODICDISCOUNT] pd on pdl.OFFERID = pd.OFFERID
		and pd.STATUS = 1
        AND pd.PERIODICDISCOUNTTYPE != 3 -- don't fetch price adjustments
        AND pd.CURRENCYCODE = @nvc_CurrencyCode
		AND pd.DATAAREAID = @nvc_DataAreaId
        AND (pd.VALIDFROM <= @MinDate OR pd.VALIDFROM <= @NoDate)
        AND (pd.VALIDTO >= @MaxDate OR pd.VALIDTO <= @NoDate)
    INNER JOIN [ax].RETAILDISCOUNTPRICEGROUP rdpg on rdpg.OFFERID = pd.OFFERID AND rdpg.DATAAREAID = @nvc_DataAreaId
    WHERE pdl.DATAAREAID = @nvc_DataAreaId
       AND EXISTS (SELECT * FROM @priceGroupRecIds pg WHERE rdpg.PRICEDISCGROUP = pg.PRICEGROUP)

    SELECT DISTINCT
        pd.OFFERID,
        pd.NAME,
        pd.PERIODICDISCOUNTTYPE,
        pd.CONCURRENCYMODE,
		pd.CURRENCYCODE,
		pd.PRICINGPRIORITYNUMBER,
        pd.ISDISCOUNTCODEREQUIRED,
        pd.VALIDATIONPERIODID,
        pd.DATEVALIDATIONTYPE,
        pd.VALIDFROM,
        pd.VALIDTO,
        pd.DISCOUNTTYPE,
        pd.DEALPRICEVALUE,
        pd.DISCOUNTPERCENTVALUE,
        pd.DISCOUNTAMOUNTVALUE,
        pd.NOOFLEASTEXPENSIVELINES,
        pd.NUMBEROFTIMESAPPLICABLE,
        pd.LEASTEXPENSIVEMODE,
        pd.LINENUM,
        pd.DISCOUNTPERCENTORVALUE,

        ISNULL(mmol.LINEGROUP,'') AS LINEGROUP,
        ISNULL(mmol.DISCOUNTTYPE,'') AS MIXANDMATCHLINEDISCOUNTTYPE,
        ISNULL(mmol.NUMBEROFITEMSNEEDED,'') AS NUMBEROFITEMSNEEDED,

        ISNULL(dol.DISCOUNTMETHOD,0) AS DISCOUNTMETHOD,
        ISNULL(dol.DISCAMOUNT,0) AS DISCAMOUNT,
        ISNULL(dol.DISCPCT, 0) AS DISCPCT,
        ISNULL(dol.OFFERPRICE, 0) AS OFFERPRICE,

        ISNULL(uom.SYMBOL,'') AS SYMBOL,

        ISNULL(pd.COUNTNONDISCOUNTITEMS, 0) AS COUNTNONDISCOUNTITEMS,

        itemd.ITEMID,
        itemd.INVENTDIMID
    FROM [crt].RETAILPERIODICDISCOUNTSFLATTENEDVIEW pd
    INNER JOIN @itemDiscounts itemd on itemd.OFFERID = pd.OFFERID and itemd.LINENUM = pd.LINENUM
    LEFT JOIN [ax].UNITOFMEASURE uom ON uom.RECID = pd.UNITOFMEASURE
    LEFT JOIN [ax].RETAILDISCOUNTLINEMIXANDMATCH mmol ON pd.DISCOUNTLINEID = mmol.RECID AND pd.DATAAREAID = mmol.DATAAREAID
    LEFT JOIN [ax].RETAILDISCOUNTLINEOFFER dol ON pd.DISCOUNTLINEID = dol.RECID AND pd.DATAAREAID = dol.DATAAREAID
    ORDER BY pd.OFFERID, pd.LINENUM
    OFFSET (SELECT TOP 1 [SKIP] FROM @tvp_QueryResultSettings) ROWS
    FETCH NEXT (SELECT TOP 1 [TOP] FROM @tvp_QueryResultSettings) ROWS ONLY
END;
GO
PRINT N'Creating [crt].[INSERTCUSTOMERORDERTRANSACTION]...';


GO

CREATE PROCEDURE [crt].[INSERTCUSTOMERORDERTRANSACTION]
    @bi_channelId           BIGINT,
    @TVP_CUSTOMERORDERTRANS [crt].[CUSTOMERORDERTRANSACTIONTABLETYPE]          READONLY
AS
BEGIN

    SET NOCOUNT ON;

    DECLARE @i_ReturnCode               INT;
    DECLARE @i_TransactionIsOurs        INT;
    DECLARE @i_Error                    INT;

    -- initializes the return code and assume the transaction is not ours by default
    SET @i_ReturnCode = 0;
    SET @i_TransactionIsOurs = 0;

    IF @@TRANCOUNT = 0
    BEGIN
        BEGIN TRANSACTION;

        SELECT @i_Error = @@ERROR;
        IF @i_Error <> 0
        BEGIN
            SET @i_ReturnCode = @i_Error;
            GOTO exit_label;
        END;

        SET @i_TransactionIsOurs = 1;
    END;

    -- Perform Insert
    INSERT INTO [crt].CUSTOMERORDERTRANSACTION
    (
	[CHANNEL],
	[STORE],
	[TERMINAL],
	[TRANSACTIONID],
	[DATAAREAID],
	[CANCELLATIONCHARGE],
	[DEPOSITOVERRIDE],
	[REQUIREDDEPOSIT],
	[CALCULATEDDEPOSIT],
	[PREPAYMENTPAID],
	[PREPAYMENTINVOICED],
	[QUOTEEXPIRATIONDATE],
	[CUSTOMERORDERTYPE],
	[CUSTOMERORDERMODE]
    )
    SELECT
	@bi_channelId,
	[STORE],
	[TERMINAL],
	[TRANSACTIONID],
	[DATAAREAID],
	[CANCELLATIONCHARGE],
	[DEPOSITOVERRIDE],
	[REQUIREDDEPOSIT],
	[CALCULATEDDEPOSIT],
	[PREPAYMENTPAID],
	[PREPAYMENTINVOICED],
	[QUOTEEXPIRATIONDATE],
	[CUSTOMERORDERTYPE],
	[CUSTOMERORDERMODE]
    FROM @TVP_CUSTOMERORDERTRANS AS Source;

    SELECT @i_Error = @@ERROR;
    IF @i_Error <> 0
    BEGIN
        SET @i_ReturnCode = @i_Error;
        GOTO exit_label;
    END;

    IF @i_TransactionIsOurs = 1
    BEGIN
        COMMIT TRANSACTION;

        SET @i_Error = @@ERROR;
        IF @i_Error <> 0
        BEGIN
            SET @i_ReturnCode = @i_Error;
            GOTO exit_label;
        END;

        SET @i_TransactionIsOurs = 0;
    END;

exit_label:

    IF @i_TransactionIsOurs = 1
    BEGIN
        ROLLBACK TRANSACTION;
    END;

    RETURN @i_ReturnCode;
END;
GO
PRINT N'Altering [crt].[SAVEPRODUCTDATA]...';


GO

ALTER PROCEDURE [crt].[SAVEPRODUCTDATA]
    @bi_ChannelId       BIGINT,
    @xml_ProductData    XML
AS
BEGIN
    SET NOCOUNT ON

    DECLARE @i_ReturnCode               INT;
    DECLARE @i_TransactionIsOurs        INT;
    DECLARE @i_Error                    INT;
    DECLARE @nvc_DataAreaId             NVARCHAR(4);
 
    -- initializes the return code and assume the transaction is not ours by default
    SET @i_ReturnCode = 0;
    SET @i_TransactionIsOurs = 0;

    IF @@TRANCOUNT = 0
    BEGIN
        BEGIN TRANSACTION;

        SELECT @i_Error = @@ERROR;
        IF @i_Error <> 0
        BEGIN
            SET @i_ReturnCode = @i_Error;
            GOTO exit_label;
        END;

        SET @i_TransactionIsOurs = 1;
    END;

    -- Resolve the data area from the specified channel identifier.
    SELECT @nvc_DataAreaId = rct.[INVENTLOCATIONDATAAREAID] FROM [ax].RETAILCHANNELTABLE rct WHERE [rct].RECID = @bi_ChannelId

	-- Generated stats: 59 distinct tables spanning 61 unique paths.

	-- InventTable
	PRINT 'Upserting into [ax].INVENTTABLE ..'
	MERGE [ax].INVENTTABLE AS target
	USING (
		SELECT DISTINCT
			COALESCE(T.c.value('(Product)[1]', 'BIGINT'), T.c.value('(../RecId)[1]', 'BIGINT')) AS [PRODUCT],
			CASE T.c.value('(ABCContributionMargin)[1]', 'NVARCHAR(4000)')
				WHEN 'None' THEN 0
				WHEN 'A' THEN 1
				WHEN 'B' THEN 2
				WHEN 'C' THEN 3
				ELSE 0
			END AS [ABCCONTRIBUTIONMARGIN],
			CASE T.c.value('(ABCRevenue)[1]', 'NVARCHAR(4000)')
				WHEN 'None' THEN 0
				WHEN 'A' THEN 1
				WHEN 'B' THEN 2
				WHEN 'C' THEN 3
				ELSE 0
			END AS [ABCREVENUE],
			CASE T.c.value('(ABCTieUp)[1]', 'NVARCHAR(4000)')
				WHEN 'None' THEN 0
				WHEN 'A' THEN 1
				WHEN 'B' THEN 2
				WHEN 'C' THEN 3
				ELSE 0
			END AS [ABCTIEUP],
			CASE T.c.value('(ABCValue)[1]', 'NVARCHAR(4000)')
				WHEN 'None' THEN 0
				WHEN 'A' THEN 1
				WHEN 'B' THEN 2
				WHEN 'C' THEN 3
				ELSE 0
			END AS [ABCVALUE],
			ISNULL(T.c.value('(AltItemId)[1]', 'NVARCHAR(20)'), '') AS [ALTITEMID],
			ISNULL(T.c.value('(ApproxTaxValue_BR)[1]', 'NUMERIC(32, 16)'), '0') AS [APPROXTAXVALUE_BR],
			ISNULL(T.c.value('(BatchNumGroupId)[1]', 'NVARCHAR(10)'), '') AS [BATCHNUMGROUPID],
			CASE T.c.value('(CostModel)[1]', 'NVARCHAR(4000)')
				WHEN 'No' THEN 0
				WHEN 'Yes' THEN 1
				ELSE 0
			END AS [COSTMODEL],
			ISNULL(T.c.value('(Density)[1]', 'NUMERIC(32, 16)'), '0') AS [DENSITY],
			ISNULL(T.c.value('(Depth)[1]', 'NUMERIC(32, 16)'), '0') AS [DEPTH],
			ISNULL(T.c.value('(ExceptionCode_BR)[1]', 'NVARCHAR(10)'), '') AS [EXCEPTIONCODE_BR],
			ISNULL(T.c.value('(grossDepth)[1]', 'NUMERIC(32, 16)'), '0') AS [GROSSDEPTH],
			ISNULL(T.c.value('(grossHeight)[1]', 'NUMERIC(32, 16)'), '0') AS [GROSSHEIGHT],
			ISNULL(T.c.value('(grossWidth)[1]', 'NUMERIC(32, 16)'), '0') AS [GROSSWIDTH],
			ISNULL(T.c.value('(Height)[1]', 'NUMERIC(32, 16)'), '0') AS [HEIGHT],
			ISNULL(T.c.value('(InventProductType_BR)[1]', 'NVARCHAR(10)'), '') AS [INVENTPRODUCTTYPE_BR],
			ISNULL(T.c.value('(ItemBuyerGroupId)[1]', 'NVARCHAR(10)'), '') AS [ITEMBUYERGROUPID],
			CASE T.c.value('(ItemDimCostPrice)[1]', 'NVARCHAR(4000)')
				WHEN 'No' THEN 0
				WHEN 'Yes' THEN 1
				ELSE 0
			END AS [ITEMDIMCOSTPRICE],
			ISNULL(T.c.value('(ItemId)[1]', 'NVARCHAR(20)'), '') AS [ITEMID],
			CASE T.c.value('(ItemType)[1]', 'NVARCHAR(4000)')
				WHEN 'Item' THEN 0
				WHEN 'DEL_BOM' THEN 1
				WHEN 'Service' THEN 2
				WHEN 'DEL_Formula' THEN 3
				WHEN 'DEL_Asset_RU' THEN 4
				ELSE 0
			END AS [ITEMTYPE],
			ISNULL(T.c.value('(NameAlias)[1]', 'NVARCHAR(20)'), '') AS [NAMEALIAS],
			ISNULL(T.c.value('(NetWeight)[1]', 'NUMERIC(32, 16)'), '0') AS [NETWEIGHT],
			ISNULL(T.c.value('(PrimaryVendorId)[1]', 'NVARCHAR(20)'), '') AS [PRIMARYVENDORID],
			ISNULL(T.c.value('(ProdGroupId)[1]', 'NVARCHAR(10)'), '') AS [PRODGROUPID],
			ISNULL(T.c.value('(ProdPoolId)[1]', 'NVARCHAR(10)'), '') AS [PRODPOOLID],
			ISNULL(T.c.value('(projCategoryId)[1]', 'NVARCHAR(30)'), '') AS [PROJCATEGORYID],
			ISNULL(T.c.value('(PropertyId)[1]', 'NVARCHAR(10)'), '') AS [PROPERTYID],
			CASE T.c.value('(PurchModel)[1]', 'NVARCHAR(4000)')
				WHEN 'No' THEN 0
				WHEN 'Yes' THEN 1
				ELSE 0
			END AS [PURCHMODEL],
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(ReqGroupId)[1]', 'NVARCHAR(10)'), '') AS [REQGROUPID],
			ISNULL(T.c.value('(SalesContributionRatio)[1]', 'NUMERIC(32, 16)'), '0') AS [SALESCONTRIBUTIONRATIO],
			CASE T.c.value('(SalesModel)[1]', 'NVARCHAR(4000)')
				WHEN 'None' THEN 0
				WHEN 'Contributionratio' THEN 1
				WHEN 'PercentMarkup' THEN 2
				ELSE 0
			END AS [SALESMODEL],
			ISNULL(T.c.value('(SalesPercentMarkup)[1]', 'NUMERIC(32, 16)'), '0') AS [SALESPERCENTMARKUP],
			CASE T.c.value('(SalesPriceModelBasic)[1]', 'NVARCHAR(4000)')
				WHEN 'PurchPrice' THEN 0
				WHEN 'CostPrice' THEN 1
				ELSE 0
			END AS [SALESPRICEMODELBASIC],
			ISNULL(T.c.value('(SerialNumGroupId)[1]', 'NVARCHAR(10)'), '') AS [SERIALNUMGROUPID],
			ISNULL(T.c.value('(sortCode)[1]', 'INT'), '0') AS [SORTCODE],
			ISNULL(T.c.value('(TaraWeight)[1]', 'NUMERIC(32, 16)'), '0') AS [TARAWEIGHT],
			CASE T.c.value('(TaxationOrigin_BR)[1]', 'NVARCHAR(4000)')
				WHEN 'National' THEN 0
				WHEN 'DirectImport' THEN 1
				WHEN 'Import' THEN 2
				WHEN 'NationalImportContent' THEN 3
				WHEN 'LegalAdjusts' THEN 4
				WHEN 'NationalLessThan40ImportContent' THEN 5
				WHEN 'ImportNoSimilar' THEN 6
				WHEN 'ImportAcquiredInRegion' THEN 7
				WHEN 'NationalGreaterThan70ImportContent' THEN 8
				ELSE 0
			END AS [TAXATIONORIGIN_BR],
			ISNULL(T.c.value('(TaxFiscalClassification_BR)[1]', 'NVARCHAR(10)'), '') AS [TAXFISCALCLASSIFICATION_BR],
			ISNULL(T.c.value('(TaxServiceCode_BR)[1]', 'NVARCHAR(10)'), '') AS [TAXSERVICECODE_BR],
			ISNULL(T.c.value('(UnitVolume)[1]', 'NUMERIC(32, 16)'), '0') AS [UNITVOLUME],
			CASE T.c.value('(UseAltItemId)[1]', 'NVARCHAR(4000)')
				WHEN 'Never' THEN 0
				WHEN 'InventWhen0' THEN 1
				WHEN 'Always' THEN 2
				ELSE 0
			END AS [USEALTITEMID],
			ISNULL(T.c.value('(Width)[1]', 'NUMERIC(32, 16)'), '0') AS [WIDTH],
			DATEDIFF(second, '00:00:00', T.c.value('(WMSPickingQtyTime)[1]', 'time')) AS [WMSPICKINGQTYTIME],
			@nvc_DataAreaId AS [DATAAREAID]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable') AS T(c)
	) AS source ([PRODUCT], [ABCCONTRIBUTIONMARGIN], [ABCREVENUE], [ABCTIEUP], [ABCVALUE], [ALTITEMID], [APPROXTAXVALUE_BR], [BATCHNUMGROUPID], [COSTMODEL], [DENSITY], [DEPTH], [EXCEPTIONCODE_BR], [GROSSDEPTH], [GROSSHEIGHT], [GROSSWIDTH], [HEIGHT], [INVENTPRODUCTTYPE_BR], [ITEMBUYERGROUPID], [ITEMDIMCOSTPRICE], [ITEMID], [ITEMTYPE], [NAMEALIAS], [NETWEIGHT], [PRIMARYVENDORID], [PRODGROUPID], [PRODPOOLID], [PROJCATEGORYID], [PROPERTYID], [PURCHMODEL], [RECID], [REQGROUPID], [SALESCONTRIBUTIONRATIO], [SALESMODEL], [SALESPERCENTMARKUP], [SALESPRICEMODELBASIC], [SERIALNUMGROUPID], [SORTCODE], [TARAWEIGHT], [TAXATIONORIGIN_BR], [TAXFISCALCLASSIFICATION_BR], [TAXSERVICECODE_BR], [UNITVOLUME], [USEALTITEMID], [WIDTH], [WMSPICKINGQTYTIME], [DATAAREAID])
	ON (target.[ITEMID] = source.[ITEMID] AND target.[DATAAREAID] = source.[DATAAREAID])
	WHEN NOT MATCHED THEN
		INSERT ([PRODUCT], [ABCCONTRIBUTIONMARGIN], [ABCREVENUE], [ABCTIEUP], [ABCVALUE], [ALTITEMID], [APPROXTAXVALUE_BR], [BATCHNUMGROUPID], [COSTMODEL], [DENSITY], [DEPTH], [EXCEPTIONCODE_BR], [GROSSDEPTH], [GROSSHEIGHT], [GROSSWIDTH], [HEIGHT], [INVENTPRODUCTTYPE_BR], [ITEMBUYERGROUPID], [ITEMDIMCOSTPRICE], [ITEMID], [ITEMTYPE], [NAMEALIAS], [NETWEIGHT], [PRIMARYVENDORID], [PRODGROUPID], [PRODPOOLID], [PROJCATEGORYID], [PROPERTYID], [PURCHMODEL], [RECID], [REQGROUPID], [SALESCONTRIBUTIONRATIO], [SALESMODEL], [SALESPERCENTMARKUP], [SALESPRICEMODELBASIC], [SERIALNUMGROUPID], [SORTCODE], [TARAWEIGHT], [TAXATIONORIGIN_BR], [TAXFISCALCLASSIFICATION_BR], [TAXSERVICECODE_BR], [UNITVOLUME], [USEALTITEMID], [WIDTH], [WMSPICKINGQTYTIME], [DATAAREAID])
		VALUES (source.[PRODUCT], source.[ABCCONTRIBUTIONMARGIN], source.[ABCREVENUE], source.[ABCTIEUP], source.[ABCVALUE], source.[ALTITEMID], source.[APPROXTAXVALUE_BR], source.[BATCHNUMGROUPID], source.[COSTMODEL], source.[DENSITY], source.[DEPTH], source.[EXCEPTIONCODE_BR], source.[GROSSDEPTH], source.[GROSSHEIGHT], source.[GROSSWIDTH], source.[HEIGHT], source.[INVENTPRODUCTTYPE_BR], source.[ITEMBUYERGROUPID], source.[ITEMDIMCOSTPRICE], source.[ITEMID], source.[ITEMTYPE], source.[NAMEALIAS], source.[NETWEIGHT], source.[PRIMARYVENDORID], source.[PRODGROUPID], source.[PRODPOOLID], source.[PROJCATEGORYID], source.[PROPERTYID], source.[PURCHMODEL], source.[RECID], source.[REQGROUPID], source.[SALESCONTRIBUTIONRATIO], source.[SALESMODEL], source.[SALESPERCENTMARKUP], source.[SALESPRICEMODELBASIC], source.[SERIALNUMGROUPID], source.[SORTCODE], source.[TARAWEIGHT], source.[TAXATIONORIGIN_BR], source.[TAXFISCALCLASSIFICATION_BR], source.[TAXSERVICECODE_BR], source.[UNITVOLUME], source.[USEALTITEMID], source.[WIDTH], source.[WMSPICKINGQTYTIME], source.[DATAAREAID])
	WHEN MATCHED THEN
		UPDATE SET target.[PRODUCT] = source.[PRODUCT], target.[ABCCONTRIBUTIONMARGIN] = source.[ABCCONTRIBUTIONMARGIN], target.[ABCREVENUE] = source.[ABCREVENUE], target.[ABCTIEUP] = source.[ABCTIEUP], target.[ABCVALUE] = source.[ABCVALUE], target.[ALTITEMID] = source.[ALTITEMID], target.[APPROXTAXVALUE_BR] = source.[APPROXTAXVALUE_BR], target.[BATCHNUMGROUPID] = source.[BATCHNUMGROUPID], target.[COSTMODEL] = source.[COSTMODEL], target.[DENSITY] = source.[DENSITY], target.[DEPTH] = source.[DEPTH], target.[EXCEPTIONCODE_BR] = source.[EXCEPTIONCODE_BR], target.[GROSSDEPTH] = source.[GROSSDEPTH], target.[GROSSHEIGHT] = source.[GROSSHEIGHT], target.[GROSSWIDTH] = source.[GROSSWIDTH], target.[HEIGHT] = source.[HEIGHT], target.[INVENTPRODUCTTYPE_BR] = source.[INVENTPRODUCTTYPE_BR], target.[ITEMBUYERGROUPID] = source.[ITEMBUYERGROUPID], target.[ITEMDIMCOSTPRICE] = source.[ITEMDIMCOSTPRICE], target.[ITEMID] = source.[ITEMID], target.[ITEMTYPE] = source.[ITEMTYPE], target.[NAMEALIAS] = source.[NAMEALIAS], target.[NETWEIGHT] = source.[NETWEIGHT], target.[PRIMARYVENDORID] = source.[PRIMARYVENDORID], target.[PRODGROUPID] = source.[PRODGROUPID], target.[PRODPOOLID] = source.[PRODPOOLID], target.[PROJCATEGORYID] = source.[PROJCATEGORYID], target.[PROPERTYID] = source.[PROPERTYID], target.[PURCHMODEL] = source.[PURCHMODEL], target.[RECID] = source.[RECID], target.[REQGROUPID] = source.[REQGROUPID], target.[SALESCONTRIBUTIONRATIO] = source.[SALESCONTRIBUTIONRATIO], target.[SALESMODEL] = source.[SALESMODEL], target.[SALESPERCENTMARKUP] = source.[SALESPERCENTMARKUP], target.[SALESPRICEMODELBASIC] = source.[SALESPRICEMODELBASIC], target.[SERIALNUMGROUPID] = source.[SERIALNUMGROUPID], target.[SORTCODE] = source.[SORTCODE], target.[TARAWEIGHT] = source.[TARAWEIGHT], target.[TAXATIONORIGIN_BR] = source.[TAXATIONORIGIN_BR], target.[TAXFISCALCLASSIFICATION_BR] = source.[TAXFISCALCLASSIFICATION_BR], target.[TAXSERVICECODE_BR] = source.[TAXSERVICECODE_BR], target.[UNITVOLUME] = source.[UNITVOLUME], target.[USEALTITEMID] = source.[USEALTITEMID], target.[WIDTH] = source.[WIDTH], target.[WMSPICKINGQTYTIME] = source.[WMSPICKINGQTYTIME], target.[DATAAREAID] = source.[DATAAREAID];

	SELECT @i_Error = @@ERROR;
	IF @i_Error <> 0
	BEGIN
		SET @i_ReturnCode = @i_Error;
		GOTO exit_label;
	END;

	-- DocuRef
	PRINT 'Upserting into [ax].DOCUREF ..'
	MERGE [ax].DOCUREF AS target
	USING (
		SELECT DISTINCT
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(RefCompanyId)[1]', 'NVARCHAR(4)'), '') AS [REFCOMPANYID],
			ISNULL(T.c.value('(RefRecId)[1]', 'BIGINT'), '0') AS [REFRECID],
			ISNULL(T.c.value('(RefTableId)[1]', 'INT'), '0') AS [REFTABLEID]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/DocuRef') AS T(c)
		UNION
		SELECT DISTINCT
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(RefCompanyId)[1]', 'NVARCHAR(4)'), '') AS [REFCOMPANYID],
			ISNULL(T.c.value('(RefRecId)[1]', 'BIGINT'), '0') AS [REFRECID],
			ISNULL(T.c.value('(RefTableId)[1]', 'INT'), '0') AS [REFTABLEID]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/InventDimCombination/DocuRef') AS T(c)
	) AS source ([RECID], [REFCOMPANYID], [REFRECID], [REFTABLEID])
	ON (target.[RECID] = source.[RECID])
	WHEN NOT MATCHED THEN
		INSERT ([RECID], [REFCOMPANYID], [REFRECID], [REFTABLEID])
		VALUES (source.[RECID], source.[REFCOMPANYID], source.[REFRECID], source.[REFTABLEID])
	WHEN MATCHED THEN
		UPDATE SET target.[RECID] = source.[RECID], target.[REFCOMPANYID] = source.[REFCOMPANYID], target.[REFRECID] = source.[REFRECID], target.[REFTABLEID] = source.[REFTABLEID];

	SELECT @i_Error = @@ERROR;
	IF @i_Error <> 0
	BEGIN
		SET @i_ReturnCode = @i_Error;
		GOTO exit_label;
	END;

	-- EcoResProductImage
	PRINT 'Upserting into [ax].ECORESPRODUCTIMAGE ..'
	MERGE [ax].ECORESPRODUCTIMAGE AS target
	USING (
		SELECT DISTINCT
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			CASE T.c.value('(DefaultImage)[1]', 'NVARCHAR(4000)')
				WHEN 'No' THEN 0
				WHEN 'Yes' THEN 1
				ELSE 0
			END AS [DEFAULTIMAGE],
			ISNULL(T.c.value('(RefRecord)[1]', 'BIGINT'), '0') AS [REFRECORD],
			ISNULL(T.c.value('(MediumSize)[1]', 'varbinary(max)'), NULL) AS [MEDIUMSIZE]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/DocuRef/EcoResProductImage') AS T(c)
		UNION
		SELECT DISTINCT
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			CASE T.c.value('(DefaultImage)[1]', 'NVARCHAR(4000)')
				WHEN 'No' THEN 0
				WHEN 'Yes' THEN 1
				ELSE 0
			END AS [DEFAULTIMAGE],
			ISNULL(T.c.value('(RefRecord)[1]', 'BIGINT'), '0') AS [REFRECORD],
			ISNULL(T.c.value('(MediumSize)[1]', 'varbinary(max)'), NULL) AS [MEDIUMSIZE]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/InventDimCombination/DocuRef/EcoResProductImage') AS T(c)
	) AS source ([RECID], [DEFAULTIMAGE], [REFRECORD], [MEDIUMSIZE])
	ON (target.[RECID] = source.[RECID])
	WHEN NOT MATCHED THEN
		INSERT ([RECID], [DEFAULTIMAGE], [REFRECORD], [MEDIUMSIZE])
		VALUES (source.[RECID], source.[DEFAULTIMAGE], source.[REFRECORD], source.[MEDIUMSIZE])
	WHEN MATCHED THEN
		UPDATE SET target.[RECID] = source.[RECID], target.[DEFAULTIMAGE] = source.[DEFAULTIMAGE], target.[REFRECORD] = source.[REFRECORD], target.[MEDIUMSIZE] = source.[MEDIUMSIZE];

	SELECT @i_Error = @@ERROR;
	IF @i_Error <> 0
	BEGIN
		SET @i_ReturnCode = @i_Error;
		GOTO exit_label;
	END;

	-- RetailInventTable
	PRINT 'Upserting into [ax].RETAILINVENTTABLE ..'
	MERGE [ax].RETAILINVENTTABLE AS target
	USING (
		SELECT DISTINCT
			COALESCE(T.c.value('(itemId)[1]', 'NVARCHAR(20)'), T.c.value('(../ItemId)[1]', 'NVARCHAR(20)')) AS [ITEMID],
			ISNULL(T.c.value('(BarcodeSetupId)[1]', 'NVARCHAR(10)'), '') AS [BARCODESETUPID],
			ISNULL(T.c.value('(BaseComparisonUnitCode)[1]', 'NVARCHAR(10)'), '') AS [BASECOMPARISONUNITCODE],
			CASE T.c.value('(BlockedOnPOS)[1]', 'NVARCHAR(4000)')
				WHEN 'No' THEN 0
				WHEN 'Yes' THEN 1
				ELSE 0
			END AS [BLOCKEDONPOS],
			ISNULL(T.c.value('(DateBlocked)[1]', 'DATE'), '1900-01-01') AS [DATEBLOCKED],
			ISNULL(T.c.value('(DateToActivateItem)[1]', 'DATE'), '1900-01-01') AS [DATETOACTIVATEITEM],
			ISNULL(T.c.value('(DateToBeBlocked)[1]', 'DATE'), '1900-01-01') AS [DATETOBEBLOCKED],
			CASE T.c.value('(KeyingInPrice)[1]', 'NVARCHAR(4000)')
				WHEN 'NotMandatory' THEN 0
				WHEN 'NewPrice' THEN 1
				WHEN 'HigherEqual' THEN 2
				WHEN 'LowerEqual' THEN 3
				WHEN 'NoPrice' THEN 4
				ELSE 0
			END AS [KEYINGINPRICE],
			CASE T.c.value('(KeyingInQty)[1]', 'NVARCHAR(4000)')
				WHEN 'NotMandatory' THEN 0
				WHEN 'KeyIn' THEN 1
				WHEN 'NotKeyIn' THEN 2
				ELSE 0
			END AS [KEYINGINQTY],
			CASE T.c.value('(MustKeyInComment)[1]', 'NVARCHAR(4000)')
				WHEN 'No' THEN 0
				WHEN 'Yes' THEN 1
				ELSE 0
			END AS [MUSTKEYINCOMMENT],
			CASE T.c.value('(NoDiscountAllowed)[1]', 'NVARCHAR(4000)')
				WHEN 'No' THEN 0
				WHEN 'Yes' THEN 1
				ELSE 0
			END AS [NODISCOUNTALLOWED],
			CASE T.c.value('(PrintVariantsShelfLabels)[1]', 'NVARCHAR(4000)')
				WHEN 'No' THEN 0
				WHEN 'Yes' THEN 1
				ELSE 0
			END AS [PRINTVARIANTSSHELFLABELS],
			CASE T.c.value('(ProhibitReturn_RU)[1]', 'NVARCHAR(4000)')
				WHEN 'No' THEN 0
				WHEN 'Yes' THEN 1
				ELSE 0
			END AS [PROHIBITRETURN_RU],
			CASE T.c.value('(QtyBecomesNegative)[1]', 'NVARCHAR(4000)')
				WHEN 'No' THEN 0
				WHEN 'Yes' THEN 1
				ELSE 0
			END AS [QTYBECOMESNEGATIVE],
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			CASE T.c.value('(ScaleItem)[1]', 'NVARCHAR(4000)')
				WHEN 'No' THEN 0
				WHEN 'Yes' THEN 1
				ELSE 0
			END AS [SCALEITEM],
			CASE T.c.value('(UseEanStandardBarcode)[1]', 'NVARCHAR(4000)')
				WHEN 'No' THEN 0
				WHEN 'Yes' THEN 1
				ELSE 0
			END AS [USEEANSTANDARDBARCODE],
			CASE T.c.value('(ZeroPriceValid)[1]', 'NVARCHAR(4000)')
				WHEN 'No' THEN 0
				WHEN 'Yes' THEN 1
				ELSE 0
			END AS [ZEROPRICEVALID],
			@nvc_DataAreaId AS [DATAAREAID]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/RetailInventTable') AS T(c)
	) AS source ([ITEMID], [BARCODESETUPID], [BASECOMPARISONUNITCODE], [BLOCKEDONPOS], [DATEBLOCKED], [DATETOACTIVATEITEM], [DATETOBEBLOCKED], [KEYINGINPRICE], [KEYINGINQTY], [MUSTKEYINCOMMENT], [NODISCOUNTALLOWED], [PRINTVARIANTSSHELFLABELS], [PROHIBITRETURN_RU], [QTYBECOMESNEGATIVE], [RECID], [SCALEITEM], [USEEANSTANDARDBARCODE], [ZEROPRICEVALID], [DATAAREAID])
	ON (target.[ITEMID] = source.[ITEMID] AND target.[DATAAREAID] = source.[DATAAREAID])
	WHEN NOT MATCHED THEN
		INSERT ([ITEMID], [BARCODESETUPID], [BASECOMPARISONUNITCODE], [BLOCKEDONPOS], [DATEBLOCKED], [DATETOACTIVATEITEM], [DATETOBEBLOCKED], [KEYINGINPRICE], [KEYINGINQTY], [MUSTKEYINCOMMENT], [NODISCOUNTALLOWED], [PRINTVARIANTSSHELFLABELS], [PROHIBITRETURN_RU], [QTYBECOMESNEGATIVE], [RECID], [SCALEITEM], [USEEANSTANDARDBARCODE], [ZEROPRICEVALID], [DATAAREAID])
		VALUES (source.[ITEMID], source.[BARCODESETUPID], source.[BASECOMPARISONUNITCODE], source.[BLOCKEDONPOS], source.[DATEBLOCKED], source.[DATETOACTIVATEITEM], source.[DATETOBEBLOCKED], source.[KEYINGINPRICE], source.[KEYINGINQTY], source.[MUSTKEYINCOMMENT], source.[NODISCOUNTALLOWED], source.[PRINTVARIANTSSHELFLABELS], source.[PROHIBITRETURN_RU], source.[QTYBECOMESNEGATIVE], source.[RECID], source.[SCALEITEM], source.[USEEANSTANDARDBARCODE], source.[ZEROPRICEVALID], source.[DATAAREAID])
	WHEN MATCHED THEN
		UPDATE SET target.[ITEMID] = source.[ITEMID], target.[BARCODESETUPID] = source.[BARCODESETUPID], target.[BASECOMPARISONUNITCODE] = source.[BASECOMPARISONUNITCODE], target.[BLOCKEDONPOS] = source.[BLOCKEDONPOS], target.[DATEBLOCKED] = source.[DATEBLOCKED], target.[DATETOACTIVATEITEM] = source.[DATETOACTIVATEITEM], target.[DATETOBEBLOCKED] = source.[DATETOBEBLOCKED], target.[KEYINGINPRICE] = source.[KEYINGINPRICE], target.[KEYINGINQTY] = source.[KEYINGINQTY], target.[MUSTKEYINCOMMENT] = source.[MUSTKEYINCOMMENT], target.[NODISCOUNTALLOWED] = source.[NODISCOUNTALLOWED], target.[PRINTVARIANTSSHELFLABELS] = source.[PRINTVARIANTSSHELFLABELS], target.[PROHIBITRETURN_RU] = source.[PROHIBITRETURN_RU], target.[QTYBECOMESNEGATIVE] = source.[QTYBECOMESNEGATIVE], target.[RECID] = source.[RECID], target.[SCALEITEM] = source.[SCALEITEM], target.[USEEANSTANDARDBARCODE] = source.[USEEANSTANDARDBARCODE], target.[ZEROPRICEVALID] = source.[ZEROPRICEVALID], target.[DATAAREAID] = source.[DATAAREAID];

	SELECT @i_Error = @@ERROR;
	IF @i_Error <> 0
	BEGIN
		SET @i_ReturnCode = @i_Error;
		GOTO exit_label;
	END;

	-- InventDimCombination
	PRINT 'Upserting into [ax].INVENTDIMCOMBINATION ..'
	MERGE [ax].INVENTDIMCOMBINATION AS target
	USING (
		SELECT DISTINCT
			COALESCE(T.c.value('(ItemId)[1]', 'NVARCHAR(20)'), T.c.value('(../ItemId)[1]', 'NVARCHAR(20)')) AS [ITEMID],
			ISNULL(T.c.value('(DistinctProductVariant)[1]', 'BIGINT'), '0') AS [DISTINCTPRODUCTVARIANT],
			ISNULL(T.c.value('(InventDimId)[1]', 'NVARCHAR(20)'), '') AS [INVENTDIMID],
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(RetailVariantId)[1]', 'NVARCHAR(10)'), '') AS [RETAILVARIANTID],
			@nvc_DataAreaId AS [DATAAREAID]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/InventDimCombination') AS T(c)
	) AS source ([ITEMID], [DISTINCTPRODUCTVARIANT], [INVENTDIMID], [RECID], [RETAILVARIANTID], [DATAAREAID])
	ON (target.[ITEMID] = source.[ITEMID] AND target.[INVENTDIMID] = source.[INVENTDIMID] AND target.[DATAAREAID] = source.[DATAAREAID])
	WHEN NOT MATCHED THEN
		INSERT ([ITEMID], [DISTINCTPRODUCTVARIANT], [INVENTDIMID], [RECID], [RETAILVARIANTID], [DATAAREAID])
		VALUES (source.[ITEMID], source.[DISTINCTPRODUCTVARIANT], source.[INVENTDIMID], source.[RECID], source.[RETAILVARIANTID], source.[DATAAREAID])
	WHEN MATCHED THEN
		UPDATE SET target.[ITEMID] = source.[ITEMID], target.[DISTINCTPRODUCTVARIANT] = source.[DISTINCTPRODUCTVARIANT], target.[INVENTDIMID] = source.[INVENTDIMID], target.[RECID] = source.[RECID], target.[RETAILVARIANTID] = source.[RETAILVARIANTID], target.[DATAAREAID] = source.[DATAAREAID];

	SELECT @i_Error = @@ERROR;
	IF @i_Error <> 0
	BEGIN
		SET @i_ReturnCode = @i_Error;
		GOTO exit_label;
	END;

	-- EcoResProduct
	PRINT 'Upserting into [ax].ECORESPRODUCT ..'
	MERGE [ax].ECORESPRODUCT AS target
	USING (
		SELECT DISTINCT
			ISNULL(T.c.value('(DisplayProductNumber)[1]', 'NVARCHAR(70)'), '') AS [DISPLAYPRODUCTNUMBER],
			CASE T.c.value('(ProductType)[1]', 'NVARCHAR(4000)')
				WHEN 'Item' THEN 0
				WHEN 'Service' THEN 1
				ELSE 0
			END AS [PRODUCTTYPE],
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(SearchName)[1]', 'NVARCHAR(20)'), '') AS [SEARCHNAME],
			ISNULL(T.c.value('(RelationType)[1]', 'BIGINT'), 0) AS [RELATIONTYPE],
			ISNULL(T.c.value('(RelationType)[1]', 'BIGINT'), 0) AS [INSTANCERELATIONTYPE]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/InventDimCombination/EcoResProduct') AS T(c)
		UNION
		SELECT DISTINCT
			ISNULL(T.c.value('(DisplayProductNumber)[1]', 'NVARCHAR(70)'), '') AS [DISPLAYPRODUCTNUMBER],
			CASE T.c.value('(ProductType)[1]', 'NVARCHAR(4000)')
				WHEN 'Item' THEN 0
				WHEN 'Service' THEN 1
				ELSE 0
			END AS [PRODUCTTYPE],
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(SearchName)[1]', 'NVARCHAR(20)'), '') AS [SEARCHNAME],
			ISNULL(T.c.value('(RelationType)[1]', 'BIGINT'), 0) AS [RELATIONTYPE],
			ISNULL(T.c.value('(RelationType)[1]', 'BIGINT'), 0) AS [INSTANCERELATIONTYPE]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/EcoResProduct') AS T(c)
	) AS source ([DISPLAYPRODUCTNUMBER], [PRODUCTTYPE], [RECID], [SEARCHNAME], [RELATIONTYPE], [INSTANCERELATIONTYPE])
	ON (target.[RECID] = source.[RECID])
	WHEN NOT MATCHED THEN
		INSERT ([DISPLAYPRODUCTNUMBER], [PRODUCTTYPE], [RECID], [SEARCHNAME], [RELATIONTYPE], [INSTANCERELATIONTYPE])
		VALUES (source.[DISPLAYPRODUCTNUMBER], source.[PRODUCTTYPE], source.[RECID], source.[SEARCHNAME], source.[RELATIONTYPE], source.[INSTANCERELATIONTYPE])
	WHEN MATCHED THEN
		UPDATE SET target.[DISPLAYPRODUCTNUMBER] = source.[DISPLAYPRODUCTNUMBER], target.[PRODUCTTYPE] = source.[PRODUCTTYPE], target.[RECID] = source.[RECID], target.[SEARCHNAME] = source.[SEARCHNAME], target.[RELATIONTYPE] = source.[RELATIONTYPE], target.[INSTANCERELATIONTYPE] = source.[INSTANCERELATIONTYPE];

	SELECT @i_Error = @@ERROR;
	IF @i_Error <> 0
	BEGIN
		SET @i_ReturnCode = @i_Error;
		GOTO exit_label;
	END;

	-- EcoResDistinctProductVariant
	PRINT 'Upserting into [ax].ECORESDISTINCTPRODUCTVARIANT ..'
	MERGE [ax].ECORESDISTINCTPRODUCTVARIANT AS target
	USING (
		SELECT DISTINCT
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(ProductMaster)[1]', 'BIGINT'), '0') AS [PRODUCTMASTER]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/InventDimCombination/EcoResProduct/EcoResDistinctProductVariant') AS T(c)
	) AS source ([RECID], [PRODUCTMASTER])
	ON (target.[RECID] = source.[RECID])
	WHEN NOT MATCHED THEN
		INSERT ([RECID], [PRODUCTMASTER])
		VALUES (source.[RECID], source.[PRODUCTMASTER])
	WHEN MATCHED THEN
		UPDATE SET target.[RECID] = source.[RECID], target.[PRODUCTMASTER] = source.[PRODUCTMASTER];

	SELECT @i_Error = @@ERROR;
	IF @i_Error <> 0
	BEGIN
		SET @i_ReturnCode = @i_Error;
		GOTO exit_label;
	END;

	-- EcoResProductCategory
	PRINT 'Upserting into [ax].ECORESPRODUCTCATEGORY ..'
	MERGE [ax].ECORESPRODUCTCATEGORY AS target
	USING (
		SELECT DISTINCT
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(CategoryHierarchy)[1]', 'BIGINT'), '0') AS [CATEGORYHIERARCHY],
			ISNULL(T.c.value('(Category)[1]', 'BIGINT'), '0') AS [CATEGORY],
			ISNULL(T.c.value('(Product)[1]', 'BIGINT'), '0') AS [PRODUCT]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/InventDimCombination/EcoResProduct/EcoResProductCategory') AS T(c)
		UNION
		SELECT DISTINCT
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(CategoryHierarchy)[1]', 'BIGINT'), '0') AS [CATEGORYHIERARCHY],
			ISNULL(T.c.value('(Category)[1]', 'BIGINT'), '0') AS [CATEGORY],
			ISNULL(T.c.value('(Product)[1]', 'BIGINT'), '0') AS [PRODUCT]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/EcoResProduct/EcoResProductCategory') AS T(c)
	) AS source ([RECID], [CATEGORYHIERARCHY], [CATEGORY], [PRODUCT])
	ON (target.[RECID] = source.[RECID])
	WHEN NOT MATCHED THEN
		INSERT ([RECID], [CATEGORYHIERARCHY], [CATEGORY], [PRODUCT])
		VALUES (source.[RECID], source.[CATEGORYHIERARCHY], source.[CATEGORY], source.[PRODUCT])
	WHEN MATCHED THEN
		UPDATE SET target.[RECID] = source.[RECID], target.[CATEGORYHIERARCHY] = source.[CATEGORYHIERARCHY], target.[CATEGORY] = source.[CATEGORY], target.[PRODUCT] = source.[PRODUCT];

	SELECT @i_Error = @@ERROR;
	IF @i_Error <> 0
	BEGIN
		SET @i_ReturnCode = @i_Error;
		GOTO exit_label;
	END;

	-- EcoResProductInstanceValue
	PRINT 'Upserting into [ax].ECORESPRODUCTINSTANCEVALUE ..'
	MERGE [ax].ECORESPRODUCTINSTANCEVALUE AS target
	USING (
		SELECT DISTINCT
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(Product)[1]', 'BIGINT'), '0') AS [PRODUCT]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/InventDimCombination/EcoResProduct/EcoResProductInstanceValue') AS T(c)
		UNION
		SELECT DISTINCT
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(Product)[1]', 'BIGINT'), '0') AS [PRODUCT]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/EcoResProduct/EcoResProductInstanceValue') AS T(c)
	) AS source ([RECID], [PRODUCT])
	ON (target.[RECID] = source.[RECID])
	WHEN NOT MATCHED THEN
		INSERT ([RECID], [PRODUCT])
		VALUES (source.[RECID], source.[PRODUCT])
	WHEN MATCHED THEN
		UPDATE SET target.[RECID] = source.[RECID], target.[PRODUCT] = source.[PRODUCT];

	SELECT @i_Error = @@ERROR;
	IF @i_Error <> 0
	BEGIN
		SET @i_ReturnCode = @i_Error;
		GOTO exit_label;
	END;

	-- EcoResInstanceValue
	PRINT 'Upserting into [ax].ECORESINSTANCEVALUE ..'
	MERGE [ax].ECORESINSTANCEVALUE AS target
	USING (
		SELECT DISTINCT
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(InstanceRelationType)[1]', 'BIGINT'), '0') AS [INSTANCERELATIONTYPE],
			ISNULL(T.c.value('(RelationType)[1]', 'BIGINT'), 0) AS [RELATIONTYPE]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/InventDimCombination/EcoResProduct/EcoResProductInstanceValue/EcoResInstanceValue') AS T(c)
		UNION
		SELECT DISTINCT
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(InstanceRelationType)[1]', 'BIGINT'), '0') AS [INSTANCERELATIONTYPE],
			ISNULL(T.c.value('(RelationType)[1]', 'BIGINT'), 0) AS [RELATIONTYPE]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/EcoResProduct/EcoResProductInstanceValue/EcoResInstanceValue') AS T(c)
	) AS source ([RECID], [INSTANCERELATIONTYPE], [RELATIONTYPE])
	ON (target.[RECID] = source.[RECID])
	WHEN NOT MATCHED THEN
		INSERT ([RECID], [INSTANCERELATIONTYPE], [RELATIONTYPE])
		VALUES (source.[RECID], source.[INSTANCERELATIONTYPE], source.[RELATIONTYPE])
	WHEN MATCHED THEN
		UPDATE SET target.[RECID] = source.[RECID], target.[INSTANCERELATIONTYPE] = source.[INSTANCERELATIONTYPE], target.[RELATIONTYPE] = source.[RELATIONTYPE];

	SELECT @i_Error = @@ERROR;
	IF @i_Error <> 0
	BEGIN
		SET @i_ReturnCode = @i_Error;
		GOTO exit_label;
	END;

	-- EcoResAttributeValue
	PRINT 'Upserting into [ax].ECORESATTRIBUTEVALUE ..'
	MERGE [ax].ECORESATTRIBUTEVALUE AS target
	USING (
		SELECT DISTINCT
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(Value)[1]', 'BIGINT'), '0') AS [VALUE],
			ISNULL(T.c.value('(InstanceValue)[1]', 'BIGINT'), '0') AS [INSTANCEVALUE],
			ISNULL(T.c.value('(Attribute)[1]', 'BIGINT'), '0') AS [ATTRIBUTE]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/InventDimCombination/EcoResProduct/EcoResProductInstanceValue/EcoResInstanceValue/EcoResAttributeValue') AS T(c)
		UNION
		SELECT DISTINCT
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(Value)[1]', 'BIGINT'), '0') AS [VALUE],
			ISNULL(T.c.value('(InstanceValue)[1]', 'BIGINT'), '0') AS [INSTANCEVALUE],
			ISNULL(T.c.value('(Attribute)[1]', 'BIGINT'), '0') AS [ATTRIBUTE]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/EcoResProduct/EcoResProductInstanceValue/EcoResInstanceValue/EcoResAttributeValue') AS T(c)
	) AS source ([RECID], [VALUE], [INSTANCEVALUE], [ATTRIBUTE])
	ON (target.[RECID] = source.[RECID])
	WHEN NOT MATCHED THEN
		INSERT ([RECID], [VALUE], [INSTANCEVALUE], [ATTRIBUTE])
		VALUES (source.[RECID], source.[VALUE], source.[INSTANCEVALUE], source.[ATTRIBUTE])
	WHEN MATCHED THEN
		UPDATE SET target.[RECID] = source.[RECID], target.[VALUE] = source.[VALUE], target.[INSTANCEVALUE] = source.[INSTANCEVALUE], target.[ATTRIBUTE] = source.[ATTRIBUTE];

	SELECT @i_Error = @@ERROR;
	IF @i_Error <> 0
	BEGIN
		SET @i_ReturnCode = @i_Error;
		GOTO exit_label;
	END;

	-- EcoResValue
	PRINT 'Upserting into [ax].ECORESVALUE ..'
	MERGE [ax].ECORESVALUE AS target
	USING (
		SELECT DISTINCT
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(InstanceRelationType)[1]', 'BIGINT'), '0') AS [INSTANCERELATIONTYPE],
			ISNULL(T.c.value('(RelationType)[1]', 'BIGINT'), 0) AS [RELATIONTYPE]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/InventDimCombination/EcoResProduct/EcoResProductInstanceValue/EcoResInstanceValue/EcoResAttributeValue/EcoResValue') AS T(c)
		UNION
		SELECT DISTINCT
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(InstanceRelationType)[1]', 'BIGINT'), '0') AS [INSTANCERELATIONTYPE],
			ISNULL(T.c.value('(RelationType)[1]', 'BIGINT'), 0) AS [RELATIONTYPE]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/EcoResProduct/EcoResProductInstanceValue/EcoResInstanceValue/EcoResAttributeValue/EcoResValue') AS T(c)
	) AS source ([RECID], [INSTANCERELATIONTYPE], [RELATIONTYPE])
	ON (target.[RECID] = source.[RECID])
	WHEN NOT MATCHED THEN
		INSERT ([RECID], [INSTANCERELATIONTYPE], [RELATIONTYPE])
		VALUES (source.[RECID], source.[INSTANCERELATIONTYPE], source.[RELATIONTYPE])
	WHEN MATCHED THEN
		UPDATE SET target.[RECID] = source.[RECID], target.[INSTANCERELATIONTYPE] = source.[INSTANCERELATIONTYPE], target.[RELATIONTYPE] = source.[RELATIONTYPE];

	SELECT @i_Error = @@ERROR;
	IF @i_Error <> 0
	BEGIN
		SET @i_ReturnCode = @i_Error;
		GOTO exit_label;
	END;

	-- EcoResBooleanValue
	PRINT 'Upserting into [ax].ECORESBOOLEANVALUE ..'
	MERGE [ax].ECORESBOOLEANVALUE AS target
	USING (
		SELECT DISTINCT
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			CASE T.c.value('(BooleanValue)[1]', 'NVARCHAR(4000)')
				WHEN 'No' THEN 0
				WHEN 'Yes' THEN 1
				ELSE 0
			END AS [BOOLEANVALUE]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/InventDimCombination/EcoResProduct/EcoResProductInstanceValue/EcoResInstanceValue/EcoResAttributeValue/EcoResValue/EcoResBooleanValue') AS T(c)
		UNION
		SELECT DISTINCT
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			CASE T.c.value('(BooleanValue)[1]', 'NVARCHAR(4000)')
				WHEN 'No' THEN 0
				WHEN 'Yes' THEN 1
				ELSE 0
			END AS [BOOLEANVALUE]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/EcoResProduct/EcoResProductInstanceValue/EcoResInstanceValue/EcoResAttributeValue/EcoResValue/EcoResBooleanValue') AS T(c)
	) AS source ([RECID], [BOOLEANVALUE])
	ON (target.[RECID] = source.[RECID])
	WHEN NOT MATCHED THEN
		INSERT ([RECID], [BOOLEANVALUE])
		VALUES (source.[RECID], source.[BOOLEANVALUE])
	WHEN MATCHED THEN
		UPDATE SET target.[RECID] = source.[RECID], target.[BOOLEANVALUE] = source.[BOOLEANVALUE];

	SELECT @i_Error = @@ERROR;
	IF @i_Error <> 0
	BEGIN
		SET @i_ReturnCode = @i_Error;
		GOTO exit_label;
	END;

	-- EcoResDateTimeValue
	PRINT 'Upserting into [ax].ECORESDATETIMEVALUE ..'
	MERGE [ax].ECORESDATETIMEVALUE AS target
	USING (
		SELECT DISTINCT
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(DateTimeValue)[1]', 'DATETIME'), '1900-01-01 00:00:00.000') AS [DATETIMEVALUE]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/InventDimCombination/EcoResProduct/EcoResProductInstanceValue/EcoResInstanceValue/EcoResAttributeValue/EcoResValue/EcoResDateTimeValue') AS T(c)
		UNION
		SELECT DISTINCT
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(DateTimeValue)[1]', 'DATETIME'), '1900-01-01 00:00:00.000') AS [DATETIMEVALUE]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/EcoResProduct/EcoResProductInstanceValue/EcoResInstanceValue/EcoResAttributeValue/EcoResValue/EcoResDateTimeValue') AS T(c)
	) AS source ([RECID], [DATETIMEVALUE])
	ON (target.[RECID] = source.[RECID])
	WHEN NOT MATCHED THEN
		INSERT ([RECID], [DATETIMEVALUE])
		VALUES (source.[RECID], source.[DATETIMEVALUE])
	WHEN MATCHED THEN
		UPDATE SET target.[RECID] = source.[RECID], target.[DATETIMEVALUE] = source.[DATETIMEVALUE];

	SELECT @i_Error = @@ERROR;
	IF @i_Error <> 0
	BEGIN
		SET @i_ReturnCode = @i_Error;
		GOTO exit_label;
	END;

	-- EcoResFloatValue
	PRINT 'Upserting into [ax].ECORESFLOATVALUE ..'
	MERGE [ax].ECORESFLOATVALUE AS target
	USING (
		SELECT DISTINCT
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(FloatValue)[1]', 'NUMERIC(32, 16)'), '0') AS [FLOATVALUE],
			ISNULL(T.c.value('(FloatUnitOfMeasure)[1]', 'BIGINT'), '0') AS [FLOATUNITOFMEASURE]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/InventDimCombination/EcoResProduct/EcoResProductInstanceValue/EcoResInstanceValue/EcoResAttributeValue/EcoResValue/EcoResFloatValue') AS T(c)
		UNION
		SELECT DISTINCT
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(FloatValue)[1]', 'NUMERIC(32, 16)'), '0') AS [FLOATVALUE],
			ISNULL(T.c.value('(FloatUnitOfMeasure)[1]', 'BIGINT'), '0') AS [FLOATUNITOFMEASURE]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/EcoResProduct/EcoResProductInstanceValue/EcoResInstanceValue/EcoResAttributeValue/EcoResValue/EcoResFloatValue') AS T(c)
	) AS source ([RECID], [FLOATVALUE], [FLOATUNITOFMEASURE])
	ON (target.[RECID] = source.[RECID])
	WHEN NOT MATCHED THEN
		INSERT ([RECID], [FLOATVALUE], [FLOATUNITOFMEASURE])
		VALUES (source.[RECID], source.[FLOATVALUE], source.[FLOATUNITOFMEASURE])
	WHEN MATCHED THEN
		UPDATE SET target.[RECID] = source.[RECID], target.[FLOATVALUE] = source.[FLOATVALUE], target.[FLOATUNITOFMEASURE] = source.[FLOATUNITOFMEASURE];

	SELECT @i_Error = @@ERROR;
	IF @i_Error <> 0
	BEGIN
		SET @i_ReturnCode = @i_Error;
		GOTO exit_label;
	END;

	-- EcoResIntValue
	PRINT 'Upserting into [ax].ECORESINTVALUE ..'
	MERGE [ax].ECORESINTVALUE AS target
	USING (
		SELECT DISTINCT
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(IntValue)[1]', 'INT'), '0') AS [INTVALUE],
			ISNULL(T.c.value('(IntUnitOfMeasure)[1]', 'BIGINT'), '0') AS [INTUNITOFMEASURE]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/InventDimCombination/EcoResProduct/EcoResProductInstanceValue/EcoResInstanceValue/EcoResAttributeValue/EcoResValue/EcoResIntValue') AS T(c)
		UNION
		SELECT DISTINCT
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(IntValue)[1]', 'INT'), '0') AS [INTVALUE],
			ISNULL(T.c.value('(IntUnitOfMeasure)[1]', 'BIGINT'), '0') AS [INTUNITOFMEASURE]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/EcoResProduct/EcoResProductInstanceValue/EcoResInstanceValue/EcoResAttributeValue/EcoResValue/EcoResIntValue') AS T(c)
	) AS source ([RECID], [INTVALUE], [INTUNITOFMEASURE])
	ON (target.[RECID] = source.[RECID])
	WHEN NOT MATCHED THEN
		INSERT ([RECID], [INTVALUE], [INTUNITOFMEASURE])
		VALUES (source.[RECID], source.[INTVALUE], source.[INTUNITOFMEASURE])
	WHEN MATCHED THEN
		UPDATE SET target.[RECID] = source.[RECID], target.[INTVALUE] = source.[INTVALUE], target.[INTUNITOFMEASURE] = source.[INTUNITOFMEASURE];

	SELECT @i_Error = @@ERROR;
	IF @i_Error <> 0
	BEGIN
		SET @i_ReturnCode = @i_Error;
		GOTO exit_label;
	END;

	-- EcoResTextValue
	PRINT 'Upserting into [ax].ECORESTEXTVALUE ..'
	MERGE [ax].ECORESTEXTVALUE AS target
	USING (
		SELECT DISTINCT
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(TextValue)[1]', 'NVARCHAR(1999)'), '') AS [TEXTVALUE]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/InventDimCombination/EcoResProduct/EcoResProductInstanceValue/EcoResInstanceValue/EcoResAttributeValue/EcoResValue/EcoResTextValue') AS T(c)
		UNION
		SELECT DISTINCT
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(TextValue)[1]', 'NVARCHAR(1999)'), '') AS [TEXTVALUE]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/EcoResProduct/EcoResProductInstanceValue/EcoResInstanceValue/EcoResAttributeValue/EcoResValue/EcoResTextValue') AS T(c)
	) AS source ([RECID], [TEXTVALUE])
	ON (target.[RECID] = source.[RECID])
	WHEN NOT MATCHED THEN
		INSERT ([RECID], [TEXTVALUE])
		VALUES (source.[RECID], source.[TEXTVALUE])
	WHEN MATCHED THEN
		UPDATE SET target.[RECID] = source.[RECID], target.[TEXTVALUE] = source.[TEXTVALUE];

	SELECT @i_Error = @@ERROR;
	IF @i_Error <> 0
	BEGIN
		SET @i_ReturnCode = @i_Error;
		GOTO exit_label;
	END;

	-- EcoResTextValueTranslation
	PRINT 'Upserting into [ax].ECORESTEXTVALUETRANSLATION ..'
	MERGE [ax].ECORESTEXTVALUETRANSLATION AS target
	USING (
		SELECT DISTINCT
			COALESCE(T.c.value('(TextValueTable)[1]', 'BIGINT'), T.c.value('(../RecId)[1]', 'BIGINT')) AS [TEXTVALUETABLE],
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(TextValue)[1]', 'NVARCHAR(1999)'), '') AS [TEXTVALUE],
			ISNULL(T.c.value('(Language)[1]', 'NVARCHAR(7)'), '') AS [LANGUAGE]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/InventDimCombination/EcoResProduct/EcoResProductInstanceValue/EcoResInstanceValue/EcoResAttributeValue/EcoResValue/EcoResTextValue/EcoResTextValueTranslation') AS T(c)
		UNION
		SELECT DISTINCT
			COALESCE(T.c.value('(TextValueTable)[1]', 'BIGINT'), T.c.value('(../RecId)[1]', 'BIGINT')) AS [TEXTVALUETABLE],
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(TextValue)[1]', 'NVARCHAR(1999)'), '') AS [TEXTVALUE],
			ISNULL(T.c.value('(Language)[1]', 'NVARCHAR(7)'), '') AS [LANGUAGE]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/EcoResProduct/EcoResProductInstanceValue/EcoResInstanceValue/EcoResAttributeValue/EcoResValue/EcoResTextValue/EcoResTextValueTranslation') AS T(c)
	) AS source ([TEXTVALUETABLE], [RECID], [TEXTVALUE], [LANGUAGE])
	ON (target.[RECID] = source.[RECID])
	WHEN NOT MATCHED THEN
		INSERT ([TEXTVALUETABLE], [RECID], [TEXTVALUE], [LANGUAGE])
		VALUES (source.[TEXTVALUETABLE], source.[RECID], source.[TEXTVALUE], source.[LANGUAGE])
	WHEN MATCHED THEN
		UPDATE SET target.[TEXTVALUETABLE] = source.[TEXTVALUETABLE], target.[RECID] = source.[RECID], target.[TEXTVALUE] = source.[TEXTVALUE], target.[LANGUAGE] = source.[LANGUAGE];

	SELECT @i_Error = @@ERROR;
	IF @i_Error <> 0
	BEGIN
		SET @i_ReturnCode = @i_Error;
		GOTO exit_label;
	END;

	-- EcoResCurrencyValue
	PRINT 'Upserting into [ax].ECORESCURRENCYVALUE ..'
	MERGE [ax].ECORESCURRENCYVALUE AS target
	USING (
		SELECT DISTINCT
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(CurrencyValue)[1]', 'NUMERIC(32, 16)'), '0') AS [CURRENCYVALUE],
			ISNULL(T.c.value('(CurrencyCode)[1]', 'NVARCHAR(3)'), '') AS [CURRENCYCODE]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/InventDimCombination/EcoResProduct/EcoResProductInstanceValue/EcoResInstanceValue/EcoResAttributeValue/EcoResValue/EcoResCurrencyValue') AS T(c)
		UNION
		SELECT DISTINCT
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(CurrencyValue)[1]', 'NUMERIC(32, 16)'), '0') AS [CURRENCYVALUE],
			ISNULL(T.c.value('(CurrencyCode)[1]', 'NVARCHAR(3)'), '') AS [CURRENCYCODE]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/EcoResProduct/EcoResProductInstanceValue/EcoResInstanceValue/EcoResAttributeValue/EcoResValue/EcoResCurrencyValue') AS T(c)
	) AS source ([RECID], [CURRENCYVALUE], [CURRENCYCODE])
	ON (target.[RECID] = source.[RECID])
	WHEN NOT MATCHED THEN
		INSERT ([RECID], [CURRENCYVALUE], [CURRENCYCODE])
		VALUES (source.[RECID], source.[CURRENCYVALUE], source.[CURRENCYCODE])
	WHEN MATCHED THEN
		UPDATE SET target.[RECID] = source.[RECID], target.[CURRENCYVALUE] = source.[CURRENCYVALUE], target.[CURRENCYCODE] = source.[CURRENCYCODE];

	SELECT @i_Error = @@ERROR;
	IF @i_Error <> 0
	BEGIN
		SET @i_ReturnCode = @i_Error;
		GOTO exit_label;
	END;

	-- EcoResReferenceValue
	PRINT 'Upserting into [ax].ECORESREFERENCEVALUE ..'
	MERGE [ax].ECORESREFERENCEVALUE AS target
	USING (
		SELECT DISTINCT
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(RefFieldId)[1]', 'INT'), '0') AS [REFFIELDID],
			ISNULL(T.c.value('(RefRecId)[1]', 'BIGINT'), '0') AS [REFRECID],
			ISNULL(T.c.value('(RefTableId)[1]', 'INT'), '0') AS [REFTABLEID]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/InventDimCombination/EcoResProduct/EcoResProductInstanceValue/EcoResInstanceValue/EcoResAttributeValue/EcoResValue/EcoResReferenceValue') AS T(c)
		UNION
		SELECT DISTINCT
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(RefFieldId)[1]', 'INT'), '0') AS [REFFIELDID],
			ISNULL(T.c.value('(RefRecId)[1]', 'BIGINT'), '0') AS [REFRECID],
			ISNULL(T.c.value('(RefTableId)[1]', 'INT'), '0') AS [REFTABLEID]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/EcoResProduct/EcoResProductInstanceValue/EcoResInstanceValue/EcoResAttributeValue/EcoResValue/EcoResReferenceValue') AS T(c)
	) AS source ([RECID], [REFFIELDID], [REFRECID], [REFTABLEID])
	ON (target.[RECID] = source.[RECID])
	WHEN NOT MATCHED THEN
		INSERT ([RECID], [REFFIELDID], [REFRECID], [REFTABLEID])
		VALUES (source.[RECID], source.[REFFIELDID], source.[REFRECID], source.[REFTABLEID])
	WHEN MATCHED THEN
		UPDATE SET target.[RECID] = source.[RECID], target.[REFFIELDID] = source.[REFFIELDID], target.[REFRECID] = source.[REFRECID], target.[REFTABLEID] = source.[REFTABLEID];

	SELECT @i_Error = @@ERROR;
	IF @i_Error <> 0
	BEGIN
		SET @i_ReturnCode = @i_Error;
		GOTO exit_label;
	END;

	-- EcoResTrackingDimensionGroupProduct
	PRINT 'Upserting into [ax].ECORESTRACKINGDIMENSIONGROUPPRODUCT ..'
	MERGE [ax].ECORESTRACKINGDIMENSIONGROUPPRODUCT AS target
	USING (
		SELECT DISTINCT
			ISNULL(T.c.value('(Product)[1]', 'BIGINT'), '0') AS [PRODUCT],
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(TrackingDimensionGroup)[1]', 'BIGINT'), '0') AS [TRACKINGDIMENSIONGROUP]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/InventDimCombination/EcoResProduct/EcoResTrackingDimensionGroupProduct') AS T(c)
		UNION
		SELECT DISTINCT
			ISNULL(T.c.value('(Product)[1]', 'BIGINT'), '0') AS [PRODUCT],
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(TrackingDimensionGroup)[1]', 'BIGINT'), '0') AS [TRACKINGDIMENSIONGROUP]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/EcoResProduct/EcoResTrackingDimensionGroupProduct') AS T(c)
	) AS source ([PRODUCT], [RECID], [TRACKINGDIMENSIONGROUP])
	ON (target.[RECID] = source.[RECID])
	WHEN NOT MATCHED THEN
		INSERT ([PRODUCT], [RECID], [TRACKINGDIMENSIONGROUP])
		VALUES (source.[PRODUCT], source.[RECID], source.[TRACKINGDIMENSIONGROUP])
	WHEN MATCHED THEN
		UPDATE SET target.[PRODUCT] = source.[PRODUCT], target.[RECID] = source.[RECID], target.[TRACKINGDIMENSIONGROUP] = source.[TRACKINGDIMENSIONGROUP];

	SELECT @i_Error = @@ERROR;
	IF @i_Error <> 0
	BEGIN
		SET @i_ReturnCode = @i_Error;
		GOTO exit_label;
	END;

	-- EcoResProductTranslation
	PRINT 'Upserting into [ax].ECORESPRODUCTTRANSLATION ..'
	MERGE [ax].ECORESPRODUCTTRANSLATION AS target
	USING (
		SELECT DISTINCT
			COALESCE(T.c.value('(Product)[1]', 'BIGINT'), T.c.value('(../RecId)[1]', 'BIGINT')) AS [PRODUCT],
			ISNULL(T.c.value('(Description)[1]', 'NVARCHAR(1000)'), '') AS [DESCRIPTION],
			ISNULL(T.c.value('(LanguageId)[1]', 'NVARCHAR(7)'), '') AS [LANGUAGEID],
			ISNULL(T.c.value('(Name)[1]', 'NVARCHAR(60)'), '') AS [NAME],
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/InventDimCombination/EcoResProduct/EcoResProductTranslation') AS T(c)
		UNION
		SELECT DISTINCT
			COALESCE(T.c.value('(Product)[1]', 'BIGINT'), T.c.value('(../RecId)[1]', 'BIGINT')) AS [PRODUCT],
			ISNULL(T.c.value('(Description)[1]', 'NVARCHAR(1000)'), '') AS [DESCRIPTION],
			ISNULL(T.c.value('(LanguageId)[1]', 'NVARCHAR(7)'), '') AS [LANGUAGEID],
			ISNULL(T.c.value('(Name)[1]', 'NVARCHAR(60)'), '') AS [NAME],
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/EcoResProduct/EcoResProductTranslation') AS T(c)
	) AS source ([PRODUCT], [DESCRIPTION], [LANGUAGEID], [NAME], [RECID])
	ON (target.[RECID] = source.[RECID])
	WHEN NOT MATCHED THEN
		INSERT ([PRODUCT], [DESCRIPTION], [LANGUAGEID], [NAME], [RECID])
		VALUES (source.[PRODUCT], source.[DESCRIPTION], source.[LANGUAGEID], source.[NAME], source.[RECID])
	WHEN MATCHED THEN
		UPDATE SET target.[PRODUCT] = source.[PRODUCT], target.[DESCRIPTION] = source.[DESCRIPTION], target.[LANGUAGEID] = source.[LANGUAGEID], target.[NAME] = source.[NAME], target.[RECID] = source.[RECID];

	SELECT @i_Error = @@ERROR;
	IF @i_Error <> 0
	BEGIN
		SET @i_ReturnCode = @i_Error;
		GOTO exit_label;
	END;

	-- EcoResProductVariantDimensionValue
	PRINT 'Upserting into [ax].ECORESPRODUCTVARIANTDIMENSIONVALUE ..'
	MERGE [ax].ECORESPRODUCTVARIANTDIMENSIONVALUE AS target
	USING (
		SELECT DISTINCT
			COALESCE(T.c.value('(DistinctProductVariant)[1]', 'BIGINT'), T.c.value('(../RecId)[1]', 'BIGINT')) AS [DISTINCTPRODUCTVARIANT],
			ISNULL(T.c.value('(ProductDimensionAttribute)[1]', 'BIGINT'), '0') AS [PRODUCTDIMENSIONATTRIBUTE],
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(RelationType)[1]', 'BIGINT'), 0) AS [RELATIONTYPE],
			ISNULL(T.c.value('(RelationType)[1]', 'BIGINT'), 0) AS [INSTANCERELATIONTYPE]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/InventDimCombination/EcoResProduct/EcoResProductVariantDimensionValue') AS T(c)
	) AS source ([DISTINCTPRODUCTVARIANT], [PRODUCTDIMENSIONATTRIBUTE], [RECID], [RELATIONTYPE], [INSTANCERELATIONTYPE])
	ON (target.[RECID] = source.[RECID])
	WHEN NOT MATCHED THEN
		INSERT ([DISTINCTPRODUCTVARIANT], [PRODUCTDIMENSIONATTRIBUTE], [RECID], [RELATIONTYPE], [INSTANCERELATIONTYPE])
		VALUES (source.[DISTINCTPRODUCTVARIANT], source.[PRODUCTDIMENSIONATTRIBUTE], source.[RECID], source.[RELATIONTYPE], source.[INSTANCERELATIONTYPE])
	WHEN MATCHED THEN
		UPDATE SET target.[DISTINCTPRODUCTVARIANT] = source.[DISTINCTPRODUCTVARIANT], target.[PRODUCTDIMENSIONATTRIBUTE] = source.[PRODUCTDIMENSIONATTRIBUTE], target.[RECID] = source.[RECID], target.[RELATIONTYPE] = source.[RELATIONTYPE], target.[INSTANCERELATIONTYPE] = source.[INSTANCERELATIONTYPE];

	SELECT @i_Error = @@ERROR;
	IF @i_Error <> 0
	BEGIN
		SET @i_ReturnCode = @i_Error;
		GOTO exit_label;
	END;

	-- EcoResProductVariantColor
	PRINT 'Upserting into [ax].ECORESPRODUCTVARIANTCOLOR ..'
	MERGE [ax].ECORESPRODUCTVARIANTCOLOR AS target
	USING (
		SELECT DISTINCT
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(Color)[1]', 'BIGINT'), '0') AS [COLOR]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/InventDimCombination/EcoResProduct/EcoResProductVariantDimensionValue/EcoResProductVariantColor') AS T(c)
	) AS source ([RECID], [COLOR])
	ON (target.[RECID] = source.[RECID])
	WHEN NOT MATCHED THEN
		INSERT ([RECID], [COLOR])
		VALUES (source.[RECID], source.[COLOR])
	WHEN MATCHED THEN
		UPDATE SET target.[RECID] = source.[RECID], target.[COLOR] = source.[COLOR];

	SELECT @i_Error = @@ERROR;
	IF @i_Error <> 0
	BEGIN
		SET @i_ReturnCode = @i_Error;
		GOTO exit_label;
	END;

	-- EcoResProductVariantConfiguration
	PRINT 'Upserting into [ax].ECORESPRODUCTVARIANTCONFIGURATION ..'
	MERGE [ax].ECORESPRODUCTVARIANTCONFIGURATION AS target
	USING (
		SELECT DISTINCT
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(Configuration)[1]', 'BIGINT'), '0') AS [CONFIGURATION]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/InventDimCombination/EcoResProduct/EcoResProductVariantDimensionValue/EcoResProductVariantConfiguration') AS T(c)
	) AS source ([RECID], [CONFIGURATION])
	ON (target.[RECID] = source.[RECID])
	WHEN NOT MATCHED THEN
		INSERT ([RECID], [CONFIGURATION])
		VALUES (source.[RECID], source.[CONFIGURATION])
	WHEN MATCHED THEN
		UPDATE SET target.[RECID] = source.[RECID], target.[CONFIGURATION] = source.[CONFIGURATION];

	SELECT @i_Error = @@ERROR;
	IF @i_Error <> 0
	BEGIN
		SET @i_ReturnCode = @i_Error;
		GOTO exit_label;
	END;

	-- EcoResProductVariantSize
	PRINT 'Upserting into [ax].ECORESPRODUCTVARIANTSIZE ..'
	MERGE [ax].ECORESPRODUCTVARIANTSIZE AS target
	USING (
		SELECT DISTINCT
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(Size)[1]', 'BIGINT'), '0') AS [SIZE]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/InventDimCombination/EcoResProduct/EcoResProductVariantDimensionValue/EcoResProductVariantSize') AS T(c)
	) AS source ([RECID], [SIZE])
	ON (target.[RECID] = source.[RECID])
	WHEN NOT MATCHED THEN
		INSERT ([RECID], [SIZE])
		VALUES (source.[RECID], source.[SIZE])
	WHEN MATCHED THEN
		UPDATE SET target.[RECID] = source.[RECID], target.[SIZE] = source.[SIZE];

	SELECT @i_Error = @@ERROR;
	IF @i_Error <> 0
	BEGIN
		SET @i_ReturnCode = @i_Error;
		GOTO exit_label;
	END;

	-- EcoResProductVariantStyle
	PRINT 'Upserting into [ax].ECORESPRODUCTVARIANTSTYLE ..'
	MERGE [ax].ECORESPRODUCTVARIANTSTYLE AS target
	USING (
		SELECT DISTINCT
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(Style)[1]', 'BIGINT'), '0') AS [STYLE]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/InventDimCombination/EcoResProduct/EcoResProductVariantDimensionValue/EcoResProductVariantStyle') AS T(c)
	) AS source ([RECID], [STYLE])
	ON (target.[RECID] = source.[RECID])
	WHEN NOT MATCHED THEN
		INSERT ([RECID], [STYLE])
		VALUES (source.[RECID], source.[STYLE])
	WHEN MATCHED THEN
		UPDATE SET target.[RECID] = source.[RECID], target.[STYLE] = source.[STYLE];

	SELECT @i_Error = @@ERROR;
	IF @i_Error <> 0
	BEGIN
		SET @i_ReturnCode = @i_Error;
		GOTO exit_label;
	END;

	-- RetailGroupMemberLine
	PRINT 'Upserting into [ax].RETAILGROUPMEMBERLINE ..'
	MERGE [ax].RETAILGROUPMEMBERLINE AS target
	USING (
		SELECT DISTINCT
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(Category)[1]', 'BIGINT'), '0') AS [CATEGORY],
			ISNULL(T.c.value('(Product)[1]', 'BIGINT'), '0') AS [PRODUCT],
			ISNULL(T.c.value('(Variant)[1]', 'BIGINT'), '0') AS [VARIANT]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/InventDimCombination/EcoResProduct/RetailGroupMemberLine') AS T(c)
		UNION
		SELECT DISTINCT
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(Category)[1]', 'BIGINT'), '0') AS [CATEGORY],
			ISNULL(T.c.value('(Product)[1]', 'BIGINT'), '0') AS [PRODUCT],
			ISNULL(T.c.value('(Variant)[1]', 'BIGINT'), '0') AS [VARIANT]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/EcoResProduct/RetailGroupMemberLine') AS T(c)
	) AS source ([RECID], [CATEGORY], [PRODUCT], [VARIANT])
	ON (target.[RECID] = source.[RECID])
	WHEN NOT MATCHED THEN
		INSERT ([RECID], [CATEGORY], [PRODUCT], [VARIANT])
		VALUES (source.[RECID], source.[CATEGORY], source.[PRODUCT], source.[VARIANT])
	WHEN MATCHED THEN
		UPDATE SET target.[RECID] = source.[RECID], target.[CATEGORY] = source.[CATEGORY], target.[PRODUCT] = source.[PRODUCT], target.[VARIANT] = source.[VARIANT];

	SELECT @i_Error = @@ERROR;
	IF @i_Error <> 0
	BEGIN
		SET @i_ReturnCode = @i_Error;
		GOTO exit_label;
	END;

	-- RetailSpecialCategoryMember
	PRINT 'Upserting into [ax].RETAILSPECIALCATEGORYMEMBER ..'
	MERGE [ax].RETAILSPECIALCATEGORYMEMBER AS target
	USING (
		SELECT DISTINCT
			COALESCE(T.c.value('(RetailGroupMember)[1]', 'BIGINT'), T.c.value('(../RecId)[1]', 'BIGINT')) AS [RETAILGROUPMEMBER],
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(Category)[1]', 'BIGINT'), '0') AS [CATEGORY]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/InventDimCombination/EcoResProduct/RetailGroupMemberLine/RetailSpecialCategoryMember') AS T(c)
		UNION
		SELECT DISTINCT
			COALESCE(T.c.value('(RetailGroupMember)[1]', 'BIGINT'), T.c.value('(../RecId)[1]', 'BIGINT')) AS [RETAILGROUPMEMBER],
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(Category)[1]', 'BIGINT'), '0') AS [CATEGORY]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/EcoResProduct/RetailGroupMemberLine/RetailSpecialCategoryMember') AS T(c)
	) AS source ([RETAILGROUPMEMBER], [RECID], [CATEGORY])
	ON (target.[RECID] = source.[RECID])
	WHEN NOT MATCHED THEN
		INSERT ([RETAILGROUPMEMBER], [RECID], [CATEGORY])
		VALUES (source.[RETAILGROUPMEMBER], source.[RECID], source.[CATEGORY])
	WHEN MATCHED THEN
		UPDATE SET target.[RETAILGROUPMEMBER] = source.[RETAILGROUPMEMBER], target.[RECID] = source.[RECID], target.[CATEGORY] = source.[CATEGORY];

	SELECT @i_Error = @@ERROR;
	IF @i_Error <> 0
	BEGIN
		SET @i_ReturnCode = @i_Error;
		GOTO exit_label;
	END;

	-- RetailPubCatalogProduct
	PRINT 'Upserting into [ax].RETAILPUBCATALOGPRODUCT ..'
	MERGE [ax].RETAILPUBCATALOGPRODUCT AS target
	USING (
		SELECT DISTINCT
			COALESCE(T.c.value('(Catalog)[1]', 'BIGINT'), T.c.value('(../RecId)[1]', 'BIGINT')) AS [CATALOG],
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(Origin)[1]', 'BIGINT'), '0') AS [ORIGIN],
			ISNULL(T.c.value('(Product)[1]', 'BIGINT'), '0') AS [PRODUCT]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/InventDimCombination/EcoResProduct/RetailPubCatalogProduct') AS T(c)
		UNION
		SELECT DISTINCT
			COALESCE(T.c.value('(Catalog)[1]', 'BIGINT'), T.c.value('(../RecId)[1]', 'BIGINT')) AS [CATALOG],
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(Origin)[1]', 'BIGINT'), '0') AS [ORIGIN],
			ISNULL(T.c.value('(Product)[1]', 'BIGINT'), '0') AS [PRODUCT]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/EcoResProduct/RetailPubCatalogProduct') AS T(c)
	) AS source ([CATALOG], [RECID], [ORIGIN], [PRODUCT])
	ON (target.[RECID] = source.[RECID])
	WHEN NOT MATCHED THEN
		INSERT ([CATALOG], [RECID], [ORIGIN], [PRODUCT])
		VALUES (source.[CATALOG], source.[RECID], source.[ORIGIN], source.[PRODUCT])
	WHEN MATCHED THEN
		UPDATE SET target.[CATALOG] = source.[CATALOG], target.[RECID] = source.[RECID], target.[ORIGIN] = source.[ORIGIN], target.[PRODUCT] = source.[PRODUCT];

	SELECT @i_Error = @@ERROR;
	IF @i_Error <> 0
	BEGIN
		SET @i_ReturnCode = @i_Error;
		GOTO exit_label;
	END;

	-- RetailPubCatalogProductCategory
	PRINT 'Upserting into [ax].RETAILPUBCATALOGPRODUCTCATEGORY ..'
	MERGE [ax].RETAILPUBCATALOGPRODUCTCATEGORY AS target
	USING (
		SELECT DISTINCT
			COALESCE(T.c.value('(CatalogProduct)[1]', 'BIGINT'), T.c.value('(../RecId)[1]', 'BIGINT')) AS [CATALOGPRODUCT],
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(Category)[1]', 'BIGINT'), '0') AS [CATEGORY],
			ISNULL(T.c.value('(CategoryHierarchy)[1]', 'BIGINT'), '0') AS [CATEGORYHIERARCHY],
			ISNULL(T.c.value('(Origin)[1]', 'BIGINT'), '0') AS [ORIGIN]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/InventDimCombination/EcoResProduct/RetailPubCatalogProduct/RetailPubCatalogProductCategory') AS T(c)
		UNION
		SELECT DISTINCT
			COALESCE(T.c.value('(CatalogProduct)[1]', 'BIGINT'), T.c.value('(../RecId)[1]', 'BIGINT')) AS [CATALOGPRODUCT],
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(Category)[1]', 'BIGINT'), '0') AS [CATEGORY],
			ISNULL(T.c.value('(CategoryHierarchy)[1]', 'BIGINT'), '0') AS [CATEGORYHIERARCHY],
			ISNULL(T.c.value('(Origin)[1]', 'BIGINT'), '0') AS [ORIGIN]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/EcoResProduct/RetailPubCatalogProduct/RetailPubCatalogProductCategory') AS T(c)
	) AS source ([CATALOGPRODUCT], [RECID], [CATEGORY], [CATEGORYHIERARCHY], [ORIGIN])
	ON (target.[RECID] = source.[RECID])
	WHEN NOT MATCHED THEN
		INSERT ([CATALOGPRODUCT], [RECID], [CATEGORY], [CATEGORYHIERARCHY], [ORIGIN])
		VALUES (source.[CATALOGPRODUCT], source.[RECID], source.[CATEGORY], source.[CATEGORYHIERARCHY], source.[ORIGIN])
	WHEN MATCHED THEN
		UPDATE SET target.[CATALOGPRODUCT] = source.[CATALOGPRODUCT], target.[RECID] = source.[RECID], target.[CATEGORY] = source.[CATEGORY], target.[CATEGORYHIERARCHY] = source.[CATEGORYHIERARCHY], target.[ORIGIN] = source.[ORIGIN];

	SELECT @i_Error = @@ERROR;
	IF @i_Error <> 0
	BEGIN
		SET @i_ReturnCode = @i_Error;
		GOTO exit_label;
	END;

	-- RetailPubCatalogProductRelation
	PRINT 'Upserting into [ax].RETAILPUBCATALOGPRODUCTRELATION ..'
	MERGE [ax].RETAILPUBCATALOGPRODUCTRELATION AS target
	USING (
		SELECT DISTINCT
			COALESCE(T.c.value('(CatalogProduct)[1]', 'BIGINT'), T.c.value('(../RecId)[1]', 'BIGINT')) AS [CATALOGPRODUCT],
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(Origin)[1]', 'BIGINT'), '0') AS [ORIGIN],
			ISNULL(T.c.value('(ProductRelationType)[1]', 'BIGINT'), '0') AS [PRODUCTRELATIONTYPE],
			ISNULL(T.c.value('(RelatedProduct)[1]', 'BIGINT'), '0') AS [RELATEDPRODUCT]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/InventDimCombination/EcoResProduct/RetailPubCatalogProduct/RetailPubCatalogProductRelation') AS T(c)
		UNION
		SELECT DISTINCT
			COALESCE(T.c.value('(CatalogProduct)[1]', 'BIGINT'), T.c.value('(../RecId)[1]', 'BIGINT')) AS [CATALOGPRODUCT],
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(Origin)[1]', 'BIGINT'), '0') AS [ORIGIN],
			ISNULL(T.c.value('(ProductRelationType)[1]', 'BIGINT'), '0') AS [PRODUCTRELATIONTYPE],
			ISNULL(T.c.value('(RelatedProduct)[1]', 'BIGINT'), '0') AS [RELATEDPRODUCT]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/EcoResProduct/RetailPubCatalogProduct/RetailPubCatalogProductRelation') AS T(c)
	) AS source ([CATALOGPRODUCT], [RECID], [ORIGIN], [PRODUCTRELATIONTYPE], [RELATEDPRODUCT])
	ON (target.[RECID] = source.[RECID])
	WHEN NOT MATCHED THEN
		INSERT ([CATALOGPRODUCT], [RECID], [ORIGIN], [PRODUCTRELATIONTYPE], [RELATEDPRODUCT])
		VALUES (source.[CATALOGPRODUCT], source.[RECID], source.[ORIGIN], source.[PRODUCTRELATIONTYPE], source.[RELATEDPRODUCT])
	WHEN MATCHED THEN
		UPDATE SET target.[CATALOGPRODUCT] = source.[CATALOGPRODUCT], target.[RECID] = source.[RECID], target.[ORIGIN] = source.[ORIGIN], target.[PRODUCTRELATIONTYPE] = source.[PRODUCTRELATIONTYPE], target.[RELATEDPRODUCT] = source.[RELATEDPRODUCT];

	SELECT @i_Error = @@ERROR;
	IF @i_Error <> 0
	BEGIN
		SET @i_ReturnCode = @i_Error;
		GOTO exit_label;
	END;

	-- RetailPubCatalogProductRelationExclusion
	PRINT 'Upserting into [ax].RETAILPUBCATALOGPRODUCTRELATIONEXCLUSION ..'
	MERGE [ax].RETAILPUBCATALOGPRODUCTRELATIONEXCLUSION AS target
	USING (
		SELECT DISTINCT
			COALESCE(T.c.value('(CatalogProduct)[1]', 'BIGINT'), T.c.value('(../RecId)[1]', 'BIGINT')) AS [CATALOGPRODUCT],
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(Origin)[1]', 'BIGINT'), '0') AS [ORIGIN],
			ISNULL(T.c.value('(ProductRelation)[1]', 'BIGINT'), '0') AS [PRODUCTRELATION]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/InventDimCombination/EcoResProduct/RetailPubCatalogProduct/RetailPubCatalogProductRelationExclusion') AS T(c)
		UNION
		SELECT DISTINCT
			COALESCE(T.c.value('(CatalogProduct)[1]', 'BIGINT'), T.c.value('(../RecId)[1]', 'BIGINT')) AS [CATALOGPRODUCT],
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(Origin)[1]', 'BIGINT'), '0') AS [ORIGIN],
			ISNULL(T.c.value('(ProductRelation)[1]', 'BIGINT'), '0') AS [PRODUCTRELATION]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/EcoResProduct/RetailPubCatalogProduct/RetailPubCatalogProductRelationExclusion') AS T(c)
	) AS source ([CATALOGPRODUCT], [RECID], [ORIGIN], [PRODUCTRELATION])
	ON (target.[RECID] = source.[RECID])
	WHEN NOT MATCHED THEN
		INSERT ([CATALOGPRODUCT], [RECID], [ORIGIN], [PRODUCTRELATION])
		VALUES (source.[CATALOGPRODUCT], source.[RECID], source.[ORIGIN], source.[PRODUCTRELATION])
	WHEN MATCHED THEN
		UPDATE SET target.[CATALOGPRODUCT] = source.[CATALOGPRODUCT], target.[RECID] = source.[RECID], target.[ORIGIN] = source.[ORIGIN], target.[PRODUCTRELATION] = source.[PRODUCTRELATION];

	SELECT @i_Error = @@ERROR;
	IF @i_Error <> 0
	BEGIN
		SET @i_ReturnCode = @i_Error;
		GOTO exit_label;
	END;

	-- RetailPubProductAttributeValue
	PRINT 'Upserting into [ax].RETAILPUBPRODUCTATTRIBUTEVALUE ..'
	MERGE [ax].RETAILPUBPRODUCTATTRIBUTEVALUE AS target
	USING (
		SELECT DISTINCT
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(Attribute)[1]', 'BIGINT'), '0') AS [ATTRIBUTE],
			ISNULL(T.c.value('(Catalog)[1]', 'BIGINT'), '0') AS [CATALOG],
			ISNULL(T.c.value('(DateTimeValue)[1]', 'DATETIME'), '1900-01-01 00:00:00.000') AS [DATETIMEVALUE],
			ISNULL(T.c.value('(FloatValue)[1]', 'NUMERIC(32, 16)'), '0') AS [FLOATVALUE],
			ISNULL(T.c.value('(InternalOrganization)[1]', 'BIGINT'), '0') AS [INTERNALORGANIZATION],
			ISNULL(T.c.value('(IntValue)[1]', 'INT'), '0') AS [INTVALUE],
			ISNULL(T.c.value('(LanguageId)[1]', 'NVARCHAR(7)'), '') AS [LANGUAGEID],
			ISNULL(T.c.value('(Product)[1]', 'BIGINT'), '0') AS [PRODUCT],
			ISNULL(T.c.value('(TextValue)[1]', 'NVARCHAR(1999)'), '') AS [TEXTVALUE],
			ISNULL(T.c.value('(UnitOfMeasure)[1]', 'BIGINT'), '0') AS [UNITOFMEASURE]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/InventDimCombination/EcoResProduct/RetailPubProductAttributeValue') AS T(c)
		UNION
		SELECT DISTINCT
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(Attribute)[1]', 'BIGINT'), '0') AS [ATTRIBUTE],
			ISNULL(T.c.value('(Catalog)[1]', 'BIGINT'), '0') AS [CATALOG],
			ISNULL(T.c.value('(DateTimeValue)[1]', 'DATETIME'), '1900-01-01 00:00:00.000') AS [DATETIMEVALUE],
			ISNULL(T.c.value('(FloatValue)[1]', 'NUMERIC(32, 16)'), '0') AS [FLOATVALUE],
			ISNULL(T.c.value('(InternalOrganization)[1]', 'BIGINT'), '0') AS [INTERNALORGANIZATION],
			ISNULL(T.c.value('(IntValue)[1]', 'INT'), '0') AS [INTVALUE],
			ISNULL(T.c.value('(LanguageId)[1]', 'NVARCHAR(7)'), '') AS [LANGUAGEID],
			ISNULL(T.c.value('(Product)[1]', 'BIGINT'), '0') AS [PRODUCT],
			ISNULL(T.c.value('(TextValue)[1]', 'NVARCHAR(1999)'), '') AS [TEXTVALUE],
			ISNULL(T.c.value('(UnitOfMeasure)[1]', 'BIGINT'), '0') AS [UNITOFMEASURE]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/EcoResProduct/RetailPubProductAttributeValue') AS T(c)
	) AS source ([RECID], [ATTRIBUTE], [CATALOG], [DATETIMEVALUE], [FLOATVALUE], [INTERNALORGANIZATION], [INTVALUE], [LANGUAGEID], [PRODUCT], [TEXTVALUE], [UNITOFMEASURE])
	ON (target.[RECID] = source.[RECID])
	WHEN NOT MATCHED THEN
		INSERT ([RECID], [ATTRIBUTE], [CATALOG], [DATETIMEVALUE], [FLOATVALUE], [INTERNALORGANIZATION], [INTVALUE], [LANGUAGEID], [PRODUCT], [TEXTVALUE], [UNITOFMEASURE])
		VALUES (source.[RECID], source.[ATTRIBUTE], source.[CATALOG], source.[DATETIMEVALUE], source.[FLOATVALUE], source.[INTERNALORGANIZATION], source.[INTVALUE], source.[LANGUAGEID], source.[PRODUCT], source.[TEXTVALUE], source.[UNITOFMEASURE])
	WHEN MATCHED THEN
		UPDATE SET target.[RECID] = source.[RECID], target.[ATTRIBUTE] = source.[ATTRIBUTE], target.[CATALOG] = source.[CATALOG], target.[DATETIMEVALUE] = source.[DATETIMEVALUE], target.[FLOATVALUE] = source.[FLOATVALUE], target.[INTERNALORGANIZATION] = source.[INTERNALORGANIZATION], target.[INTVALUE] = source.[INTVALUE], target.[LANGUAGEID] = source.[LANGUAGEID], target.[PRODUCT] = source.[PRODUCT], target.[TEXTVALUE] = source.[TEXTVALUE], target.[UNITOFMEASURE] = source.[UNITOFMEASURE];

	SELECT @i_Error = @@ERROR;
	IF @i_Error <> 0
	BEGIN
		SET @i_ReturnCode = @i_Error;
		GOTO exit_label;
	END;

	-- RetailKitVariantComponent
	PRINT 'Upserting into [ax].RETAILKITVARIANTCOMPONENT ..'
	MERGE [ax].RETAILKITVARIANTCOMPONENT AS target
	USING (
		SELECT DISTINCT
			COALESCE(T.c.value('(KitVariant)[1]', 'BIGINT'), T.c.value('(../RecId)[1]', 'BIGINT')) AS [KITVARIANT],
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(Component)[1]', 'BIGINT'), '0') AS [COMPONENT],
			ISNULL(T.c.value('(ComponentRecId)[1]', 'BIGINT'), '0') AS [COMPONENTRECID],
			ISNULL(T.c.value('(Quantity)[1]', 'NUMERIC(32, 16)'), '0') AS [QUANTITY],
			ISNULL(T.c.value('(UnitOfMeasure)[1]', 'BIGINT'), '0') AS [UNITOFMEASURE]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/InventDimCombination/RetailKitVariantComponent') AS T(c)
	) AS source ([KITVARIANT], [RECID], [COMPONENT], [COMPONENTRECID], [QUANTITY], [UNITOFMEASURE])
	ON (target.[RECID] = source.[RECID])
	WHEN NOT MATCHED THEN
		INSERT ([KITVARIANT], [RECID], [COMPONENT], [COMPONENTRECID], [QUANTITY], [UNITOFMEASURE])
		VALUES (source.[KITVARIANT], source.[RECID], source.[COMPONENT], source.[COMPONENTRECID], source.[QUANTITY], source.[UNITOFMEASURE])
	WHEN MATCHED THEN
		UPDATE SET target.[KITVARIANT] = source.[KITVARIANT], target.[RECID] = source.[RECID], target.[COMPONENT] = source.[COMPONENT], target.[COMPONENTRECID] = source.[COMPONENTRECID], target.[QUANTITY] = source.[QUANTITY], target.[UNITOFMEASURE] = source.[UNITOFMEASURE];

	SELECT @i_Error = @@ERROR;
	IF @i_Error <> 0
	BEGIN
		SET @i_ReturnCode = @i_Error;
		GOTO exit_label;
	END;

	-- InventDim
	PRINT 'Upserting into [ax].INVENTDIM ..'
	MERGE [ax].INVENTDIM AS target
	USING (
		SELECT DISTINCT
			ISNULL(T.c.value('(ConfigId)[1]', 'NVARCHAR(10)'), '') AS [CONFIGID],
			ISNULL(T.c.value('(InventBatchId)[1]', 'NVARCHAR(20)'), '') AS [INVENTBATCHID],
			ISNULL(T.c.value('(InventColorId)[1]', 'NVARCHAR(10)'), '') AS [INVENTCOLORID],
			ISNULL(T.c.value('(inventDimId)[1]', 'NVARCHAR(20)'), '') AS [INVENTDIMID],
			ISNULL(T.c.value('(InventGTDId_RU)[1]', 'NVARCHAR(30)'), '') AS [INVENTGTDID_RU],
			ISNULL(T.c.value('(InventLocationId)[1]', 'NVARCHAR(10)'), '') AS [INVENTLOCATIONID],
			ISNULL(T.c.value('(InventOwnerId_RU)[1]', 'NVARCHAR(20)'), '') AS [INVENTOWNERID_RU],
			ISNULL(T.c.value('(InventProfileId_RU)[1]', 'NVARCHAR(10)'), '') AS [INVENTPROFILEID_RU],
			ISNULL(T.c.value('(InventSerialId)[1]', 'NVARCHAR(20)'), '') AS [INVENTSERIALID],
			ISNULL(T.c.value('(InventSiteId)[1]', 'NVARCHAR(10)'), '') AS [INVENTSITEID],
			ISNULL(T.c.value('(InventSizeId)[1]', 'NVARCHAR(10)'), '') AS [INVENTSIZEID],
			ISNULL(T.c.value('(InventStyleId)[1]', 'NVARCHAR(10)'), '') AS [INVENTSTYLEID],
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(WMSLocationId)[1]', 'NVARCHAR(10)'), '') AS [WMSLOCATIONID],
			ISNULL(T.c.value('(WMSPalletId)[1]', 'NVARCHAR(18)'), '') AS [WMSPALLETID],
			ISNULL(T.c.value('(SHA1HashHex)[1]', 'NVARCHAR(40)'), '') AS [SHA1HASHHEX],
			@nvc_DataAreaId AS [DATAAREAID]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/InventDimCombination/InventDim') AS T(c)
	) AS source ([CONFIGID], [INVENTBATCHID], [INVENTCOLORID], [INVENTDIMID], [INVENTGTDID_RU], [INVENTLOCATIONID], [INVENTOWNERID_RU], [INVENTPROFILEID_RU], [INVENTSERIALID], [INVENTSITEID], [INVENTSIZEID], [INVENTSTYLEID], [RECID], [WMSLOCATIONID], [WMSPALLETID], [SHA1HASHHEX], [DATAAREAID])
	ON (target.[INVENTDIMID] = source.[INVENTDIMID] AND target.[DATAAREAID] = source.[DATAAREAID])
	WHEN NOT MATCHED THEN
		INSERT ([CONFIGID], [INVENTBATCHID], [INVENTCOLORID], [INVENTDIMID], [INVENTGTDID_RU], [INVENTLOCATIONID], [INVENTOWNERID_RU], [INVENTPROFILEID_RU], [INVENTSERIALID], [INVENTSITEID], [INVENTSIZEID], [INVENTSTYLEID], [RECID], [WMSLOCATIONID], [WMSPALLETID], [SHA1HASHHEX], [DATAAREAID])
		VALUES (source.[CONFIGID], source.[INVENTBATCHID], source.[INVENTCOLORID], source.[INVENTDIMID], source.[INVENTGTDID_RU], source.[INVENTLOCATIONID], source.[INVENTOWNERID_RU], source.[INVENTPROFILEID_RU], source.[INVENTSERIALID], source.[INVENTSITEID], source.[INVENTSIZEID], source.[INVENTSTYLEID], source.[RECID], source.[WMSLOCATIONID], source.[WMSPALLETID], source.[SHA1HASHHEX], source.[DATAAREAID])
	WHEN MATCHED THEN
		UPDATE SET target.[CONFIGID] = source.[CONFIGID], target.[INVENTBATCHID] = source.[INVENTBATCHID], target.[INVENTCOLORID] = source.[INVENTCOLORID], target.[INVENTDIMID] = source.[INVENTDIMID], target.[INVENTGTDID_RU] = source.[INVENTGTDID_RU], target.[INVENTLOCATIONID] = source.[INVENTLOCATIONID], target.[INVENTOWNERID_RU] = source.[INVENTOWNERID_RU], target.[INVENTPROFILEID_RU] = source.[INVENTPROFILEID_RU], target.[INVENTSERIALID] = source.[INVENTSERIALID], target.[INVENTSITEID] = source.[INVENTSITEID], target.[INVENTSIZEID] = source.[INVENTSIZEID], target.[INVENTSTYLEID] = source.[INVENTSTYLEID], target.[RECID] = source.[RECID], target.[WMSLOCATIONID] = source.[WMSLOCATIONID], target.[WMSPALLETID] = source.[WMSPALLETID], target.[SHA1HASHHEX] = source.[SHA1HASHHEX], target.[DATAAREAID] = source.[DATAAREAID];

	SELECT @i_Error = @@ERROR;
	IF @i_Error <> 0
	BEGIN
		SET @i_ReturnCode = @i_Error;
		GOTO exit_label;
	END;

	-- InventItemBarcode
	PRINT 'Upserting into [ax].INVENTITEMBARCODE ..'
	MERGE [ax].INVENTITEMBARCODE AS target
	USING (
		SELECT DISTINCT
			COALESCE(T.c.value('(itemId)[1]', 'NVARCHAR(20)'), T.c.value('(../ItemId)[1]', 'NVARCHAR(20)')) AS [ITEMID],
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(itemBarCode)[1]', 'NVARCHAR(80)'), '') AS [ITEMBARCODE],
			ISNULL(T.c.value('(inventDimId)[1]', 'NVARCHAR(20)'), '') AS [INVENTDIMID],
			ISNULL(T.c.value('(barcodeSetupId)[1]', 'NVARCHAR(10)'), '') AS [BARCODESETUPID],
			CASE T.c.value('(useForPrinting)[1]', 'NVARCHAR(4000)')
				WHEN 'No' THEN 0
				WHEN 'Yes' THEN 1
				ELSE 0
			END AS [USEFORPRINTING],
			CASE T.c.value('(useForInput)[1]', 'NVARCHAR(4000)')
				WHEN 'No' THEN 0
				WHEN 'Yes' THEN 1
				ELSE 0
			END AS [USEFORINPUT],
			ISNULL(T.c.value('(description)[1]', 'NVARCHAR(60)'), '') AS [DESCRIPTION],
			ISNULL(T.c.value('(qty)[1]', 'NUMERIC(32, 16)'), '0') AS [QTY],
			ISNULL(T.c.value('(UnitID)[1]', 'NVARCHAR(10)'), '') AS [UNITID],
			ISNULL(T.c.value('(RetailVariantId)[1]', 'NVARCHAR(10)'), '') AS [RETAILVARIANTID],
			CASE T.c.value('(RetailShowForItem)[1]', 'NVARCHAR(4000)')
				WHEN 'No' THEN 0
				WHEN 'Yes' THEN 1
				ELSE 0
			END AS [RETAILSHOWFORITEM],
			CASE T.c.value('(Blocked)[1]', 'NVARCHAR(4000)')
				WHEN 'No' THEN 0
				WHEN 'Yes' THEN 1
				ELSE 0
			END AS [BLOCKED],
			@nvc_DataAreaId AS [DATAAREAID]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/InventItemBarcode') AS T(c)
	) AS source ([ITEMID], [RECID], [ITEMBARCODE], [INVENTDIMID], [BARCODESETUPID], [USEFORPRINTING], [USEFORINPUT], [DESCRIPTION], [QTY], [UNITID], [RETAILVARIANTID], [RETAILSHOWFORITEM], [BLOCKED], [DATAAREAID])
	ON (target.[RECID] = source.[RECID])
	WHEN NOT MATCHED THEN
		INSERT ([ITEMID], [RECID], [ITEMBARCODE], [INVENTDIMID], [BARCODESETUPID], [USEFORPRINTING], [USEFORINPUT], [DESCRIPTION], [QTY], [UNITID], [RETAILVARIANTID], [RETAILSHOWFORITEM], [BLOCKED], [DATAAREAID])
		VALUES (source.[ITEMID], source.[RECID], source.[ITEMBARCODE], source.[INVENTDIMID], source.[BARCODESETUPID], source.[USEFORPRINTING], source.[USEFORINPUT], source.[DESCRIPTION], source.[QTY], source.[UNITID], source.[RETAILVARIANTID], source.[RETAILSHOWFORITEM], source.[BLOCKED], source.[DATAAREAID])
	WHEN MATCHED THEN
		UPDATE SET target.[ITEMID] = source.[ITEMID], target.[RECID] = source.[RECID], target.[ITEMBARCODE] = source.[ITEMBARCODE], target.[INVENTDIMID] = source.[INVENTDIMID], target.[BARCODESETUPID] = source.[BARCODESETUPID], target.[USEFORPRINTING] = source.[USEFORPRINTING], target.[USEFORINPUT] = source.[USEFORINPUT], target.[DESCRIPTION] = source.[DESCRIPTION], target.[QTY] = source.[QTY], target.[UNITID] = source.[UNITID], target.[RETAILVARIANTID] = source.[RETAILVARIANTID], target.[RETAILSHOWFORITEM] = source.[RETAILSHOWFORITEM], target.[BLOCKED] = source.[BLOCKED], target.[DATAAREAID] = source.[DATAAREAID];

	SELECT @i_Error = @@ERROR;
	IF @i_Error <> 0
	BEGIN
		SET @i_ReturnCode = @i_Error;
		GOTO exit_label;
	END;

	-- InventSerial
	PRINT 'Upserting into [ax].INVENTSERIAL ..'
	MERGE [ax].INVENTSERIAL AS target
	USING (
		SELECT DISTINCT
			COALESCE(T.c.value('(ItemId)[1]', 'NVARCHAR(20)'), T.c.value('(../ItemId)[1]', 'NVARCHAR(20)')) AS [ITEMID],
			ISNULL(T.c.value('(Description)[1]', 'NVARCHAR(max)'), '') AS [DESCRIPTION],
			ISNULL(T.c.value('(InventSerialId)[1]', 'NVARCHAR(20)'), '') AS [INVENTSERIALID],
			ISNULL(T.c.value('(ProdDate)[1]', 'DATE'), '1900-01-01') AS [PRODDATE],
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(RFIDTagId)[1]', 'NVARCHAR(24)'), '') AS [RFIDTAGID],
			@nvc_DataAreaId AS [DATAAREAID]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/InventSerial') AS T(c)
	) AS source ([ITEMID], [DESCRIPTION], [INVENTSERIALID], [PRODDATE], [RECID], [RFIDTAGID], [DATAAREAID])
	ON (target.[ITEMID] = source.[ITEMID] AND target.[INVENTSERIALID] = source.[INVENTSERIALID] AND target.[DATAAREAID] = source.[DATAAREAID])
	WHEN NOT MATCHED THEN
		INSERT ([ITEMID], [DESCRIPTION], [INVENTSERIALID], [PRODDATE], [RECID], [RFIDTAGID], [DATAAREAID])
		VALUES (source.[ITEMID], source.[DESCRIPTION], source.[INVENTSERIALID], source.[PRODDATE], source.[RECID], source.[RFIDTAGID], source.[DATAAREAID])
	WHEN MATCHED THEN
		UPDATE SET target.[ITEMID] = source.[ITEMID], target.[DESCRIPTION] = source.[DESCRIPTION], target.[INVENTSERIALID] = source.[INVENTSERIALID], target.[PRODDATE] = source.[PRODDATE], target.[RECID] = source.[RECID], target.[RFIDTAGID] = source.[RFIDTAGID], target.[DATAAREAID] = source.[DATAAREAID];

	SELECT @i_Error = @@ERROR;
	IF @i_Error <> 0
	BEGIN
		SET @i_ReturnCode = @i_Error;
		GOTO exit_label;
	END;

	-- RetailDlvModeProductExploded
	PRINT 'Upserting into [ax].RETAILDLVMODEPRODUCTEXPLODED ..'
	MERGE [ax].RETAILDLVMODEPRODUCTEXPLODED AS target
	USING (
		SELECT DISTINCT
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(DlvMode)[1]', 'BIGINT'), '0') AS [DLVMODE],
			ISNULL(T.c.value('(InventDim)[1]', 'NVARCHAR(20)'), '') AS [INVENTDIM],
			ISNULL(T.c.value('(ItemId)[1]', 'NVARCHAR(20)'), '') AS [ITEMID],
			@nvc_DataAreaId AS [DATAAREAID]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/RetailDlvModeProductExploded') AS T(c)
	) AS source ([RECID], [DLVMODE], [INVENTDIM], [ITEMID], [DATAAREAID])
	ON (target.[RECID] = source.[RECID])
	WHEN NOT MATCHED THEN
		INSERT ([RECID], [DLVMODE], [INVENTDIM], [ITEMID], [DATAAREAID])
		VALUES (source.[RECID], source.[DLVMODE], source.[INVENTDIM], source.[ITEMID], source.[DATAAREAID])
	WHEN MATCHED THEN
		UPDATE SET target.[RECID] = source.[RECID], target.[DLVMODE] = source.[DLVMODE], target.[INVENTDIM] = source.[INVENTDIM], target.[ITEMID] = source.[ITEMID], target.[DATAAREAID] = source.[DATAAREAID];

	SELECT @i_Error = @@ERROR;
	IF @i_Error <> 0
	BEGIN
		SET @i_ReturnCode = @i_Error;
		GOTO exit_label;
	END;

	-- RetailInventLinkedItem
	PRINT 'Upserting into [ax].RETAILINVENTLINKEDITEM ..'
	MERGE [ax].RETAILINVENTLINKEDITEM AS target
	USING (
		SELECT DISTINCT
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(itemId)[1]', 'NVARCHAR(20)'), '') AS [ITEMID],
			ISNULL(T.c.value('(unit)[1]', 'NVARCHAR(10)'), '') AS [UNIT],
			ISNULL(T.c.value('(linkedItemId)[1]', 'NVARCHAR(20)'), '') AS [LINKEDITEMID],
			ISNULL(T.c.value('(qty)[1]', 'NUMERIC(32, 16)'), '0') AS [QTY],
			CASE T.c.value('(blocked)[1]', 'NVARCHAR(4000)')
				WHEN 'No' THEN 0
				WHEN 'Yes' THEN 1
				ELSE 0
			END AS [BLOCKED],
			@nvc_DataAreaId AS [DATAAREAID]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/RetailInventLinkedItem') AS T(c)
	) AS source ([RECID], [ITEMID], [UNIT], [LINKEDITEMID], [QTY], [BLOCKED], [DATAAREAID])
	ON (target.[ITEMID] = source.[ITEMID] AND target.[UNIT] = source.[UNIT] AND target.[LINKEDITEMID] = source.[LINKEDITEMID] AND target.[DATAAREAID] = source.[DATAAREAID])
	WHEN NOT MATCHED THEN
		INSERT ([RECID], [ITEMID], [UNIT], [LINKEDITEMID], [QTY], [BLOCKED], [DATAAREAID])
		VALUES (source.[RECID], source.[ITEMID], source.[UNIT], source.[LINKEDITEMID], source.[QTY], source.[BLOCKED], source.[DATAAREAID])
	WHEN MATCHED THEN
		UPDATE SET target.[RECID] = source.[RECID], target.[ITEMID] = source.[ITEMID], target.[UNIT] = source.[UNIT], target.[LINKEDITEMID] = source.[LINKEDITEMID], target.[QTY] = source.[QTY], target.[BLOCKED] = source.[BLOCKED], target.[DATAAREAID] = source.[DATAAREAID];

	SELECT @i_Error = @@ERROR;
	IF @i_Error <> 0
	BEGIN
		SET @i_ReturnCode = @i_Error;
		GOTO exit_label;
	END;

	-- InventTableModule
	PRINT 'Upserting into [ax].INVENTTABLEMODULE ..'
	MERGE [ax].INVENTTABLEMODULE AS target
	USING (
		SELECT DISTINCT
			COALESCE(T.c.value('(ItemId)[1]', 'NVARCHAR(20)'), T.c.value('(../ItemId)[1]', 'NVARCHAR(20)')) AS [ITEMID],
			CASE T.c.value('(AllocateMarkup)[1]', 'NVARCHAR(4000)')
				WHEN 'No' THEN 0
				WHEN 'Yes' THEN 1
				ELSE 0
			END AS [ALLOCATEMARKUP],
			CASE T.c.value('(EndDisc)[1]', 'NVARCHAR(4000)')
				WHEN 'No' THEN 0
				WHEN 'Yes' THEN 1
				ELSE 0
			END AS [ENDDISC],
			CASE T.c.value('(InterCompanyBlocked)[1]', 'NVARCHAR(4000)')
				WHEN 'No' THEN 0
				WHEN 'Yes' THEN 1
				ELSE 0
			END AS [INTERCOMPANYBLOCKED],
			ISNULL(T.c.value('(LineDisc)[1]', 'NVARCHAR(10)'), '') AS [LINEDISC],
			ISNULL(T.c.value('(Markup)[1]', 'NUMERIC(32, 16)'), '0') AS [MARKUP],
			ISNULL(T.c.value('(MarkupGroupId)[1]', 'NVARCHAR(10)'), '') AS [MARKUPGROUPID],
			ISNULL(T.c.value('(MaximumRetailPrice_IN)[1]', 'NUMERIC(32, 16)'), '0') AS [MAXIMUMRETAILPRICE_IN],
			CASE T.c.value('(ModuleType)[1]', 'NVARCHAR(4000)')
				WHEN 'Invent' THEN 0
				WHEN 'Purch' THEN 1
				WHEN 'Sales' THEN 2
				ELSE 0
			END AS [MODULETYPE],
			ISNULL(T.c.value('(MultiLineDisc)[1]', 'NVARCHAR(10)'), '') AS [MULTILINEDISC],
			ISNULL(T.c.value('(OverDeliveryPct)[1]', 'NUMERIC(32, 16)'), '0') AS [OVERDELIVERYPCT],
			ISNULL(T.c.value('(Price)[1]', 'NUMERIC(32, 16)'), '0') AS [PRICE],
			ISNULL(T.c.value('(PriceDate)[1]', 'DATE'), '1900-01-01') AS [PRICEDATE],
			ISNULL(T.c.value('(PriceQty)[1]', 'NUMERIC(32, 16)'), '0') AS [PRICEQTY],
			ISNULL(T.c.value('(PriceUnit)[1]', 'NUMERIC(32, 16)'), '0') AS [PRICEUNIT],
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(SuppItemGroupId)[1]', 'NVARCHAR(10)'), '') AS [SUPPITEMGROUPID],
			ISNULL(T.c.value('(TaxItemGroupId)[1]', 'NVARCHAR(10)'), '') AS [TAXITEMGROUPID],
			ISNULL(T.c.value('(UnderDeliveryPct)[1]', 'NUMERIC(32, 16)'), '0') AS [UNDERDELIVERYPCT],
			ISNULL(T.c.value('(UnitId)[1]', 'NVARCHAR(10)'), '') AS [UNITID],
			@nvc_DataAreaId AS [DATAAREAID]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/InventTableModule') AS T(c)
	) AS source ([ITEMID], [ALLOCATEMARKUP], [ENDDISC], [INTERCOMPANYBLOCKED], [LINEDISC], [MARKUP], [MARKUPGROUPID], [MAXIMUMRETAILPRICE_IN], [MODULETYPE], [MULTILINEDISC], [OVERDELIVERYPCT], [PRICE], [PRICEDATE], [PRICEQTY], [PRICEUNIT], [RECID], [SUPPITEMGROUPID], [TAXITEMGROUPID], [UNDERDELIVERYPCT], [UNITID], [DATAAREAID])
	ON (target.[ITEMID] = source.[ITEMID] AND target.[MODULETYPE] = source.[MODULETYPE] AND target.[DATAAREAID] = source.[DATAAREAID])
	WHEN NOT MATCHED THEN
		INSERT ([ITEMID], [ALLOCATEMARKUP], [ENDDISC], [INTERCOMPANYBLOCKED], [LINEDISC], [MARKUP], [MARKUPGROUPID], [MAXIMUMRETAILPRICE_IN], [MODULETYPE], [MULTILINEDISC], [OVERDELIVERYPCT], [PRICE], [PRICEDATE], [PRICEQTY], [PRICEUNIT], [RECID], [SUPPITEMGROUPID], [TAXITEMGROUPID], [UNDERDELIVERYPCT], [UNITID], [DATAAREAID])
		VALUES (source.[ITEMID], source.[ALLOCATEMARKUP], source.[ENDDISC], source.[INTERCOMPANYBLOCKED], source.[LINEDISC], source.[MARKUP], source.[MARKUPGROUPID], source.[MAXIMUMRETAILPRICE_IN], source.[MODULETYPE], source.[MULTILINEDISC], source.[OVERDELIVERYPCT], source.[PRICE], source.[PRICEDATE], source.[PRICEQTY], source.[PRICEUNIT], source.[RECID], source.[SUPPITEMGROUPID], source.[TAXITEMGROUPID], source.[UNDERDELIVERYPCT], source.[UNITID], source.[DATAAREAID])
	WHEN MATCHED THEN
		UPDATE SET target.[ITEMID] = source.[ITEMID], target.[ALLOCATEMARKUP] = source.[ALLOCATEMARKUP], target.[ENDDISC] = source.[ENDDISC], target.[INTERCOMPANYBLOCKED] = source.[INTERCOMPANYBLOCKED], target.[LINEDISC] = source.[LINEDISC], target.[MARKUP] = source.[MARKUP], target.[MARKUPGROUPID] = source.[MARKUPGROUPID], target.[MAXIMUMRETAILPRICE_IN] = source.[MAXIMUMRETAILPRICE_IN], target.[MODULETYPE] = source.[MODULETYPE], target.[MULTILINEDISC] = source.[MULTILINEDISC], target.[OVERDELIVERYPCT] = source.[OVERDELIVERYPCT], target.[PRICE] = source.[PRICE], target.[PRICEDATE] = source.[PRICEDATE], target.[PRICEQTY] = source.[PRICEQTY], target.[PRICEUNIT] = source.[PRICEUNIT], target.[RECID] = source.[RECID], target.[SUPPITEMGROUPID] = source.[SUPPITEMGROUPID], target.[TAXITEMGROUPID] = source.[TAXITEMGROUPID], target.[UNDERDELIVERYPCT] = source.[UNDERDELIVERYPCT], target.[UNITID] = source.[UNITID], target.[DATAAREAID] = source.[DATAAREAID];

	SELECT @i_Error = @@ERROR;
	IF @i_Error <> 0
	BEGIN
		SET @i_ReturnCode = @i_Error;
		GOTO exit_label;
	END;

	-- InventItemSalesSetup
	PRINT 'Upserting into [ax].INVENTITEMSALESSETUP ..'
	MERGE [ax].INVENTITEMSALESSETUP AS target
	USING (
		SELECT DISTINCT
			COALESCE(T.c.value('(ItemId)[1]', 'NVARCHAR(20)'), T.c.value('(../ItemId)[1]', 'NVARCHAR(20)')) AS [ITEMID],
			ISNULL(T.c.value('(InventDimId)[1]', 'NVARCHAR(20)'), '') AS [INVENTDIMID],
			ISNULL(T.c.value('(InventDimIdDefault)[1]', 'NVARCHAR(20)'), '') AS [INVENTDIMIDDEFAULT],
			CASE T.c.value('(MandatoryInventLocation)[1]', 'NVARCHAR(4000)')
				WHEN 'No' THEN 0
				WHEN 'Yes' THEN 1
				ELSE 0
			END AS [MANDATORYINVENTLOCATION],
			CASE T.c.value('(MandatoryInventSite)[1]', 'NVARCHAR(4000)')
				WHEN 'No' THEN 0
				WHEN 'Yes' THEN 1
				ELSE 0
			END AS [MANDATORYINVENTSITE],
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			@nvc_DataAreaId AS [DATAAREAID]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/InventItemSalesSetup') AS T(c)
	) AS source ([ITEMID], [INVENTDIMID], [INVENTDIMIDDEFAULT], [MANDATORYINVENTLOCATION], [MANDATORYINVENTSITE], [RECID], [DATAAREAID])
	ON (target.[ITEMID] = source.[ITEMID] AND target.[INVENTDIMID] = source.[INVENTDIMID] AND target.[DATAAREAID] = source.[DATAAREAID])
	WHEN NOT MATCHED THEN
		INSERT ([ITEMID], [INVENTDIMID], [INVENTDIMIDDEFAULT], [MANDATORYINVENTLOCATION], [MANDATORYINVENTSITE], [RECID], [DATAAREAID])
		VALUES (source.[ITEMID], source.[INVENTDIMID], source.[INVENTDIMIDDEFAULT], source.[MANDATORYINVENTLOCATION], source.[MANDATORYINVENTSITE], source.[RECID], source.[DATAAREAID])
	WHEN MATCHED THEN
		UPDATE SET target.[ITEMID] = source.[ITEMID], target.[INVENTDIMID] = source.[INVENTDIMID], target.[INVENTDIMIDDEFAULT] = source.[INVENTDIMIDDEFAULT], target.[MANDATORYINVENTLOCATION] = source.[MANDATORYINVENTLOCATION], target.[MANDATORYINVENTSITE] = source.[MANDATORYINVENTSITE], target.[RECID] = source.[RECID], target.[DATAAREAID] = source.[DATAAREAID];

	SELECT @i_Error = @@ERROR;
	IF @i_Error <> 0
	BEGIN
		SET @i_ReturnCode = @i_Error;
		GOTO exit_label;
	END;

	-- EcoResTrackingDimensionGroupItem
	PRINT 'Upserting into [ax].ECORESTRACKINGDIMENSIONGROUPITEM ..'
	MERGE [ax].ECORESTRACKINGDIMENSIONGROUPITEM AS target
	USING (
		SELECT DISTINCT
			ISNULL(T.c.value('(ItemDataAreaId)[1]', 'NVARCHAR(4)'), '') AS [ITEMDATAAREAID],
			ISNULL(T.c.value('(ItemId)[1]', 'NVARCHAR(20)'), '') AS [ITEMID],
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(TrackingDimensionGroup)[1]', 'BIGINT'), '0') AS [TRACKINGDIMENSIONGROUP]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/EcoResTrackingDimensionGroupItem') AS T(c)
	) AS source ([ITEMDATAAREAID], [ITEMID], [RECID], [TRACKINGDIMENSIONGROUP])
	ON (target.[RECID] = source.[RECID])
	WHEN NOT MATCHED THEN
		INSERT ([ITEMDATAAREAID], [ITEMID], [RECID], [TRACKINGDIMENSIONGROUP])
		VALUES (source.[ITEMDATAAREAID], source.[ITEMID], source.[RECID], source.[TRACKINGDIMENSIONGROUP])
	WHEN MATCHED THEN
		UPDATE SET target.[ITEMDATAAREAID] = source.[ITEMDATAAREAID], target.[ITEMID] = source.[ITEMID], target.[RECID] = source.[RECID], target.[TRACKINGDIMENSIONGROUP] = source.[TRACKINGDIMENSIONGROUP];

	SELECT @i_Error = @@ERROR;
	IF @i_Error <> 0
	BEGIN
		SET @i_ReturnCode = @i_Error;
		GOTO exit_label;
	END;

	-- InventItemGroupItem
	PRINT 'Upserting into [ax].INVENTITEMGROUPITEM ..'
	MERGE [ax].INVENTITEMGROUPITEM AS target
	USING (
		SELECT DISTINCT
			COALESCE(T.c.value('(ItemDataAreaId)[1]', 'NVARCHAR(4)'), T.c.value('(../dataAreaId)[1]', 'NVARCHAR(4)')) AS [ITEMDATAAREAID],
			COALESCE(T.c.value('(ItemId)[1]', 'NVARCHAR(20)'), T.c.value('(../ItemId)[1]', 'NVARCHAR(20)')) AS [ITEMID],
			ISNULL(T.c.value('(ItemGroupDataAreaId)[1]', 'NVARCHAR(4)'), '') AS [ITEMGROUPDATAAREAID],
			ISNULL(T.c.value('(ItemGroupId)[1]', 'NVARCHAR(10)'), '') AS [ITEMGROUPID],
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/InventItemGroupItem') AS T(c)
	) AS source ([ITEMDATAAREAID], [ITEMID], [ITEMGROUPDATAAREAID], [ITEMGROUPID], [RECID])
	ON (target.[RECID] = source.[RECID])
	WHEN NOT MATCHED THEN
		INSERT ([ITEMDATAAREAID], [ITEMID], [ITEMGROUPDATAAREAID], [ITEMGROUPID], [RECID])
		VALUES (source.[ITEMDATAAREAID], source.[ITEMID], source.[ITEMGROUPDATAAREAID], source.[ITEMGROUPID], source.[RECID])
	WHEN MATCHED THEN
		UPDATE SET target.[ITEMDATAAREAID] = source.[ITEMDATAAREAID], target.[ITEMID] = source.[ITEMID], target.[ITEMGROUPDATAAREAID] = source.[ITEMGROUPDATAAREAID], target.[ITEMGROUPID] = source.[ITEMGROUPID], target.[RECID] = source.[RECID];

	SELECT @i_Error = @@ERROR;
	IF @i_Error <> 0
	BEGIN
		SET @i_ReturnCode = @i_Error;
		GOTO exit_label;
	END;

	-- RetailInventAvailability
	PRINT 'Upserting into [ax].RETAILINVENTAVAILABILITY ..'
	MERGE [ax].RETAILINVENTAVAILABILITY AS target
	USING (
		SELECT DISTINCT
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(AvailPhysical)[1]', 'NUMERIC(32, 16)'), '0') AS [AVAILPHYSICAL],
			ISNULL(T.c.value('(InventDimRecId)[1]', 'BIGINT'), '0') AS [INVENTDIMRECID],
			ISNULL(T.c.value('(ItemRecId)[1]', 'BIGINT'), '0') AS [ITEMRECID],
			ISNULL(T.c.value('(LastInventTrans)[1]', 'BIGINT'), '0') AS [LASTINVENTTRANS]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/RetailInventAvailability') AS T(c)
	) AS source ([RECID], [AVAILPHYSICAL], [INVENTDIMRECID], [ITEMRECID], [LASTINVENTTRANS])
	ON (target.[RECID] = source.[RECID])
	WHEN NOT MATCHED THEN
		INSERT ([RECID], [AVAILPHYSICAL], [INVENTDIMRECID], [ITEMRECID], [LASTINVENTTRANS])
		VALUES (source.[RECID], source.[AVAILPHYSICAL], source.[INVENTDIMRECID], source.[ITEMRECID], source.[LASTINVENTTRANS])
	WHEN MATCHED THEN
		UPDATE SET target.[RECID] = source.[RECID], target.[AVAILPHYSICAL] = source.[AVAILPHYSICAL], target.[INVENTDIMRECID] = source.[INVENTDIMRECID], target.[ITEMRECID] = source.[ITEMRECID], target.[LASTINVENTTRANS] = source.[LASTINVENTTRANS];

	SELECT @i_Error = @@ERROR;
	IF @i_Error <> 0
	BEGIN
		SET @i_ReturnCode = @i_Error;
		GOTO exit_label;
	END;

	-- EcoResProductMasterColor
	PRINT 'Upserting into [ax].ECORESPRODUCTMASTERCOLOR ..'
	MERGE [ax].ECORESPRODUCTMASTERCOLOR AS target
	USING (
		SELECT DISTINCT
			COALESCE(T.c.value('(ColorProductMaster)[1]', 'BIGINT'), T.c.value('(../RecId)[1]', 'BIGINT')) AS [COLORPRODUCTMASTER],
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(Color)[1]', 'BIGINT'), '0') AS [COLOR]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/EcoResProduct/EcoResProductMaster/EcoResProductMasterColor') AS T(c)
	) AS source ([COLORPRODUCTMASTER], [RECID], [COLOR])
	ON (target.[RECID] = source.[RECID])
	WHEN NOT MATCHED THEN
		INSERT ([COLORPRODUCTMASTER], [RECID], [COLOR])
		VALUES (source.[COLORPRODUCTMASTER], source.[RECID], source.[COLOR])
	WHEN MATCHED THEN
		UPDATE SET target.[COLORPRODUCTMASTER] = source.[COLORPRODUCTMASTER], target.[RECID] = source.[RECID], target.[COLOR] = source.[COLOR];

	SELECT @i_Error = @@ERROR;
	IF @i_Error <> 0
	BEGIN
		SET @i_ReturnCode = @i_Error;
		GOTO exit_label;
	END;

	-- EcoResProductMasterDimensionValue
	PRINT 'Upserting into [ax].ECORESPRODUCTMASTERDIMENSIONVALUE ..'
	MERGE [ax].ECORESPRODUCTMASTERDIMENSIONVALUE AS target
	USING (
		SELECT DISTINCT
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(RetailDisplayOrder)[1]', 'NUMERIC(32, 16)'), '0') AS [RETAILDISPLAYORDER],
			ISNULL(T.c.value('(RetailWeight)[1]', 'INT'), '0') AS [RETAILWEIGHT],
			ISNULL(T.c.value('(RelationType)[1]', 'BIGINT'), 0) AS [RELATIONTYPE],
			ISNULL(T.c.value('(RelationType)[1]', 'BIGINT'), 0) AS [INSTANCERELATIONTYPE]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/EcoResProduct/EcoResProductMaster/EcoResProductMasterColor/EcoResProductMasterDimensionValue') AS T(c)
		UNION
		SELECT DISTINCT
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(RetailDisplayOrder)[1]', 'NUMERIC(32, 16)'), '0') AS [RETAILDISPLAYORDER],
			ISNULL(T.c.value('(RetailWeight)[1]', 'INT'), '0') AS [RETAILWEIGHT],
			ISNULL(T.c.value('(RelationType)[1]', 'BIGINT'), 0) AS [RELATIONTYPE],
			ISNULL(T.c.value('(RelationType)[1]', 'BIGINT'), 0) AS [INSTANCERELATIONTYPE]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/EcoResProduct/EcoResProductMaster/EcoResProductMasterConfiguration/EcoResProductMasterDimensionValue') AS T(c)
		UNION
		SELECT DISTINCT
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(RetailDisplayOrder)[1]', 'NUMERIC(32, 16)'), '0') AS [RETAILDISPLAYORDER],
			ISNULL(T.c.value('(RetailWeight)[1]', 'INT'), '0') AS [RETAILWEIGHT],
			ISNULL(T.c.value('(RelationType)[1]', 'BIGINT'), 0) AS [RELATIONTYPE],
			ISNULL(T.c.value('(RelationType)[1]', 'BIGINT'), 0) AS [INSTANCERELATIONTYPE]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/EcoResProduct/EcoResProductMaster/EcoResProductMasterSize/EcoResProductMasterDimensionValue') AS T(c)
		UNION
		SELECT DISTINCT
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(RetailDisplayOrder)[1]', 'NUMERIC(32, 16)'), '0') AS [RETAILDISPLAYORDER],
			ISNULL(T.c.value('(RetailWeight)[1]', 'INT'), '0') AS [RETAILWEIGHT],
			ISNULL(T.c.value('(RelationType)[1]', 'BIGINT'), 0) AS [RELATIONTYPE],
			ISNULL(T.c.value('(RelationType)[1]', 'BIGINT'), 0) AS [INSTANCERELATIONTYPE]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/EcoResProduct/EcoResProductMaster/EcoResProductMasterStyle/EcoResProductMasterDimensionValue') AS T(c)
	) AS source ([RECID], [RETAILDISPLAYORDER], [RETAILWEIGHT], [RELATIONTYPE], [INSTANCERELATIONTYPE])
	ON (target.[RECID] = source.[RECID])
	WHEN NOT MATCHED THEN
		INSERT ([RECID], [RETAILDISPLAYORDER], [RETAILWEIGHT], [RELATIONTYPE], [INSTANCERELATIONTYPE])
		VALUES (source.[RECID], source.[RETAILDISPLAYORDER], source.[RETAILWEIGHT], source.[RELATIONTYPE], source.[INSTANCERELATIONTYPE])
	WHEN MATCHED THEN
		UPDATE SET target.[RECID] = source.[RECID], target.[RETAILDISPLAYORDER] = source.[RETAILDISPLAYORDER], target.[RETAILWEIGHT] = source.[RETAILWEIGHT], target.[RELATIONTYPE] = source.[RELATIONTYPE], target.[INSTANCERELATIONTYPE] = source.[INSTANCERELATIONTYPE];

	SELECT @i_Error = @@ERROR;
	IF @i_Error <> 0
	BEGIN
		SET @i_ReturnCode = @i_Error;
		GOTO exit_label;
	END;

	-- EcoResProductMasterDimValueTranslation
	PRINT 'Upserting into [ax].ECORESPRODUCTMASTERDIMVALUETRANSLATION ..'
	MERGE [ax].ECORESPRODUCTMASTERDIMVALUETRANSLATION AS target
	USING (
		SELECT DISTINCT
			COALESCE(T.c.value('(ProductMasterDimensionValue)[1]', 'BIGINT'), T.c.value('(../RecId)[1]', 'BIGINT')) AS [PRODUCTMASTERDIMENSIONVALUE],
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(Description)[1]', 'NVARCHAR(1000)'), '') AS [DESCRIPTION],
			ISNULL(T.c.value('(LanguageId)[1]', 'NVARCHAR(7)'), '') AS [LANGUAGEID],
			ISNULL(T.c.value('(Name)[1]', 'NVARCHAR(60)'), '') AS [NAME]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/EcoResProduct/EcoResProductMaster/EcoResProductMasterColor/EcoResProductMasterDimensionValue/EcoResProductMasterDimValueTranslation') AS T(c)
		UNION
		SELECT DISTINCT
			COALESCE(T.c.value('(ProductMasterDimensionValue)[1]', 'BIGINT'), T.c.value('(../RecId)[1]', 'BIGINT')) AS [PRODUCTMASTERDIMENSIONVALUE],
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(Description)[1]', 'NVARCHAR(1000)'), '') AS [DESCRIPTION],
			ISNULL(T.c.value('(LanguageId)[1]', 'NVARCHAR(7)'), '') AS [LANGUAGEID],
			ISNULL(T.c.value('(Name)[1]', 'NVARCHAR(60)'), '') AS [NAME]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/EcoResProduct/EcoResProductMaster/EcoResProductMasterConfiguration/EcoResProductMasterDimensionValue/EcoResProductMasterDimValueTranslation') AS T(c)
		UNION
		SELECT DISTINCT
			COALESCE(T.c.value('(ProductMasterDimensionValue)[1]', 'BIGINT'), T.c.value('(../RecId)[1]', 'BIGINT')) AS [PRODUCTMASTERDIMENSIONVALUE],
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(Description)[1]', 'NVARCHAR(1000)'), '') AS [DESCRIPTION],
			ISNULL(T.c.value('(LanguageId)[1]', 'NVARCHAR(7)'), '') AS [LANGUAGEID],
			ISNULL(T.c.value('(Name)[1]', 'NVARCHAR(60)'), '') AS [NAME]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/EcoResProduct/EcoResProductMaster/EcoResProductMasterSize/EcoResProductMasterDimensionValue/EcoResProductMasterDimValueTranslation') AS T(c)
		UNION
		SELECT DISTINCT
			COALESCE(T.c.value('(ProductMasterDimensionValue)[1]', 'BIGINT'), T.c.value('(../RecId)[1]', 'BIGINT')) AS [PRODUCTMASTERDIMENSIONVALUE],
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(Description)[1]', 'NVARCHAR(1000)'), '') AS [DESCRIPTION],
			ISNULL(T.c.value('(LanguageId)[1]', 'NVARCHAR(7)'), '') AS [LANGUAGEID],
			ISNULL(T.c.value('(Name)[1]', 'NVARCHAR(60)'), '') AS [NAME]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/EcoResProduct/EcoResProductMaster/EcoResProductMasterStyle/EcoResProductMasterDimensionValue/EcoResProductMasterDimValueTranslation') AS T(c)
	) AS source ([PRODUCTMASTERDIMENSIONVALUE], [RECID], [DESCRIPTION], [LANGUAGEID], [NAME])
	ON (target.[RECID] = source.[RECID])
	WHEN NOT MATCHED THEN
		INSERT ([PRODUCTMASTERDIMENSIONVALUE], [RECID], [DESCRIPTION], [LANGUAGEID], [NAME])
		VALUES (source.[PRODUCTMASTERDIMENSIONVALUE], source.[RECID], source.[DESCRIPTION], source.[LANGUAGEID], source.[NAME])
	WHEN MATCHED THEN
		UPDATE SET target.[PRODUCTMASTERDIMENSIONVALUE] = source.[PRODUCTMASTERDIMENSIONVALUE], target.[RECID] = source.[RECID], target.[DESCRIPTION] = source.[DESCRIPTION], target.[LANGUAGEID] = source.[LANGUAGEID], target.[NAME] = source.[NAME];

	SELECT @i_Error = @@ERROR;
	IF @i_Error <> 0
	BEGIN
		SET @i_ReturnCode = @i_Error;
		GOTO exit_label;
	END;

	-- EcoResColor
	PRINT 'Upserting into [ax].ECORESCOLOR ..'
	MERGE [ax].ECORESCOLOR AS target
	USING (
		SELECT DISTINCT
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(Name)[1]', 'NVARCHAR(10)'), '') AS [NAME]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/EcoResProduct/EcoResProductMaster/EcoResProductMasterColor/EcoResColor') AS T(c)
	) AS source ([RECID], [NAME])
	ON (target.[RECID] = source.[RECID])
	WHEN NOT MATCHED THEN
		INSERT ([RECID], [NAME])
		VALUES (source.[RECID], source.[NAME])
	WHEN MATCHED THEN
		UPDATE SET target.[RECID] = source.[RECID], target.[NAME] = source.[NAME];

	SELECT @i_Error = @@ERROR;
	IF @i_Error <> 0
	BEGIN
		SET @i_ReturnCode = @i_Error;
		GOTO exit_label;
	END;

	-- EcoResProductMasterConfiguration
	PRINT 'Upserting into [ax].ECORESPRODUCTMASTERCONFIGURATION ..'
	MERGE [ax].ECORESPRODUCTMASTERCONFIGURATION AS target
	USING (
		SELECT DISTINCT
			COALESCE(T.c.value('(ConfigProductMaster)[1]', 'BIGINT'), T.c.value('(../RecId)[1]', 'BIGINT')) AS [CONFIGPRODUCTMASTER],
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(Configuration)[1]', 'BIGINT'), '0') AS [CONFIGURATION]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/EcoResProduct/EcoResProductMaster/EcoResProductMasterConfiguration') AS T(c)
	) AS source ([CONFIGPRODUCTMASTER], [RECID], [CONFIGURATION])
	ON (target.[RECID] = source.[RECID])
	WHEN NOT MATCHED THEN
		INSERT ([CONFIGPRODUCTMASTER], [RECID], [CONFIGURATION])
		VALUES (source.[CONFIGPRODUCTMASTER], source.[RECID], source.[CONFIGURATION])
	WHEN MATCHED THEN
		UPDATE SET target.[CONFIGPRODUCTMASTER] = source.[CONFIGPRODUCTMASTER], target.[RECID] = source.[RECID], target.[CONFIGURATION] = source.[CONFIGURATION];

	SELECT @i_Error = @@ERROR;
	IF @i_Error <> 0
	BEGIN
		SET @i_ReturnCode = @i_Error;
		GOTO exit_label;
	END;

	-- EcoResConfiguration
	PRINT 'Upserting into [ax].ECORESCONFIGURATION ..'
	MERGE [ax].ECORESCONFIGURATION AS target
	USING (
		SELECT DISTINCT
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(Name)[1]', 'NVARCHAR(10)'), '') AS [NAME]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/EcoResProduct/EcoResProductMaster/EcoResProductMasterConfiguration/EcoResConfiguration') AS T(c)
	) AS source ([RECID], [NAME])
	ON (target.[RECID] = source.[RECID])
	WHEN NOT MATCHED THEN
		INSERT ([RECID], [NAME])
		VALUES (source.[RECID], source.[NAME])
	WHEN MATCHED THEN
		UPDATE SET target.[RECID] = source.[RECID], target.[NAME] = source.[NAME];

	SELECT @i_Error = @@ERROR;
	IF @i_Error <> 0
	BEGIN
		SET @i_ReturnCode = @i_Error;
		GOTO exit_label;
	END;

	-- EcoResProductMasterSize
	PRINT 'Upserting into [ax].ECORESPRODUCTMASTERSIZE ..'
	MERGE [ax].ECORESPRODUCTMASTERSIZE AS target
	USING (
		SELECT DISTINCT
			COALESCE(T.c.value('(SizeProductMaster)[1]', 'BIGINT'), T.c.value('(../RecId)[1]', 'BIGINT')) AS [SIZEPRODUCTMASTER],
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(Size)[1]', 'BIGINT'), '0') AS [SIZE]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/EcoResProduct/EcoResProductMaster/EcoResProductMasterSize') AS T(c)
	) AS source ([SIZEPRODUCTMASTER], [RECID], [SIZE])
	ON (target.[RECID] = source.[RECID])
	WHEN NOT MATCHED THEN
		INSERT ([SIZEPRODUCTMASTER], [RECID], [SIZE])
		VALUES (source.[SIZEPRODUCTMASTER], source.[RECID], source.[SIZE])
	WHEN MATCHED THEN
		UPDATE SET target.[SIZEPRODUCTMASTER] = source.[SIZEPRODUCTMASTER], target.[RECID] = source.[RECID], target.[SIZE] = source.[SIZE];

	SELECT @i_Error = @@ERROR;
	IF @i_Error <> 0
	BEGIN
		SET @i_ReturnCode = @i_Error;
		GOTO exit_label;
	END;

	-- EcoResSize
	PRINT 'Upserting into [ax].ECORESSIZE ..'
	MERGE [ax].ECORESSIZE AS target
	USING (
		SELECT DISTINCT
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(Name)[1]', 'NVARCHAR(10)'), '') AS [NAME]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/EcoResProduct/EcoResProductMaster/EcoResProductMasterSize/EcoResSize') AS T(c)
	) AS source ([RECID], [NAME])
	ON (target.[RECID] = source.[RECID])
	WHEN NOT MATCHED THEN
		INSERT ([RECID], [NAME])
		VALUES (source.[RECID], source.[NAME])
	WHEN MATCHED THEN
		UPDATE SET target.[RECID] = source.[RECID], target.[NAME] = source.[NAME];

	SELECT @i_Error = @@ERROR;
	IF @i_Error <> 0
	BEGIN
		SET @i_ReturnCode = @i_Error;
		GOTO exit_label;
	END;

	-- EcoResProductMasterStyle
	PRINT 'Upserting into [ax].ECORESPRODUCTMASTERSTYLE ..'
	MERGE [ax].ECORESPRODUCTMASTERSTYLE AS target
	USING (
		SELECT DISTINCT
			COALESCE(T.c.value('(StyleProductMaster)[1]', 'BIGINT'), T.c.value('(../RecId)[1]', 'BIGINT')) AS [STYLEPRODUCTMASTER],
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(Style)[1]', 'BIGINT'), '0') AS [STYLE]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/EcoResProduct/EcoResProductMaster/EcoResProductMasterStyle') AS T(c)
	) AS source ([STYLEPRODUCTMASTER], [RECID], [STYLE])
	ON (target.[RECID] = source.[RECID])
	WHEN NOT MATCHED THEN
		INSERT ([STYLEPRODUCTMASTER], [RECID], [STYLE])
		VALUES (source.[STYLEPRODUCTMASTER], source.[RECID], source.[STYLE])
	WHEN MATCHED THEN
		UPDATE SET target.[STYLEPRODUCTMASTER] = source.[STYLEPRODUCTMASTER], target.[RECID] = source.[RECID], target.[STYLE] = source.[STYLE];

	SELECT @i_Error = @@ERROR;
	IF @i_Error <> 0
	BEGIN
		SET @i_ReturnCode = @i_Error;
		GOTO exit_label;
	END;

	-- EcoResStyle
	PRINT 'Upserting into [ax].ECORESSTYLE ..'
	MERGE [ax].ECORESSTYLE AS target
	USING (
		SELECT DISTINCT
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(Name)[1]', 'NVARCHAR(10)'), '') AS [NAME]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/EcoResProduct/EcoResProductMaster/EcoResProductMasterStyle/EcoResStyle') AS T(c)
	) AS source ([RECID], [NAME])
	ON (target.[RECID] = source.[RECID])
	WHEN NOT MATCHED THEN
		INSERT ([RECID], [NAME])
		VALUES (source.[RECID], source.[NAME])
	WHEN MATCHED THEN
		UPDATE SET target.[RECID] = source.[RECID], target.[NAME] = source.[NAME];

	SELECT @i_Error = @@ERROR;
	IF @i_Error <> 0
	BEGIN
		SET @i_ReturnCode = @i_Error;
		GOTO exit_label;
	END;

	-- RetailKit
	PRINT 'Upserting into [ax].RETAILKIT ..'
	MERGE [ax].RETAILKIT AS target
	USING (
		SELECT DISTINCT
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			CASE T.c.value('(DisassemblyAtRegisterAllowed)[1]', 'NVARCHAR(4000)')
				WHEN 'No' THEN 0
				WHEN 'Yes' THEN 1
				ELSE 0
			END AS [DISASSEMBLYATREGISTERALLOWED],
			CASE T.c.value('(DiscontinueKit)[1]', 'NVARCHAR(4000)')
				WHEN 'No' THEN 0
				WHEN 'Yes' THEN 1
				ELSE 0
			END AS [DISCONTINUEKIT],
			ISNULL(T.c.value('(ProductMaster)[1]', 'BIGINT'), '0') AS [PRODUCTMASTER],
			CASE T.c.value('(Status)[1]', 'NVARCHAR(4000)')
				WHEN 'Draft' THEN 0
				WHEN 'Approved' THEN 1
				ELSE 0
			END AS [STATUS]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/EcoResProduct/EcoResProductMaster/RetailKit') AS T(c)
	) AS source ([RECID], [DISASSEMBLYATREGISTERALLOWED], [DISCONTINUEKIT], [PRODUCTMASTER], [STATUS])
	ON (target.[RECID] = source.[RECID])
	WHEN NOT MATCHED THEN
		INSERT ([RECID], [DISASSEMBLYATREGISTERALLOWED], [DISCONTINUEKIT], [PRODUCTMASTER], [STATUS])
		VALUES (source.[RECID], source.[DISASSEMBLYATREGISTERALLOWED], source.[DISCONTINUEKIT], source.[PRODUCTMASTER], source.[STATUS])
	WHEN MATCHED THEN
		UPDATE SET target.[RECID] = source.[RECID], target.[DISASSEMBLYATREGISTERALLOWED] = source.[DISASSEMBLYATREGISTERALLOWED], target.[DISCONTINUEKIT] = source.[DISCONTINUEKIT], target.[PRODUCTMASTER] = source.[PRODUCTMASTER], target.[STATUS] = source.[STATUS];

	SELECT @i_Error = @@ERROR;
	IF @i_Error <> 0
	BEGIN
		SET @i_ReturnCode = @i_Error;
		GOTO exit_label;
	END;

	-- RetailKitComponent
	PRINT 'Upserting into [ax].RETAILKITCOMPONENT ..'
	MERGE [ax].RETAILKITCOMPONENT AS target
	USING (
		SELECT DISTINCT
			COALESCE(T.c.value('(Kit)[1]', 'BIGINT'), T.c.value('(../RecId)[1]', 'BIGINT')) AS [KIT],
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(Component)[1]', 'BIGINT'), '0') AS [COMPONENT],
			CASE T.c.value('(DoNotShowAtRegister)[1]', 'NVARCHAR(4000)')
				WHEN 'No' THEN 0
				WHEN 'Yes' THEN 1
				ELSE 0
			END AS [DONOTSHOWATREGISTER],
			ISNULL(T.c.value('(Quantity)[1]', 'NUMERIC(32, 16)'), '0') AS [QUANTITY],
			ISNULL(T.c.value('(UnitOfMeasure)[1]', 'BIGINT'), '0') AS [UNITOFMEASURE]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/EcoResProduct/EcoResProductMaster/RetailKit/RetailKitComponent') AS T(c)
	) AS source ([KIT], [RECID], [COMPONENT], [DONOTSHOWATREGISTER], [QUANTITY], [UNITOFMEASURE])
	ON (target.[RECID] = source.[RECID])
	WHEN NOT MATCHED THEN
		INSERT ([KIT], [RECID], [COMPONENT], [DONOTSHOWATREGISTER], [QUANTITY], [UNITOFMEASURE])
		VALUES (source.[KIT], source.[RECID], source.[COMPONENT], source.[DONOTSHOWATREGISTER], source.[QUANTITY], source.[UNITOFMEASURE])
	WHEN MATCHED THEN
		UPDATE SET target.[KIT] = source.[KIT], target.[RECID] = source.[RECID], target.[COMPONENT] = source.[COMPONENT], target.[DONOTSHOWATREGISTER] = source.[DONOTSHOWATREGISTER], target.[QUANTITY] = source.[QUANTITY], target.[UNITOFMEASURE] = source.[UNITOFMEASURE];

	SELECT @i_Error = @@ERROR;
	IF @i_Error <> 0
	BEGIN
		SET @i_ReturnCode = @i_Error;
		GOTO exit_label;
	END;

	-- RetailKitComponentSubstitute
	PRINT 'Upserting into [ax].RETAILKITCOMPONENTSUBSTITUTE ..'
	MERGE [ax].RETAILKITCOMPONENTSUBSTITUTE AS target
	USING (
		SELECT DISTINCT
			COALESCE(T.c.value('(KitComponent)[1]', 'BIGINT'), T.c.value('(../RecId)[1]', 'BIGINT')) AS [KITCOMPONENT],
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(Quantity)[1]', 'NUMERIC(32, 16)'), '0') AS [QUANTITY],
			ISNULL(T.c.value('(SubstituteProduct)[1]', 'BIGINT'), '0') AS [SUBSTITUTEPRODUCT],
			ISNULL(T.c.value('(UnitOfMeasure)[1]', 'BIGINT'), '0') AS [UNITOFMEASURE]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/EcoResProduct/EcoResProductMaster/RetailKit/RetailKitComponent/RetailKitComponentSubstitute') AS T(c)
	) AS source ([KITCOMPONENT], [RECID], [QUANTITY], [SUBSTITUTEPRODUCT], [UNITOFMEASURE])
	ON (target.[RECID] = source.[RECID])
	WHEN NOT MATCHED THEN
		INSERT ([KITCOMPONENT], [RECID], [QUANTITY], [SUBSTITUTEPRODUCT], [UNITOFMEASURE])
		VALUES (source.[KITCOMPONENT], source.[RECID], source.[QUANTITY], source.[SUBSTITUTEPRODUCT], source.[UNITOFMEASURE])
	WHEN MATCHED THEN
		UPDATE SET target.[KITCOMPONENT] = source.[KITCOMPONENT], target.[RECID] = source.[RECID], target.[QUANTITY] = source.[QUANTITY], target.[SUBSTITUTEPRODUCT] = source.[SUBSTITUTEPRODUCT], target.[UNITOFMEASURE] = source.[UNITOFMEASURE];

	SELECT @i_Error = @@ERROR;
	IF @i_Error <> 0
	BEGIN
		SET @i_ReturnCode = @i_Error;
		GOTO exit_label;
	END;

	-- RetailKitReleasedSubstituteCharge
	PRINT 'Upserting into [ax].RETAILKITRELEASEDSUBSTITUTECHARGE ..'
	MERGE [ax].RETAILKITRELEASEDSUBSTITUTECHARGE AS target
	USING (
		SELECT DISTINCT
			COALESCE(T.c.value('(KitComponentSubstitute)[1]', 'BIGINT'), T.c.value('(../RecId)[1]', 'BIGINT')) AS [KITCOMPONENTSUBSTITUTE],
			T.c.value('(RecId)[1]', 'BIGINT') AS [RECID],
			ISNULL(T.c.value('(SubstituteCharge)[1]', 'NUMERIC(32, 16)'), '0') AS [SUBSTITUTECHARGE],
			@nvc_DataAreaId AS [DATAAREAID]
		FROM @xml_ProductData.nodes('/RetailProductData/InventTable/EcoResProduct/EcoResProductMaster/RetailKit/RetailKitComponent/RetailKitComponentSubstitute/RetailKitReleasedSubstituteCharge') AS T(c)
	) AS source ([KITCOMPONENTSUBSTITUTE], [RECID], [SUBSTITUTECHARGE], [DATAAREAID])
	ON (target.[RECID] = source.[RECID])
	WHEN NOT MATCHED THEN
		INSERT ([KITCOMPONENTSUBSTITUTE], [RECID], [SUBSTITUTECHARGE], [DATAAREAID])
		VALUES (source.[KITCOMPONENTSUBSTITUTE], source.[RECID], source.[SUBSTITUTECHARGE], source.[DATAAREAID])
	WHEN MATCHED THEN
		UPDATE SET target.[KITCOMPONENTSUBSTITUTE] = source.[KITCOMPONENTSUBSTITUTE], target.[RECID] = source.[RECID], target.[SUBSTITUTECHARGE] = source.[SUBSTITUTECHARGE], target.[DATAAREAID] = source.[DATAAREAID];

	SELECT @i_Error = @@ERROR;
	IF @i_Error <> 0
	BEGIN
		SET @i_ReturnCode = @i_Error;
		GOTO exit_label;
	END;

    -- Add products to the temporary assortment
    MERGE [crt].TMPASSORTEDPRODUCTS AS target
    USING (
        SELECT
			@bi_ChannelId AS 'CHANNELID',
			T.c.value('(Product)[1]', 'BIGINT') AS 'PRODUCTID',
			T.c.value('(ItemId)[1]', 'NVARCHAR(20)') AS 'ITEMID',
			CAST(DATEADD(day, -1, GETUTCDATE()) AS DATE) AS 'VALIDFROM',
			CAST(DATEADD(day, 1, GETUTCDATE()) AS DATE) AS 'VALIDTO'
        FROM @xml_ProductData.nodes('/RetailProductData/InventTable') AS T(c)
    ) AS source ([CHANNELID], [PRODUCTID], [ITEMID], [VALIDFROM], [VALIDTO])
    ON (
        target.[CHANNELID] = source.[CHANNELID] AND
        target.[PRODUCTID] = source.[PRODUCTID] AND
		target.[ITEMID] = source.[ITEMID])
    WHEN NOT MATCHED THEN
        INSERT ([CHANNELID], [PRODUCTID], [ITEMID], [VALIDFROM], [VALIDTO])
        VALUES (source.[CHANNELID], source.[PRODUCTID], source.[ITEMID], source.[VALIDFROM], source.[VALIDTO])
    WHEN MATCHED THEN
        UPDATE SET
            target.[VALIDFROM] = source.[VALIDFROM],
            target.[VALIDTO] = source.[VALIDTO];

    SET @i_Error = @@ERROR;
    IF @i_Error <> 0
    BEGIN
        SET @i_ReturnCode = @i_Error;
        GOTO exit_label;
    END;

    IF @i_TransactionIsOurs = 1
    BEGIN
        COMMIT TRANSACTION;

        SET @i_Error = @@ERROR;
        IF @i_Error <> 0
        BEGIN
            SET @i_ReturnCode = @i_Error;
            GOTO exit_label;
        END;

        SET @i_TransactionIsOurs = 0;
    END;

    PRINT 'Upsert completed successfully.'

exit_label:

    IF @i_TransactionIsOurs = 1
    BEGIN
        ROLLBACK TRANSACTION;
    END;

    RETURN @i_ReturnCode;
END;
GO
PRINT N'Altering [crt].[GETPRODUCTS]...';


GO
ALTER PROCEDURE [crt].[GETPRODUCTS]
    @tvp_QueryResultSettings [crt].[QUERYRESULTSETTINGSTABLETYPE] READONLY,
    @bi_ChannelId           BIGINT, -- The unique channel identifier (required).
    @bi_CatalogId           BIGINT, -- The catalog identifier (optional).
    @i_DataLevel            INT,    -- A value to control the richness of the products returned.
    @dt_ChannelDate         DATETIME,   -- The current date in the channel's time zone.
    @b_IsForwardLooking     BIT,    -- A value indicating whether to include products in future assortments.
    @b_SkipVariantExpansion BIT,    -- A value indicating whether product masters are to be expanded.
    @tvp_ProductIds         [crt].[RECORDIDTABLETYPE]   READONLY,
    @b_IsOnlineSearch       BIT     -- A value indicating whether the search is retrieving the product image blob
AS
BEGIN
/*  // data level map for product:
    //
    // data level   |   content
    // =============|================================================================
    // identity     |   id, item id, invent dim
    // minimal      |   + behavior data: is (master, serialized, kit) flags, validity
    // standard     |   + first class properties, indexed properties
    // extended     |   + composition information
    // complete     |   + change tracking information
    // =============|================================================================
*/
    SET NOCOUNT ON

    DECLARE @i_ReturnCode               INT;
    DECLARE @i_Error                    INT;

    DECLARE @tvp_ExpandedWorkingIdSet       [crt].[RECORDIDTABLETYPE]
    DECLARE @tvp_LookupIds                  [crt].[RECORDIDTABLETYPE]
    DECLARE @tvp_DummyId                    [crt].[RECORDIDTABLETYPE]
    DECLARE @tvp_DistinctProductVariantIds  [crt].[RECORDIDTABLETYPE]
    DECLARE @tvp_ProductIdsNormalized       [crt].[RECORDIDSTABLETYPE]
    DECLARE @tvp_AssortedProductIds         [crt].[PRODUCTLOOKUPIDTABLETYPE]
    DECLARE @tvp_CatalogAssortedProductIds  [crt].[PRODUCTLOOKUPIDTABLETYPE]

    DECLARE @ProductNameAttributeName           NVARCHAR(256) = 'ProductName'
    DECLARE @ProductDescriptionAttributeName    NVARCHAR(256) = 'Description'
    DECLARE @ProductImageAttributeName          NVARCHAR(256) = 'Image'

    -- Insert dummy record to satisfy API contract
    INSERT INTO @tvp_DummyId VALUES (0)

    -- initializes the return code; we'll return the number of data sets as the return code.
    SET @i_ReturnCode = 0;
    SET @bi_CatalogId = ISNULL(@bi_CatalogId, 0);

    -- Retrieve the data area for the current channel identifier.
    DECLARE @nvc_DataAreaId NVARCHAR(4);
    SELECT @nvc_DataAreaId = INVENTLOCATIONDATAAREAID FROM [ax].RETAILCHANNELTABLE rct WHERE rct.RECID = @bi_ChannelId

    -- The copy operation into @tvp_Ids below is needed for performance improvements, do not remove it.
    DECLARE @tvp_Ids crt.RECORDIDTABLETYPE
    INSERT INTO @tvp_Ids(RECID)
    SELECT tpi.RECID
    FROM @tvp_ProductIds tpi
    ORDER BY [tpi].RECID
    OFFSET (SELECT TOP 1 [SKIP] FROM @tvp_QueryResultSettings) ROWS
    FETCH NEXT (SELECT TOP 1 [TOP] FROM @tvp_QueryResultSettings) ROWS ONLY

    -- Normalize all input identifiers. That means standalone, product master and variant
    -- identifiers all return the parent product as the lookup identifer. This is necessary
    -- because the input product identifiers can be any type of product (standalone, product
    -- master, variant, kit, etc).
    INSERT @tvp_ProductIdsNormalized (RECID, PARENTRECID)
    SELECT DISTINCT
        ids.RECID AS 'PRODUCTID',
        COALESCE(pv2.PRODUCTMASTER, pv.PRODUCTMASTER, ids.RECID) AS 'LOOKUPID'
    FROM @tvp_Ids ids
    LEFT OUTER JOIN [ax].ECORESDISTINCTPRODUCTVARIANT pv ON [pv].RECID = [ids].RECID
    LEFT OUTER JOIN [ax].ECORESDISTINCTPRODUCTVARIANT pv2 ON [pv2].PRODUCTMASTER = [ids].RECID

    -- Retrieve the unique parent product identifiers.
    INSERT @tvp_LookupIds (RECID)
    SELECT DISTINCT PARENTRECID -- LOOKUPID
    FROM @tvp_ProductIdsNormalized

    -- Filter lookup identifiers by assortment and expand all product masters to their individually assorted variants if requested.
    INSERT @tvp_AssortedProductIds (LOOKUPID, PRODUCTID, ISREMOTE, VALIDFROM, VALIDTO)
    SELECT
        ap.PRODUCTID AS LOOKUPID,
        CASE
            WHEN ap.VARIANTID = 0 THEN ap.PRODUCTID
            ELSE ap.VARIANTID
        END AS PRODUCTID,
        ap.ISREMOTE,
        ap.VALIDFROM,
        ap.VALIDTO
    FROM [crt].GETASSORTEDPRODUCTS(@bi_ChannelId, @dt_ChannelDate, @b_IsForwardLooking, 0 /* @b_SkipVariantExpansion */, 1 /* @b_ProductIdsPassed */, @tvp_LookupIds) ap

    -- Build the expanded working set
    IF (@bi_CatalogId = 0)
    BEGIN
        INSERT @tvp_CatalogAssortedProductIds (LOOKUPID, PRODUCTID, ISREMOTE, VALIDFROM, VALIDTO)
        SELECT LOOKUPID, PRODUCTID, ISREMOTE, VALIDFROM, VALIDTO
        FROM @tvp_AssortedProductIds
    END
    ELSE
    BEGIN
        -- Filter out any products that are not in the specified catalog.
        WITH cte_CatalogProducts AS
        (
            SELECT
                ap.LOOKUPID,
                ap.PRODUCTID,
                ap.ISREMOTE,
                CASE
                    WHEN ap.VALIDFROM > pc.VALIDFROM THEN ap.VALIDFROM
                    ELSE pc.VALIDFROM
                END AS 'VALIDFROM',
                CASE
                    WHEN pc.VALIDTO < ap.VALIDTO THEN pc.VALIDTO
                    ELSE ap.VALIDTO
                END AS 'VALIDTO'
            FROM @tvp_AssortedProductIds ap
            INNER JOIN [ax].RETAILPUBCATALOGPRODUCT pcp ON pcp.PRODUCT = ap.LOOKUPID OR pcp.PRODUCT = ap.PRODUCTID
            INNER JOIN [ax].RETAILPUBCATALOG pc ON pc.ORIGIN = pcp.CATALOG
            INNER JOIN [crt].PUBCATALOGCHANNELVIEW ccv ON ccv.CATALOG = pcp.CATALOG
            WHERE ccv.CHANNEL = @bi_ChannelId AND ccv.CATALOG = @bi_CatalogId AND
                ((@b_IsForwardLooking = 0 AND @dt_ChannelDate BETWEEN ap.VALIDFROM AND ap.VALIDTO) OR
                    (@b_IsForwardLooking = 1 AND ap.VALIDTO >= @dt_ChannelDate))
        )
        INSERT @tvp_CatalogAssortedProductIds (LOOKUPID, PRODUCTID, ISREMOTE, VALIDFROM, VALIDTO)
        -- Retrieve the product masters that are either explicitly or implicitly part of the specified catalog.
        SELECT cp.LOOKUPID, cp.PRODUCTID, cp.ISREMOTE, cp.VALIDFROM, cp.VALIDTO
        FROM cte_CatalogProducts cp
        WHERE ((@b_IsForwardLooking = 0 AND @dt_ChannelDate BETWEEN cp.VALIDFROM AND cp.VALIDTO) OR
                (@b_IsForwardLooking = 1 AND cp.VALIDTO >= @dt_ChannelDate))
        UNION
        -- Retrieve the product variants that are either explicitly or implicitly part of the specified catalog.
        SELECT cp.LOOKUPID, cp.LOOKUPID, cp.ISREMOTE, cp.VALIDFROM, cp.VALIDTO
        FROM cte_CatalogProducts cp
        WHERE ((@b_IsForwardLooking = 0 AND @dt_ChannelDate BETWEEN cp.VALIDFROM AND cp.VALIDTO) OR
                (@b_IsForwardLooking = 1 AND cp.VALIDTO >= @dt_ChannelDate))
    END

    DECLARE @tbl_ProductIdentities TABLE (
        LOOKUPID BIGINT NOT NULL,
        PRODUCTID BIGINT NOT NULL,
        ISMASTER BIT NOT NULL,
        ISKIT BIT NOT NULL,
        ISREMOTE BIT NOT NULL,
        MASTERPRODUCT BIGINT NOT NULL,
        DISPLAYPRODUCTNUMBER NVARCHAR(70) NOT NULL,
        SEARCHNAME NVARCHAR(20) NULL,
        ITEMID NVARCHAR(20) NOT NULL,
        INVENTDIMID NVARCHAR(20) NOT NULL,
        OFFLINEIMAGE NVARCHAR(MAX) NULL,
        INVENTRECID BIGINT NULL
    )

    -- For the filtered identifiers, we can now build the identity for each product.
    INSERT INTO @tbl_ProductIdentities
    SELECT DISTINCT
        ap.LOOKUPID,
        ap.PRODUCTID,
        CASE
            WHEN (([pv].RECID IS NULL) AND ([pv2].RECID IS NOT NULL)) THEN 1
            ELSE 0
        END AS ISMASTER,
        CASE
            WHEN ([rk].RECID IS NULL) THEN 0
            ELSE 1
        END AS ISKIT,
        ap.ISREMOTE,
        CASE
            WHEN (([pv].RECID IS NULL) AND ([pv2].RECID IS NOT NULL)) THEN 0 -- IsMaster
            ELSE ap.LOOKUPID
        END AS MASTERPRODUCT,
        erp.DISPLAYPRODUCTNUMBER,
        erp.SEARCHNAME,
        COALESCE(it.ITEMID, idc.ITEMID) AS ITEMID,
        ISNULL(idc.INVENTDIMID, '') AS INVENTDIMID,
        NULL AS OFFLINEIMAGE,
        it.RECID AS INVENTRECID
    FROM @tvp_CatalogAssortedProductIds ap
    -- If @b_SkipVariantExpansion was set to true and the provided product ID was a variant ID then we need to return just master (or standalone one) and the only
    -- variant whose IDs were passed, all other variants should not be returned.
    INNER JOIN @tvp_Ids ids ON (@b_SkipVariantExpansion = 0 OR (@b_SkipVariantExpansion = 1 AND ([ids].RECID = [ap].PRODUCTID) OR ([ap].PRODUCTID = [ap].LOOKUPID)))
    INNER JOIN [ax].ECORESPRODUCT erp ON [erp].RECID = [ap].PRODUCTID
    LEFT OUTER JOIN [ax].INVENTTABLE it ON [it].PRODUCT = [ap].PRODUCTID AND [it].DATAAREAID = @nvc_DataAreaId
    LEFT OUTER JOIN [ax].INVENTDIMCOMBINATION idc ON [idc].DISTINCTPRODUCTVARIANT = [ap].PRODUCTID AND [idc].DATAAREAID = @nvc_DataAreaId
    LEFT OUTER JOIN [ax].ECORESDISTINCTPRODUCTVARIANT pv ON [pv].RECID = [ap].PRODUCTID
    LEFT OUTER JOIN [ax].ECORESDISTINCTPRODUCTVARIANT pv2 ON [pv2].PRODUCTMASTER = [ap].PRODUCTID
    LEFT OUTER JOIN [ax].RETAILKIT rk ON [rk].PRODUCTMASTER = [ap].PRODUCTID

    -- Populate final set of product ids for which further data should be retrieved
    INSERT @tvp_ExpandedWorkingIdSet (RECID)
    SELECT DISTINCT [pids].PRODUCTID
    FROM @tbl_ProductIdentities pids

    --Update the OfflineImage column with image value, if any
    IF @b_IsOnlineSearch = 0
    BEGIN
        UPDATE pid
        SET pid.OFFLINEIMAGE = CAST(N'' AS XML).value('xs:base64Binary(xs:hexBinary(sql:column("[img].[MediumSize]")))', 'NVARCHAR(MAX)')
        FROM @tbl_ProductIdentities pid
            INNER JOIN [ax].ECORESPRODUCTIMAGE img
            ON pid.INVENTRECID = [img].REFRECORD AND [img].DEFAULTIMAGE = 1
    END

    -- retrieve product identities
    SELECT
        [piv].PRODUCTID AS 'RECID',
        [piv].LOOKUPID,
        [piv].ISMASTER,
        [piv].ISKIT,
        [piv].ISREMOTE,
        [piv].MASTERPRODUCT,
        [piv].ITEMID,
        [piv].INVENTDIMID,
        [piv].DISPLAYPRODUCTNUMBER,
        [piv].SEARCHNAME,
        [piv].OFFLINEIMAGE

    FROM @tbl_ProductIdentities piv
    ORDER BY LOOKUPID, ISMASTER desc, RECID

    SET @i_ReturnCode = @i_ReturnCode + 1;

    -- retrieve the distinct product variant identifiers for each variant in our expanded set
    INSERT INTO @tvp_DistinctProductVariantIds (RECID)
    SELECT DISTINCT [piv].[PRODUCTID]
    FROM @tbl_ProductIdentities piv
    WHERE [piv].ISMASTER = 0 AND [piv].MASTERPRODUCT <> 0

    IF NOT EXISTS(SELECT NULL FROM @tvp_DistinctProductVariantIds)
    BEGIN
        SELECT
            NULL AS ITEMID,
            NULL AS VARIANTID,
            NULL AS INVENTDIMID,
            NULL AS DISTINCTPRODUCTVARIANT,
            NULL AS SIZEID,
            NULL AS COLORID,
            NULL AS STYLEID,
            NULL AS CONFIGID,
            NULL AS COLOR,
            NULL AS SIZE,
            NULL AS STYLE,
            NULL AS CONFIG
    END
    ELSE
    BEGIN
        -- retrieve the product variant identities
        SELECT
            [vv].ITEMID,
            [vv].VARIANTID,
            [vv].INVENTDIMID,
            [vv].DISTINCTPRODUCTVARIANT,
            [vv].SIZEID,
            [vv].COLORID,
            [vv].STYLEID,
            [vv].CONFIGID,
            [vv].COLOR,
            [vv].SIZE,
            [vv].STYLE,
            [vv].CONFIG
        FROM [crt].GETVARIANTS(@bi_ChannelId, @dt_ChannelDate, @tvp_DistinctProductVariantIds) vv
    END

    SET @i_ReturnCode = @i_ReturnCode + 1;
    IF (@i_DataLevel < 1)
        RETURN @i_ReturnCode;

    -- Retrieve the product rules
    SELECT
        [prv].PRODUCTID AS 'RECID',
        [prv].BLOCKEDONPOS,
        [prv].DATEBLOCKED,
        [prv].DATETOACTIVATEITEM,
        [prv].DATETOBEBLOCKED,
        [prv].KEYINGINPRICE,
        [prv].KEYINGINQTY,
        [prv].MUSTKEYINCOMMENT,
        [prv].QTYBECOMESNEGATIVE,
        [prv].SCALEITEM,
        [prv].ZEROPRICEVALID,
        [prv].ISSERIALIZED,
        [prv].ISACTIVEINSALESPROCESS,
        [prv].DEFAULTUNITOFMEASURE
    FROM [crt].PRODUCTRULESVIEW prv
    INNER JOIN @tvp_ExpandedWorkingIdSet ids ON [ids].RECID = [prv].PRODUCTID
    WHERE [prv].DATAAREAID = @nvc_DataAreaId

    SET @i_ReturnCode = @i_ReturnCode + 1;

    IF (@i_DataLevel < 2)
    BEGIN
        -- Extract attribute schema of the first-class(Name, Description, Image) attributes for this data level.
        SELECT
            [pamv].ATTRIBUTE,
            [pamv].KEYNAME,
            CASE [pamv].KEYNAME
                WHEN @ProductNameAttributeName THEN 5  /* Text */
                WHEN @ProductDescriptionAttributeName THEN 5  /* Text */
                WHEN @ProductImageAttributeName THEN 41  /* Image */
            END AS DATATYPE,
            [era].NAME,
            [erat].LANGUAGE,
            [erat].FRIENDLYNAME,
            0 AS PRODUCT,
            0 AS CATALOG,
            0 AS ATTRIBUTEGROUP,
            0 AS ATTRIBUTEGROUPTYPE
        FROM [ax].RETAILPUBPRODUCTATTRIBUTECHANNELMETADATA pamv
            INNER JOIN [ax].ECORESATTRIBUTE era ON [era].RECID = [pamv].ATTRIBUTE
            LEFT JOIN [ax].ECORESATTRIBUTETRANSLATION erat ON [erat].ATTRIBUTE = [pamv].ATTRIBUTE
            WHERE [pamv].HOSTCHANNEL = @bi_ChannelId
                AND ([pamv].KEYNAME = @ProductNameAttributeName
                    OR [pamv].KEYNAME = @ProductDescriptionAttributeName
                    OR [pamv].KEYNAME = @ProductImageAttributeName)

        SET @i_ReturnCode = @i_ReturnCode + 1;

        -- Retrieve product attribute values for the first-class(Name, Description, Image) attributes for this data level.
        SELECT
            [gpavv].ATTRIBUTE,
            [gpavv].VALUE,
            [gpavv].ISREFERENCE,
            0 AS PRODUCT,
            0 AS CATEGORY,
            0 AS CATALOG,
            0 AS DISTANCE,
            2 AS SOURCE,  /* DefaultProductAttributeGroupDefaultValue */
            NULL AS BOOLEANVALUE,
            NULL AS CURRENCYVALUE,
            NULL AS CURRENCYCODE,
            NULL AS DATETIMEVALUE,
            NULL AS DATETIMEVALUETZID,
            NULL AS FLOATVALUE,
            NULL AS FLOATUNITSYMBOL,
            NULL AS INTVALUE,
            NULL AS INTUNITSYMBOL,
            [ertv].TEXTVALUE,
            [tvt].LANGUAGE,
            [tvt].TRANSLATION
        FROM [crt].DEFAULTPRODUCTATTRIBUTEGROUPDEFAULTVALUEVIEW gpavv
        INNER JOIN [ax].ECORESTEXTVALUE ertv ON [ertv].RECID = [gpavv].VALUE
        LEFT JOIN [crt].GETTEXTVALUETRANSLATION(@bi_ChannelId) tvt ON [tvt].VALUE = [ertv].RECID
        WHERE [gpavv].CHANNEL = @bi_ChannelId 
            AND
            (@bi_CatalogId = 0 OR EXISTS(
                SELECT 1
                FROM [ax].RETAILPUBCATALOG
                WHERE ORIGIN = @bi_CatalogId AND ENABLESNAPSHOT = 0
            ))

        UNION ALL

        SELECT
            [rav].ATTRIBUTE,
            0 AS VALUE,
            1 AS ISREFERENCE,
            [ept].PRODUCT,
            0 AS CATEGORY,
            0 AS CATALOG,
            0 AS DISTANCE,
            5 AS SOURCE,  /* StandardProductAttributeValue */
            CONVERT(BIT, 0) AS BOOLEANVALUE,
            CONVERT(NUMERIC(32,16), 0) AS CURRENCYVALUE,
            '' AS CURRENCYCODE,
            CONVERT(DATETIME, 0) AS DATETIMEVALUE,
            CONVERT(INT, 0) AS DATETIMEVALUETZID,
            CONVERT(NUMERIC(32,16), 0) AS FLOATVALUE,
            '' AS FLOATUNITSYMBOL,
            CONVERT(INT, 0) AS INTVALUE,
            '' AS INTUNITSYMBOL,
            '' AS TEXTVALUE,
            [ept].LANGUAGEID AS LANGUAGE,
            CASE [rsa].STANDARDATTRIBUTEID
                WHEN 2 /* ProductName */ THEN [ept].NAME
                WHEN 4 /* Description */ THEN [ept].DESCRIPTION
            END AS TRANSLATION
        FROM @tvp_ExpandedWorkingIdSet AS ids
        INNER JOIN [ax].RETAILSTANDARDATTRIBUTE rsa ON [rsa].STANDARDATTRIBUTEID = 2 /* ProductName */ OR [rsa].STANDARDATTRIBUTEID = 4 /* Description */
        INNER JOIN [crt].REFERENCEATTRIBUTEVIEW rav ON [rav].REFERENCEDATTRIBUTE = [rsa].ATTRIBUTE
        INNER JOIN [ax].ECORESPRODUCTTRANSLATION ept ON [ept].PRODUCT = [ids].RECID
        INNER JOIN [crt].CHANNELLANGUAGESVIEW clv ON [clv].CHANNEL = @bi_ChannelId AND [clv].LANGUAGEID = [ept].LANGUAGEID

        SET @i_ReturnCode = @i_ReturnCode + 1;

        -- exit here if the data level is minimal
        RETURN @i_ReturnCode
    END
    ELSE BEGIN
        -- Retrieve the attribute schema.
        SELECT
            [pas].ATTRIBUTE,
            [pamv].KEYNAME,
            [pamv].DATATYPE AS DATATYPE,
            [era].NAME,
            [erat].LANGUAGE,
            [erat].FRIENDLYNAME,
            [pas].PRODUCT,
            [pas].[CATALOG],
            [pas].ATTRIBUTEGROUP,
            [pas].ATTRIBUTEGROUPTYPE
        FROM [crt].GETPRODUCTATTRIBUTESCHEMAS(@bi_ChannelId, @bi_CatalogId, @dt_ChannelDate, @tvp_ExpandedWorkingIdSet, @tvp_DummyId) AS pas
            INNER JOIN [crt].PRODUCTATTRIBUTEMETADATAVIEW pamv ON [pamv].ATTRIBUTE = [pas].ATTRIBUTE
            INNER JOIN [ax].ECORESATTRIBUTE era ON [era].RECID = [pas].ATTRIBUTE
            LEFT JOIN [ax].ECORESATTRIBUTETRANSLATION erat ON [erat].ATTRIBUTE = [pas].ATTRIBUTE
            WHERE [pamv].CHANNEL = @bi_ChannelId

        SET @i_ReturnCode = @i_ReturnCode + 1;

        -- Retrieve product attributes
        SELECT
            [pavfn].[ATTRIBUTE],
            [pavfn].[VALUE],
            [pavfn].[DISPLAYORDER],
            [pavfn].[ISREFERENCE],
            [pavfn].[PRODUCT],
            [pavfn].[CATEGORY],
            [pavfn].[CATALOG],
            [pavfn].[DISTANCE],
            [pavfn].[SOURCE],
            [pavfn].[BOOLEANVALUE],
            [pavfn].[CURRENCYVALUE],
            [pavfn].[CURRENCYCODE],
            [pavfn].[DATETIMEVALUE],
            [pavfn].[DATETIMEVALUETZID],
            [pavfn].[FLOATVALUE],
            [pavfn].[FLOATUNITSYMBOL],
            [pavfn].[INTVALUE],
            [pavfn].[INTUNITSYMBOL],
            [pavfn].[TEXTVALUE],
            [pavfn].[LANGUAGE],
            [pavfn].[TRANSLATION]
        FROM [crt].GETPRODUCTATTRIBUTEVALUES(@bi_ChannelId, @bi_CatalogId, @dt_ChannelDate, @b_IsForwardLooking, @tvp_ExpandedWorkingIdSet, @tvp_DummyId) AS pavfn

        SET @i_ReturnCode = @i_ReturnCode + 1;
    END

    -- Retrieve active or all catalogs depending on the value of @bi_CatalogId.
    SELECT DISTINCT
        pcp.CATALOG,
        ap.PRODUCTID AS 'PRODUCT',
        CASE
            WHEN ap.VALIDFROM > pc.VALIDFROM THEN ap.VALIDFROM
            ELSE pc.VALIDFROM
        END AS 'VALIDFROM',
        CASE
            WHEN pc.VALIDTO < ap.VALIDTO THEN pc.VALIDTO
            ELSE ap.VALIDTO
        END AS 'VALIDTO'
    FROM @tvp_CatalogAssortedProductIds ap
    INNER JOIN [ax].RETAILPUBCATALOGPRODUCT pcp ON pcp.PRODUCT = ap.PRODUCTID OR pcp.PRODUCT = ap.LOOKUPID
    INNER JOIN [ax].RETAILPUBCATALOG pc ON pc.ORIGIN = pcp.CATALOG
    INNER JOIN [crt].PUBCATALOGCHANNELVIEW ccv ON ccv.CATALOG = pcp.CATALOG
    WHERE ccv.CHANNEL = @bi_ChannelId AND (ccv.CATALOG = @bi_CatalogId OR @bi_CatalogId = 0)
        AND pc.VALIDTO >= @dt_ChannelDate AND (@b_IsForwardLooking = 1 OR pc.VALIDFROM <= @dt_ChannelDate)

    UNION ALL

    -- Retrieve assortment dates when no catalogs have been requested.
    SELECT
        0 AS 'CATALOG',
        ap.PRODUCTID AS 'PRODUCT',
        ap.VALIDFROM,
        ap.VALIDTO
    FROM @tvp_CatalogAssortedProductIds ap
    WHERE @bi_CatalogId = 0 AND (@b_IsForwardLooking = 1 OR @dt_ChannelDate BETWEEN ap.VALIDFROM AND ap.VALIDTO)
    ORDER BY VALIDFROM DESC

    SET @i_ReturnCode = @i_ReturnCode + 1;

    -- Retrieve product categories
    SELECT DISTINCT
        categories.PRODUCT,
        categories.CATEGORY,
        categories.[CATALOG],
        0 AS ISPRIMARY
    FROM [crt].GETPRODUCTCATEGORIES(@bi_ChannelId, @bi_CatalogId, @dt_ChannelDate, @b_IsForwardLooking, 1 /* @b_ProductIdsPassed */, @tvp_ExpandedWorkingIdSet, 0 /* @b_CategoryIdsPassed */, @tvp_DummyId) categories

    SET @i_ReturnCode = @i_ReturnCode + 1;

    IF (@i_DataLevel < 3)
        RETURN @i_ReturnCode;

    -- Retrieve product relations
    SELECT
        [prfn].PRODUCT,
        [prfn].RELATEDPRODUCT,
        [prfn].PRODUCTRELATIONTYPE,
        [prfn].[CATALOG],
        [prfn].EXCLUSION
    FROM [crt].GETPRODUCTRELATIONS(@bi_ChannelId, @bi_CatalogId, @dt_ChannelDate, @tvp_LookupIds) AS prfn

    SET @i_ReturnCode = @i_ReturnCode + 1;

    RETURN @i_ReturnCode;
END;
GO
PRINT N'Altering [crt].[GETPRODUCTSBYITEMID]...';


GO

ALTER PROCEDURE [crt].[GETPRODUCTSBYITEMID]
    @tvp_QueryResultSettings    [crt].[QUERYRESULTSETTINGSTABLETYPE] READONLY,
    @bi_ChannelId               BIGINT,
    @dt_ChannelDate             DATE,
    @i_DataLevel                INT,
    @b_IsForwardLooking         BIT,
    @b_SkipVariantExpansion     BIT,
    @nvc_DataAreaId             NVARCHAR(4),
    @tvp_ItemIds                [crt].ITEMIDSEARCHTABLETYPE READONLY
AS
BEGIN
    -- Paging gets performed in the first search operation. Hence, preventing paging from occuring again in the GETPRODUCTS call.
    DECLARE @tvp_NoPagingQueryResultSettings [crt].QUERYRESULTSETTINGSTABLETYPE
    INSERT INTO @tvp_NoPagingQueryResultSettings VALUES (0, (SELECT TOP 1 [settings].[TOP] FROM @tvp_QueryResultSettings settings), 0, N'', 0)

    DECLARE @tvp_ProductIds crt.RECORDIDTABLETYPE
    DECLARE @tvp_SearchedIds [crt].RECORDIDTABLETYPE

    INSERT INTO @tvp_SearchedIds(RECID)
    -- Return only Master/Standalone product ids as required by paging and assortments
    SELECT DISTINCT COALESCE([pv].PRODUCTMASTER, [spi].RECID) AS RECID
    FROM [crt].SEARCHPRODUCTSBYITEMID(@nvc_DataAreaId, @tvp_ItemIds) spi
    LEFT OUTER JOIN [ax].ECORESDISTINCTPRODUCTVARIANT pv ON [pv].RECID = [spi].RECID

    ;WITH ProductIdResult (RECID, ROWNUM)
    AS
    (
        SELECT DISTINCT
            [gap].PRODUCTID AS RECID,
            ROW_NUMBER() OVER (ORDER BY [gap].PRODUCTID) AS ROWNUM
        FROM [crt].GETASSORTEDPRODUCTS(@bi_ChannelId, @dt_ChannelDate, 0 /* @b_IsForwardLooking */, 1 /* @b_SkipVariantExpansion */, 1 /* @b_ProductIdsPassed */, @tvp_SearchedIds) gap
    )

    INSERT INTO @tvp_ProductIds
    SELECT DISTINCT
        RECID
    FROM ProductIdResult
    INNER JOIN @tvp_QueryResultSettings settings ON [settings].[TOP] = 0 OR ROWNUM BETWEEN ([settings].[SKIP] + 1) AND ([settings].[SKIP] + [settings].[TOP])

    INSERT INTO @tvp_ProductIds
    SELECT
        [idc].DISTINCTPRODUCTVARIANT
    FROM @tvp_ItemIds ids
    INNER JOIN [ax].INVENTDIMCOMBINATION idc ON [idc].ITEMID = [ids].ITEMID AND [idc].INVENTDIMID = [ids].INVENTDIMID AND [idc].DATAAREAID = @nvc_DataAreaId
    WHERE [ids].INVENTDIMID != ''

    exec [crt].GETPRODUCTS @tvp_NoPagingQueryResultSettings,@bi_ChannelId,0,@i_DataLevel,@dt_ChannelDate,@b_IsForwardLooking,@b_SkipVariantExpansion,@tvp_ProductIds,1
END;
GO
PRINT N'Altering [crt].[GETREFINERVALUESBYCATEGORYID]...';


GO

ALTER PROCEDURE [crt].[GETREFINERVALUESBYCATEGORYID]
(
    @tvp_QueryResultSettings [crt].QUERYRESULTSETTINGSTABLETYPE READONLY,
    @bi_ChannelId            BIGINT,
    @bi_CatalogId            BIGINT,
    @dt_ChannelDate          DATE,
    @nvc_Locale              NVARCHAR(7),
    @bi_CategoryId           BIGINT,
    @bi_RefinerId            BIGINT,
    @i_RefinerSource         INT
)
AS
BEGIN
    DECLARE @tvp_ProductSearchResultIds [crt].[RECORDIDTABLETYPE]
    DECLARE @tvp_DummyId                [crt].[RECORDIDTABLETYPE]
    DECLARE @tvp_Refiners               [crt].[PRODUCTREFINERTABLETYPE]

    INSERT INTO @tvp_Refiners VALUES (@bi_RefinerId, @i_RefinerSource, NULL, 0, 0, 0, NULL)
    
    INSERT INTO @tvp_ProductSearchResultIds (RECID)
    SELECT
        [prods].PRODUCTID AS RECID
    FROM [crt].GETPRODUCTIDSBYCATEGORYID(@bi_ChannelId, @bi_CatalogId, @dt_ChannelDate, @bi_CategoryId) prods

    -- Adding variants so their refiners can also be used.
    INSERT INTO @tvp_ProductSearchResultIds (RECID)
    SELECT
        [erdpv].RECID AS RECID
    FROM @tvp_ProductSearchResultIds prods
    INNER JOIN [ax].ECORESDISTINCTPRODUCTVARIANT erdpv ON [erdpv].PRODUCTMASTER = [prods].RECID
    WHERE EXISTS
        (
            SELECT 1 FROM [crt].ASSORTEDPRODUCTSVIEW apv
            WHERE [apv].PRODUCTID = [erdpv].RECID AND [apv].CHANNELID = @bi_ChannelId AND @dt_ChannelDate BETWEEN [apv].VALIDFROM AND [apv].VALIDTO AND [apv].ISREMOTE = 0  -- Search is only supported in locally available channels
        )

    IF @i_RefinerSource = 1  -- Attribute refiner
    BEGIN
        DECLARE @tvp_ProductAttributes [crt].[PRODUCTATTRIBUTEVALUETABLETYPE]
        INSERT INTO @tvp_ProductAttributes
        SELECT
            [gpav].ATTRIBUTE,
            [gpav].BOOLEANVALUE,
            [gpav].CURRENCYCODE,
            [gpav].CURRENCYVALUE,
            [gpav].DATETIMEVALUE,
            [gpav].DATETIMEVALUETZID,
            [gpav].FLOATUNITSYMBOL,
            [gpav].FLOATVALUE,
            [gpav].INTUNITSYMBOL,
            [gpav].INTVALUE,
            [gpav].TEXTVALUE,
            [gpav].LANGUAGE,
            [gpav].TRANSLATION
        FROM [crt].GETPRODUCTATTRIBUTEVALUES(@bi_ChannelId, @bi_CatalogId, @dt_ChannelDate, 0 /* @b_IsForwardLooking */, @tvp_ProductSearchResultIds, @tvp_DummyId) AS gpav
        INNER JOIN @tvp_Refiners refiners ON [refiners].SOURCE = 1  /* Attribute refiners */ AND [refiners].RECID = [gpav].ATTRIBUTE

        SELECT
            [gprv].RECID,
            [gprv].REFINERSOURCE,
            [gprv].DATATYPE,
            [gprv].LEFTBOUNDVALUE,
            [gprv].RIGHTBOUNDVALUE,
            [gprv].UNIT
        FROM [crt].CONVERTATTRIBUTEVALUESTOREFINERVALUES(@bi_ChannelId, @nvc_Locale, @bi_RefinerId, @i_RefinerSource, @tvp_ProductAttributes) gprv
        ORDER BY 4  -- LEFTBOUNDVALUE
        OFFSET (SELECT [SKIP] FROM @tvp_QueryResultSettings) ROWS
        FETCH NEXT (SELECT [TOP] FROM @tvp_QueryResultSettings) ROWS ONLY
    END
    ELSE IF @i_RefinerSource = 2  -- Category refiner
    BEGIN
        SELECT DISTINCT
            0 AS RECID,
            2 AS REFINERSOURCE,  -- Category
            5 AS DATATYPE,  -- Category is always string datatype
            CASE
                WHEN [rperct].LANGUAGEID = @nvc_Locale THEN [rperct].FRIENDLYNAME
                ELSE [rperct].SEARCHTEXT
            END AS LEFTBOUNDVALUE,
            CASE
                WHEN [rperct].LANGUAGEID = @nvc_Locale THEN [rperct].FRIENDLYNAME
                ELSE [rperct].SEARCHTEXT
            END AS RIGHTBOUNDVALUE,
            NULL AS UNIT
        FROM [crt].GETPRODUCTCATEGORIES(@bi_ChannelId, @bi_CatalogId, @dt_ChannelDate, 0 /* @b_IsForwardLooking */, 1 /* @b_ProductIdsPassed */, @tvp_ProductSearchResultIds, 0 /* @b_CategoryIdsPassed */, @tvp_DummyId) gpc
        INNER JOIN [ax].RETAILPUBECORESCATEGORYTRANSLATION rperct ON [rperct].CATEGORY = [gpc].CATEGORY
        ORDER BY 4  -- LEFTBOUNDVALUE
        OFFSET (SELECT [SKIP] FROM @tvp_QueryResultSettings) ROWS
        FETCH NEXT (SELECT [TOP] FROM @tvp_QueryResultSettings) ROWS ONLY
    END
    ELSE IF @i_RefinerSource = 3  -- Price refiner
    BEGIN
        SELECT
            0 AS RECID,
            3 AS REFINERSOURCE,  -- Price
            1 AS DATATYPE,  -- Currency
            CONVERT(nvarchar(1999), MIN(PRICE)) LEFTBOUNDVALUE,
            CONVERT(nvarchar(1999), MAX(PRICE)) RIGHTBOUNDVALUE,
            [rct].CURRENCY AS UNIT
        FROM [crt].[GETREFINERPRICES](@bi_ChannelId, @dt_ChannelDate, @tvp_ProductSearchResultIds) grp
        INNER JOIN [ax].RETAILCHANNELTABLE rct ON [rct].RECID = @bi_ChannelId
        GROUP BY [rct].CURRENCY
        ORDER BY 4  -- LEFTBOUNDVALUE
        OFFSET (SELECT [SKIP] FROM @tvp_QueryResultSettings) ROWS
        FETCH NEXT (SELECT [TOP] FROM @tvp_QueryResultSettings) ROWS ONLY
    END

END
GO
PRINT N'Altering [crt].[GETREFINERVALUESBYTEXT]...';


GO

ALTER PROCEDURE [crt].[GETREFINERVALUESBYTEXT]
(
    @tvp_QueryResultSettings [crt].QUERYRESULTSETTINGSTABLETYPE READONLY,
    @bi_ChannelId            BIGINT,
    @bi_CatalogId            BIGINT,
    @dt_ChannelDate          DATE,
    @nvc_Locale              NVARCHAR(7),
    @nvc_SearchText          NVARCHAR(1000),  -- 1000 because the size of the biggest column being looked up is [ax].ECORESPRODUCTTRANSLATION.DESCRIPTION of type NVARCHAR(1000)
    @bi_RefinerId            BIGINT,
    @i_RefinerSource         INT
)
AS
BEGIN
    DECLARE @tvp_ProductSearchResultIds [crt].[RECORDIDTABLETYPE]
    DECLARE @tvp_DummyId                [crt].[RECORDIDTABLETYPE]
    DECLARE @tvp_Refiners               [crt].[PRODUCTREFINERTABLETYPE]

    INSERT INTO @tvp_DummyId VALUES (0)  -- Dummy id needed by GetProductRefiners function
    INSERT INTO @tvp_Refiners VALUES (@bi_RefinerId, @i_RefinerSource, NULL, 0, 0, 0, NULL)

    INSERT INTO @tvp_ProductSearchResultIds (RECID)
    SELECT
        [sp].PRODUCTID AS RECID
    FROM [crt].GETPRODUCTIDSBYSEARCHTEXT(@bi_ChannelId, @bi_CatalogId, @dt_ChannelDate, 1000 /* @i_MaxTop - Retrieving only TOP 1000 products because retrieving more products will degrade performance */, @nvc_Locale, @nvc_SearchText) sp

    -- Adding variants so their refiners can also be used.
    INSERT INTO @tvp_ProductSearchResultIds (RECID)
    SELECT
        [erdpv].RECID AS RECID
    FROM @tvp_ProductSearchResultIds prods
    INNER JOIN [ax].ECORESDISTINCTPRODUCTVARIANT erdpv ON [erdpv].PRODUCTMASTER = [prods].RECID
    WHERE EXISTS
        (
            SELECT 1 FROM [crt].ASSORTEDPRODUCTSVIEW apv
            WHERE [apv].PRODUCTID = [erdpv].RECID AND [apv].CHANNELID = @bi_ChannelId AND @dt_ChannelDate BETWEEN [apv].VALIDFROM AND [apv].VALIDTO AND [apv].ISREMOTE = 0  -- Search is only supported in locally available channels
        )

    IF @i_RefinerSource = 1  -- Attribute refiner
    BEGIN
        DECLARE @tvp_ProductAttributes [crt].[PRODUCTATTRIBUTEVALUETABLETYPE]
        INSERT INTO @tvp_ProductAttributes
        SELECT
            [gpav].ATTRIBUTE,
            [gpav].BOOLEANVALUE,
            [gpav].CURRENCYCODE,
            [gpav].CURRENCYVALUE,
            [gpav].DATETIMEVALUE,
            [gpav].DATETIMEVALUETZID,
            [gpav].FLOATUNITSYMBOL,
            [gpav].FLOATVALUE,
            [gpav].INTUNITSYMBOL,
            [gpav].INTVALUE,
            [gpav].TEXTVALUE,
            [gpav].LANGUAGE,
            [gpav].TRANSLATION
        FROM [crt].GETPRODUCTATTRIBUTEVALUES(@bi_ChannelId, @bi_CatalogId, @dt_ChannelDate, 0 /* @b_IsForwardLooking */, @tvp_ProductSearchResultIds, @tvp_DummyId) AS gpav
        INNER JOIN @tvp_Refiners refiners ON [refiners].SOURCE = 1  /* Attribute refiners */ AND [refiners].RECID = [gpav].ATTRIBUTE

        SELECT
            [gprv].RECID,
            [gprv].REFINERSOURCE,
            [gprv].DATATYPE,
            [gprv].LEFTBOUNDVALUE,
            [gprv].RIGHTBOUNDVALUE,
            [gprv].UNIT
        FROM [crt].CONVERTATTRIBUTEVALUESTOREFINERVALUES(@bi_ChannelId, @nvc_Locale, @bi_RefinerId, @i_RefinerSource, @tvp_ProductAttributes) gprv
        ORDER BY 4  -- LEFTBOUNDVALUE
        OFFSET (SELECT [SKIP] FROM @tvp_QueryResultSettings) ROWS
        FETCH NEXT (SELECT [TOP] FROM @tvp_QueryResultSettings) ROWS ONLY
    END
    ELSE IF @i_RefinerSource = 2  -- Category refiner
    BEGIN
        SELECT DISTINCT
            0 AS RECID,
            2 AS REFINERSOURCE,  -- Category
            5 AS DATATYPE,  -- Category is always string datatype
            CASE
                WHEN [rperct].LANGUAGEID = @nvc_Locale THEN [rperct].FRIENDLYNAME
                ELSE [rperct].SEARCHTEXT
            END AS LEFTBOUNDVALUE,
            CASE
                WHEN [rperct].LANGUAGEID = @nvc_Locale THEN [rperct].FRIENDLYNAME
                ELSE [rperct].SEARCHTEXT
            END AS RIGHTBOUNDVALUE,
            NULL AS UNIT
        FROM [crt].GETPRODUCTCATEGORIES(@bi_ChannelId, @bi_CatalogId, @dt_ChannelDate, 0 /* @b_IsForwardLooking */, 1 /* @b_ProductIdsPassed */, @tvp_ProductSearchResultIds, 0 /* @b_CategoryIdsPassed */, @tvp_DummyId) gpc
        INNER JOIN [ax].RETAILPUBECORESCATEGORYTRANSLATION rperct ON [rperct].CATEGORY = [gpc].CATEGORY
        ORDER BY 4  -- LEFTBOUNDVALUE
        OFFSET (SELECT [SKIP] FROM @tvp_QueryResultSettings) ROWS
        FETCH NEXT (SELECT [TOP] FROM @tvp_QueryResultSettings) ROWS ONLY
    END
    ELSE IF @i_RefinerSource = 3  -- Price refiner
    BEGIN
        SELECT
            0 AS RECID,
            3 AS REFINERSOURCE,  -- Price
            1 AS DATATYPE,  -- Currency
            CONVERT(nvarchar(1999), MIN(PRICE)) LEFTBOUNDVALUE,
            CONVERT(nvarchar(1999), MAX(PRICE)) RIGHTBOUNDVALUE,
            [rct].CURRENCY AS UNIT
        FROM [crt].[GETREFINERPRICES](@bi_ChannelId, @dt_ChannelDate, @tvp_ProductSearchResultIds) grp
        INNER JOIN [ax].RETAILCHANNELTABLE rct ON [rct].RECID = @bi_ChannelId
        GROUP BY [rct].CURRENCY
        ORDER BY 4  -- LEFTBOUNDVALUE
        OFFSET (SELECT [SKIP] FROM @tvp_QueryResultSettings) ROWS
        FETCH NEXT (SELECT [TOP] FROM @tvp_QueryResultSettings) ROWS ONLY
    END

END
GO
PRINT N'Altering [crt].[GETREFINERSBYCATEGORYID]...';


GO

ALTER PROCEDURE [crt].[GETREFINERSBYCATEGORYID]
(
    @tvp_QueryResultSettings [crt].QUERYRESULTSETTINGSTABLETYPE READONLY,
    @bi_ChannelId            BIGINT,
    @bi_CatalogId            BIGINT,
    @dt_ChannelDate          DATE,
    @nvc_Locale              NVARCHAR(7),
    @bi_CategoryId           BIGINT
)
AS
BEGIN
    DECLARE @tvp_ProductSearchResultIds [crt].[RECORDIDTABLETYPE]
    DECLARE @tvp_DummyId [crt].[RECORDIDTABLETYPE]

    INSERT INTO @tvp_ProductSearchResultIds (RECID)
    SELECT TOP 1000  -- Retrieving only TOP 1000 products because retrieving more products will degrade performance.
        [prods].PRODUCTID AS RECID
    FROM [crt].GETPRODUCTIDSBYCATEGORYID(@bi_ChannelId, @bi_CatalogId, @dt_ChannelDate, @bi_CategoryId) prods

    -- Adding variants so their refiners can also be used.
    INSERT INTO @tvp_ProductSearchResultIds (RECID)
    SELECT
        [erdpv].RECID AS RECID
    FROM @tvp_ProductSearchResultIds prods
    INNER JOIN [ax].ECORESDISTINCTPRODUCTVARIANT erdpv ON [erdpv].PRODUCTMASTER = [prods].RECID
    WHERE EXISTS
        (
            SELECT 1 FROM [crt].ASSORTEDPRODUCTSVIEW apv
            WHERE [apv].PRODUCTID = [erdpv].RECID AND [apv].CHANNELID = @bi_ChannelId AND @dt_ChannelDate BETWEEN [apv].VALIDFROM AND [apv].VALIDTO AND [apv].ISREMOTE = 0  -- Search is only supported in locally available channels
        )

    SELECT
        [gpr].RECID,
        [gpr].KEYNAME,
        [gpr].[SOURCE],
        [gpr].DATATYPE,
        [gpr].DISPLAYOPTION,
        [gpr].DISPLAYTEMPLATE,
        [gpr].THRESHOLDVALUE
    FROM [crt].GETPRODUCTREFINERS(@bi_ChannelId, @bi_CatalogId, @dt_ChannelDate, @nvc_Locale, @tvp_ProductSearchResultIds, @tvp_DummyId) gpr
    ORDER BY [gpr].KEYNAME
    OFFSET (SELECT [SKIP] FROM @tvp_QueryResultSettings) ROWS
    FETCH NEXT (SELECT [TOP] FROM @tvp_QueryResultSettings) ROWS ONLY

END
GO
PRINT N'Altering [crt].[GETREFINERSBYTEXT]...';


GO

ALTER PROCEDURE [crt].[GETREFINERSBYTEXT]
(
    @tvp_QueryResultSettings [crt].QUERYRESULTSETTINGSTABLETYPE READONLY,
    @bi_ChannelId            BIGINT,
    @bi_CatalogId            BIGINT,
    @dt_ChannelDate          DATE,
    @nvc_Locale              NVARCHAR(7),
    @nvc_SearchText          NVARCHAR(1000)  -- 1000 because the size of the biggest column being looked up is [ax].ECORESPRODUCTTRANSLATION.DESCRIPTION of type NVARCHAR(1000)
)
AS
BEGIN
    DECLARE @tvp_ProductSearchResultIds [crt].[RECORDIDTABLETYPE]
    DECLARE @tvp_DummyId [crt].[RECORDIDTABLETYPE]

    INSERT INTO @tvp_DummyId VALUES (0)  -- Dummy id needed by GetProductRefiners function

    INSERT INTO @tvp_ProductSearchResultIds (RECID)
    SELECT
        [sp].PRODUCTID AS RECID
    FROM [crt].GETPRODUCTIDSBYSEARCHTEXT(@bi_ChannelId, @bi_CatalogId, @dt_ChannelDate, 1000 /* @i_MaxTop - Retrieving only TOP 1000 products because retrieving more products will degrade performance */, @nvc_Locale, @nvc_SearchText) sp

    -- Adding variants so their refiners can also be used.
    INSERT INTO @tvp_ProductSearchResultIds (RECID)
    SELECT
        [erdpv].RECID AS RECID
    FROM @tvp_ProductSearchResultIds prods
    INNER JOIN [ax].ECORESDISTINCTPRODUCTVARIANT erdpv ON [erdpv].PRODUCTMASTER = [prods].RECID
    WHERE EXISTS
        (
            SELECT 1 FROM [crt].ASSORTEDPRODUCTSVIEW apv
            WHERE [apv].PRODUCTID = [erdpv].RECID AND [apv].CHANNELID = @bi_ChannelId AND @dt_ChannelDate BETWEEN [apv].VALIDFROM AND [apv].VALIDTO AND [apv].ISREMOTE = 0  -- Search is only supported in locally available channels
        )

    SELECT
        [gpr].RECID,
        [gpr].KEYNAME,
        [gpr].[SOURCE],
        [gpr].DATATYPE,
        [gpr].DISPLAYOPTION,
        [gpr].DISPLAYTEMPLATE,
        [gpr].THRESHOLDVALUE
    FROM [crt].GETPRODUCTREFINERS(@bi_ChannelId, @bi_CatalogId, @dt_ChannelDate, @nvc_Locale, @tvp_ProductSearchResultIds, @tvp_DummyId) gpr
    ORDER BY [gpr].KEYNAME
    OFFSET (SELECT [SKIP] FROM @tvp_QueryResultSettings) ROWS
    FETCH NEXT (SELECT [TOP] FROM @tvp_QueryResultSettings) ROWS ONLY

END
GO
PRINT N'Altering [crt].[CREATEUPDATERETAILSTOCKCOUNT]...';


GO

ALTER PROCEDURE [crt].[CREATEUPDATERETAILSTOCKCOUNT]
    @bi_ChannelId                   BIGINT,
    @TVP_RetailStockCount           [crt].[RETAILSTOCKCOUNTTABLETYPE]    READONLY
AS
BEGIN

    SET NOCOUNT ON;

    DECLARE @i_ReturnCode                           INT;
    DECLARE @i_TransactionIsOurs                    INT;
    DECLARE @i_Error                                INT;

    -- initializes the return code and assume the transaction is not ours by default
    SET @i_ReturnCode = 0;
    SET @i_TransactionIsOurs = 0;

    IF @@TRANCOUNT = 0
    BEGIN
        BEGIN TRANSACTION;

        SELECT @i_Error = @@ERROR;
        IF @i_Error <> 0
        BEGIN
            SET @i_ReturnCode = @i_Error;
            GOTO exit_label;
        END;

        SET @i_TransactionIsOurs = 1;
    END;


    -- UPSERT INTO THE RETAILSTOCKCOUNT
    MERGE INTO [crt].[RETAILSTOCKCOUNT]
    USING @TVP_RetailStockCount AS SOURCE
    ON
        (
            SOURCE.[RECID] > 0 AND
            RETAILSTOCKCOUNT.[RECID] = SOURCE.[RECID]
        ) OR
        (
            SOURCE.[RECID] = 0 AND
            RETAILSTOCKCOUNT.[JOURNALID] = SOURCE.[JOURNALID] AND
            RETAILSTOCKCOUNT.[ITEMID] = SOURCE.[ITEMID] AND
            (SOURCE.[INVENTSIZEID] IS NULL OR RETAILSTOCKCOUNT.[INVENTSIZEID] = SOURCE.[INVENTSIZEID]) AND
            (SOURCE.[INVENTCOLORID] IS NULL OR RETAILSTOCKCOUNT.[INVENTCOLORID] = SOURCE.[INVENTCOLORID]) AND
            (SOURCE.[INVENTSTYLEID] IS NULL OR RETAILSTOCKCOUNT.[INVENTSTYLEID] = SOURCE.[INVENTSTYLEID]) AND
            (SOURCE.[CONFIGID] IS NULL OR RETAILSTOCKCOUNT.[CONFIGID] = SOURCE.[CONFIGID])
        )
    WHEN MATCHED THEN
        UPDATE
        SET
            OPERATIONTYPE = SOURCE.[OPERATIONTYPE]
            ,ITEMNAME = SOURCE.[ITEMNAME]
            ,COUNTED = SOURCE.[COUNTED]
            ,QUANTITY = SOURCE.[QUANTITY]
            ,UNIT = SOURCE.[UNIT]
            ,USERID = SOURCE.[USERID]
            ,TERMINALID = SOURCE.[TERMINALID]
            ,COUNTDATE = SOURCE.[COUNTDATE]
            ,STATUS = SOURCE.[STATUS]
            ,INVENTSIZEID = SOURCE.[INVENTSIZEID]
            ,INVENTCOLORID = SOURCE.[INVENTCOLORID]
            ,INVENTSTYLEID = SOURCE.[INVENTSTYLEID]
            ,CONFIGID = SOURCE.[CONFIGID]
            ,TRACKINGGUID = SOURCE.[TRACKINGGUID]

    WHEN NOT MATCHED THEN
        INSERT
        (
            [RECID],
            [JOURNALID],
            [OPERATIONTYPE],
            [ITEMID],
            [ITEMNAME],
            [COUNTED],
            [QUANTITY],
            [UNIT],
            [USERID],
            [TERMINALID],
            [COUNTDATE],
            [STATUS],
            [INVENTSIZEID],
            [INVENTCOLORID],
            [INVENTSTYLEID],
            [CONFIGID],
            [TRACKINGGUID]
        )
        VALUES
        (
            SOURCE.[RECID],
            SOURCE.[JOURNALID],
            SOURCE.[OPERATIONTYPE],
            SOURCE.[ITEMID],
            SOURCE.[ITEMNAME],
            SOURCE.[COUNTED],
            SOURCE.[QUANTITY],
            SOURCE.[UNIT],
            SOURCE.[USERID],
            SOURCE.[TERMINALID],
            SOURCE.[COUNTDATE],
            SOURCE.[STATUS],
            SOURCE.[INVENTSIZEID],
            SOURCE.[INVENTCOLORID],
            SOURCE.[INVENTSTYLEID],
            SOURCE.[CONFIGID],
            SOURCE.[TRACKINGGUID]
        );

    SELECT @i_Error = @@ERROR;
    IF @i_Error <> 0
    BEGIN
        SET @i_ReturnCode = @i_Error;
        GOTO exit_label;
    END;

    IF @i_Error <> 0
    BEGIN
        SET @i_ReturnCode = @i_Error;
        GOTO exit_label;
    END;

    IF @i_TransactionIsOurs = 1
    BEGIN
        COMMIT TRANSACTION;

        SET @i_Error = @@ERROR;
        IF @i_Error <> 0
        BEGIN
            SET @i_ReturnCode = @i_Error;
            GOTO exit_label;
        END;

        SET @i_TransactionIsOurs = 0;
    END;

exit_label:

    IF @i_TransactionIsOurs = 1
    BEGIN
        ROLLBACK TRANSACTION;
    END;

    RETURN @i_ReturnCode;
END;
GO
PRINT N'Altering [crt].[DELETEEXPIREDSESSIONSINOFFLINE]...';


GO

ALTER PROCEDURE [crt].[DELETEEXPIREDSESSIONSINOFFLINE] 
    @int_RetentionDays INT
AS
BEGIN 	
	DECLARE @todayUTCDate DATETIME;
	SELECT @todayUTCDate = GETUTCDATE();
	
	--Delete upload session records with Uploaded status and uploaded date before retention day.
	DELETE [crt].[UPLOADSESSION] FROM [crt].[UPLOADSESSION] US
	WHERE US.DATEUPLOADED IS NOT NULL AND (US.STATUS = 2) AND @todayUTCDate >= DATEADD(D, @int_RetentionDays, ISNULL(US.DATEUPLOADED, 0))
	
	--Delete download session records with requested date before retention day.
	DELETE [crt].[DOWNLOADSESSION] FROM [crt].[DOWNLOADSESSION] DS
	WHERE @todayUTCDate >= DATEADD(D, @int_RetentionDays, DS.DATEREQUESTED)
			
END;
GO
PRINT N'Altering [crt].[DELETELISTINGSBYCATALOGS]...';


GO

ALTER PROCEDURE [crt].[DELETELISTINGSBYCATALOGS]
    @bi_ChannelId BIGINT,
    @tvp_CatalogIds crt.RECORDIDTABLETYPE READONLY

AS
BEGIN
    SET NOCOUNT ON

    DECLARE @i_ActionStatusDone INT = 3
    DECLARE @i_AppliedActionDeleted INT = 2
    DECLARE @notSetDateTime DATETIME = [crt].GETMINAXDATE()
    DECLARE @utcNow DATETIME = GETUTCDATE()
    DECLARE @tvp_ListingPublishStatus [crt].[LISTINGPUBLISHSTATUSTABLETYPE]
    DECLARE @i_ReturnCode INT;
    DECLARE @i_TransactionIsOurs INT;
    DECLARE @i_Error INT;

    INSERT INTO @tvp_ListingPublishStatus
    SELECT
        @i_ActionStatusDone,
        @i_AppliedActionDeleted,
        C.CATALOGID,
        @bi_ChannelId,
        CAST(C.LISTINGRECID AS NVARCHAR(50)),
        @notSetDateTime,
        0,
        C.LISTINGRECID,
        0,
        @utcNow,
        0,
        '',
        '',
        '',
        C.LANGUAGEID
    FROM [crt].[CATALOGLISTMAPPING] AS C
    INNER JOIN @tvp_CatalogIds IDS on IDS.RECID = C.CATALOGID
    WHERE CHANNELID = @bi_ChannelId


    IF @@TRANCOUNT = 0
    BEGIN
        BEGIN TRANSACTION;

        SELECT @i_Error = @@ERROR;
        IF @i_Error <> 0
        BEGIN
            SET @i_ReturnCode = @i_Error;
            GOTO exit_label;
        END;

        SET @i_TransactionIsOurs = 1;
    END;

    EXEC crt.INSERTPUBLISHSTATUSFORCURRENTLISTINGPAGE @tvp_ListingPublishStatus
    SELECT @i_Error = @@ERROR;
    IF @i_Error <> 0
    BEGIN
        SET @i_ReturnCode = @i_Error;
        GOTO exit_label;
    END;

    DELETE C
    FROM [crt].[CATALOGLISTMAPPING] AS C
    INNER JOIN @tvp_CatalogIds IDS on IDS.RECID = C.CATALOGID
    WHERE CHANNELID = @bi_ChannelId

    SELECT @i_Error = @@ERROR;
    IF @i_Error <> 0
    BEGIN
        SET @i_ReturnCode = @i_Error;
        GOTO exit_label;
    END;

    IF @i_TransactionIsOurs = 1
    BEGIN
        COMMIT TRANSACTION;

        SET @i_Error = @@ERROR;
        IF @i_Error <> 0
        BEGIN
            SET @i_ReturnCode = @i_Error;
            GOTO exit_label;
        END;

        SET @i_TransactionIsOurs = 0;
    END;

exit_label:

    IF @i_TransactionIsOurs = 1
    BEGIN
        ROLLBACK TRANSACTION;
    END;

    RETURN @i_ReturnCode;

END;
GO
PRINT N'Altering [crt].[GETACTIVEEXCHANGERATE]...';


GO

ALTER PROCEDURE [crt].[GETACTIVEEXCHANGERATE]
    @tvp_QueryResultSettings [crt].[QUERYRESULTSETTINGSTABLETYPE] READONLY,
    @nvc_FromCurrency        NVARCHAR(3),
    @nvc_ToCurrency          NVARCHAR(3),
    @bi_ChannelId            BIGINT = NULL, -- [Deprecated] [Last used release = CTP-8]
    @dt_ActiveDate           DATE
AS
BEGIN
    SET NOCOUNT ON

    SELECT
        er.EXCHANGERATE,
        er.FROMCURRENCYCODE,
        er.TOCURRENCYCODE,
        er.RECID,
        er.VALIDFROM,
        er.VALIDTO
    FROM [crt].[EXCHANGERATEVIEW] AS er
    WHERE
        er.VALIDFROM <= @dt_ActiveDate
        AND er.VALIDTO >= @dt_ActiveDate
        AND ((er.FROMCURRENCYCODE = @nvc_FromCurrency AND er.TOCURRENCYCODE = @nvc_ToCurrency) OR
            (er.FROMCURRENCYCODE = @nvc_ToCurrency AND er.TOCURRENCYCODE = @nvc_FromCurrency))
    ORDER BY [er].RECID
    OFFSET (SELECT TOP 1 [SKIP] FROM @tvp_QueryResultSettings) ROWS
    FETCH NEXT (SELECT TOP 1 [TOP] FROM @tvp_QueryResultSettings) ROWS ONLY

END;
GO
PRINT N'Altering [crt].[GETCOUNTIES]...';


GO

ALTER PROCEDURE [crt].[GETCOUNTIES]
    @tvp_QueryResultSettings [crt].[QUERYRESULTSETTINGSTABLETYPE] READONLY,
    @CountryRegionId    NVARCHAR(10),
    @StateProvinceID    NVARCHAR(10) = NULL
AS
BEGIN

    SET NOCOUNT ON

    DECLARE @StateProvinceIDIsNull BIT = CASE WHEN (@StateProvinceID IS NULL OR LEN(LTRIM(RTRIM(@StateProvinceID))) = 0) THEN 1 ELSE 0 END

    SELECT
        LCNTY.COUNTYID
       ,LCNTY.NAME
       ,LCNTY.COUNTRYREGIONID
       ,LCNTY.STATEID
    FROM [ax].LOGISTICSADDRESSCOUNTY LCNTY
    WHERE
        LCNTY.COUNTRYREGIONID = @CountryRegionId
        AND (@StateProvinceIDIsNull = 1 OR LCNTY.STATEID = @StateProvinceID)
    ORDER BY [LCNTY].COUNTRYREGIONID, [LCNTY].STATEID, [LCNTY].COUNTYID
    OFFSET (SELECT [SKIP] FROM @tvp_QueryResultSettings) ROWS
    FETCH NEXT (SELECT [TOP] FROM @tvp_QueryResultSettings) ROWS ONLY

END;
GO
PRINT N'Altering [crt].[GETCURRENTSHIFTNONSALETENDERS]...';


GO

/******* ******* ******* ******* ******* ******* ******* ******* ******* ******* *******
    GETCURRENTSHIFTNONSALETENDERS gets the current shift's non sale tender transactions.
******* ******* ******* ******* ******* ******* ******* ******* ******* ******* *******/

ALTER PROCEDURE [crt].[GETCURRENTSHIFTNONSALETENDERS]
    @nvc_TransactionType    NVARCHAR(10),
    @bi_ChannelId           BIGINT,
    @nvc_TenderType         NVARCHAR(10),
    @nvc_BatchTerminalId    NVARCHAR(10),
    @bi_BatchId             BIGINT,
    @nvc_TransactionId      NVARCHAR(44)
AS
BEGIN

    SET NOCOUNT ON

    SELECT 
        V.AMOUNT,
        V.AMOUNTCUR,
        V.TRANSACTIONID,
        V.CURRENCY,
        V.TENDERCUR,
        V.TYPE,
        V.BATCHID,
        V.BATCHTERMINALID,
        V.STAFF,
        V.TERMINAL,
        V.DESCRIPTION,
        V.TENDERTYPE,
        V.CREATEDDATETIME,
        V.STORE
    FROM [crt].[NONSALESTRANSACTIONSVIEW] V
    WHERE V.TYPE = @nvc_TransactionType 
    AND V.TENDERTYPE = @nvc_TenderType 
    AND V.CHANNEL = @bi_ChannelId 
    AND V.BATCHTERMINALID = @nvc_BatchTerminalId 
    AND V.BATCHID = @bi_BatchId 
    AND (V.TRANSACTIONID = @nvc_TransactionId OR (@nvc_TransactionId IS NULL OR @nvc_TransactionId = ''))
END;
GO
PRINT N'Altering [crt].[GETLOYALTYTIERS]...';


GO

ALTER PROCEDURE [crt].[GETLOYALTYTIERS]
    @tvp_QueryResultSettings        [crt].[QUERYRESULTSETTINGSTABLETYPE] READONLY,
    @bi_loyaltyGroupRecordId        BIGINT,
    @nvc_Locale                     NVARCHAR(7) = 'en-us'
AS
BEGIN
    SET NOCOUNT ON

    -- Select all RetailLoyaltyTier of the loyalty program
    select
        rlt.RECID,
        rlt.TIERID,
        rlt.TIERLEVEL,
        rltt.DESCRIPTION
    from [ax].[RETAILLOYALTYTIER] rlt
    left join [ax].[RETAILLOYALTYTIERTRANSLATION] rltt
        on rltt.LOYALTYTIER = rlt.RECID
        and rltt.LANGUAGEID = @nvc_Locale
    where rlt.AFFILIATION = @bi_loyaltyGroupRecordId
    ORDER BY [rlt].RECID
    OFFSET (SELECT TOP 1 [SKIP] FROM @tvp_QueryResultSettings) ROWS
    FETCH NEXT (SELECT TOP 1 [TOP] FROM @tvp_QueryResultSettings) ROWS ONLY

END;
GO
PRINT N'Altering [crt].[GETPRICEADJUSTMENTSFORITEMS]...';


GO

ALTER PROCEDURE [crt].[GETPRICEADJUSTMENTSFORITEMS]
    @tvp_QueryResultSettings        [crt].[QUERYRESULTSETTINGSTABLETYPE] READONLY,
    @bi_ChannelId                   BIGINT,
    @items                          [crt].[ITEMVARIANTINVENTDIMTABLETYPE] READONLY,
    @priceGroups                    [crt].[PRICEGROUPTABLETYPE] READONLY,
    @fromDate                       DATE,
    @toDate                         DATE
AS
BEGIN
    SET NOCOUNT ON

    DECLARE @NoDate DATE = [crt].GETMINAXDATE();
    DECLARE @Never DATE = [crt].GETMAXAXDATE();
    DECLARE @nvc_DataAreaId NVARCHAR(4);
    SELECT @nvc_DataAreaId = INVENTLOCATIONDATAAREAID from [ax].RETAILCHANNELTABLE where RECID = @bi_ChannelId

    -- fetch price group record ids or lookup if missing
    DECLARE @priceGroupRecIds TABLE (PRICEGROUP BIGINT);
    INSERT INTO @priceGroupRecIds (PRICEGROUP)
    SELECT (CASE(pa.PRICEGROUP)
        WHEN 0
        THEN pg.RECID
        ELSE pa.PRICEGROUP
        END)
    FROM @priceGroups AS pa
    INNER JOIN [ax].PRICEDISCGROUP pg ON pg.GROUPID = pa.GROUPID AND DATAAREAID = @nvc_DataAreaId

    -- resolve item Ids and dimensions into product and variant Ids
    DECLARE @itemIds TABLE (ITEMID nvarchar(20), VARIANTINVENTDIMID nvarchar(20), PRODUCT bigint, DISTINCTPRODUCTVARIANT bigint)
    INSERT INTO @itemIds
    SELECT
        it.ITEMID,
        it.VARIANTINVENTDIMID,
        ISNULL(i.PRODUCT,0),
        ISNULL(idc.DISTINCTPRODUCTVARIANT,0)
    FROM @items AS it
    LEFT JOIN [ax].INVENTTABLE i ON i.ITEMID = it.ITEMID AND i.DATAAREAID = @nvc_DataAreaId
    LEFT JOIN [ax].INVENTDIMCOMBINATION idc ON idc.ITEMID = it.ITEMID AND idc.INVENTDIMID = it.VARIANTINVENTDIMID AND idc.DATAAREAID = @nvc_DataAreaId

    DECLARE @itemAdjustments TABLE (OFFERID nvarchar(20), LINENUM numeric(32,16), ITEMID nvarchar(20), INVENTDIMID nvarchar(20))

    -- get adjustment and lines by RETAILGROUPMEMBERLINE.product.
    INSERT INTO @itemAdjustments
    SELECT promo.OFFERID,
        promoLine.LINENUM,
        it.ITEMID,
        it.VARIANTINVENTDIMID AS INVENTDIMID
	FROM [ax].RETAILPERIODICDISCOUNTLINE promoLine
    INNER JOIN [ax].RETAILGROUPMEMBERLINE rgl ON promoLine.RETAILGROUPMEMBERLINE = rgl.RECID AND rgl.PRODUCT != 0 AND rgl.VARIANT = 0
    INNER JOIN @itemIds it ON rgl.PRODUCT = it.PRODUCT
    INNER JOIN [ax].RETAILPERIODICDISCOUNT promo ON promo.OFFERID = promoLine.OFFERID 
		AND promo.STATUS = 1
        AND promo.PERIODICDISCOUNTTYPE = 3 -- get only price adjustments
        AND (promo.VALIDFROM <= @fromDate OR promo.VALIDFROM <= @NoDate)
        AND (promo.VALIDTO >= @toDate OR promo.VALIDTO >= @Never)
		AND promo.DATAAREAID = @nvc_DataAreaId
    INNER JOIN [ax].RETAILDISCOUNTPRICEGROUP rdpg on rdpg.OFFERID = promo.OFFERID AND rdpg.DATAAREAID = @nvc_DataAreaId
    WHERE promoLine.DATAAREAID = @nvc_DataAreaId
        AND EXISTS (SELECT * FROM @priceGroupRecIds pg WHERE rdpg.PRICEDISCGROUP = pg.PRICEGROUP)

	-- get adjustment and lines by RETAILGROUPMEMBERLINE.product and RETAILGROUPMEMBERLINE.variant.
	INSERT INTO @itemAdjustments
    SELECT promo.OFFERID,
        promoLine.LINENUM,
        it.ITEMID,
        it.VARIANTINVENTDIMID AS INVENTDIMID
	FROM [ax].RETAILPERIODICDISCOUNTLINE promoLine
    INNER JOIN [ax].RETAILGROUPMEMBERLINE rgl WITH(INDEX([IX_RETAILGROUPMEMBERLINE_PVC])) ON promoLine.RETAILGROUPMEMBERLINE = rgl.RECID AND rgl.VARIANT != 0
    INNER JOIN @itemIds it ON rgl.VARIANT = it.DISTINCTPRODUCTVARIANT
    INNER JOIN [ax].RETAILPERIODICDISCOUNT promo ON promo.OFFERID = promoLine.OFFERID 
		AND promo.STATUS = 1
        AND promo.PERIODICDISCOUNTTYPE = 3 -- get only price adjustments
        AND (promo.VALIDFROM <= @fromDate OR promo.VALIDFROM <= @NoDate)
        AND (promo.VALIDTO >= @toDate OR promo.VALIDTO >= @Never)
        AND promo.DATAAREAID = @nvc_DataAreaId
    INNER JOIN [ax].RETAILDISCOUNTPRICEGROUP rdpg on rdpg.OFFERID = promo.OFFERID AND rdpg.DATAAREAID = @nvc_DataAreaId
    WHERE promoLine.DATAAREAID = @nvc_DataAreaId
        AND EXISTS (SELECT * FROM @priceGroupRecIds pg WHERE rdpg.PRICEDISCGROUP = pg.PRICEGROUP)

	-- get adjustment and lines by RETAILGROUPMEMBERLINE.category, product only.
	INSERT INTO @itemAdjustments
	SELECT promo.OFFERID,
        promoLine.LINENUM,
        it.ITEMID,
        it.VARIANTINVENTDIMID AS INVENTDIMID
	FROM [ax].RETAILPERIODICDISCOUNTLINE promoLine
	INNER JOIN [ax].RETAILGROUPMEMBERLINE rgl ON promoLine.RETAILGROUPMEMBERLINE = rgl.RECID AND rgl.PRODUCT = 0 AND rgl.VARIANT = 0 AND rgl.CATEGORY != 0
    INNER JOIN [ax].[RETAILCATEGORYCONTAINMENTLOOKUP] rccl ON rccl.CATEGORY = rgl.CATEGORY
    INNER JOIN [ax].[ECORESPRODUCTCATEGORY] pc on pc.CATEGORY = rccl.CONTAINEDCATEGORY
    INNER JOIN @itemIds it ON pc.PRODUCT = it.PRODUCT
    INNER JOIN [ax].RETAILPERIODICDISCOUNT promo ON promo.OFFERID = promoLine.OFFERID 
		AND promo.STATUS = 1
        AND promo.PERIODICDISCOUNTTYPE = 3 -- get only price adjustments
        AND (promo.VALIDFROM <= @fromDate OR promo.VALIDFROM <= @NoDate)
        AND (promo.VALIDTO >= @toDate OR promo.VALIDTO >= @Never)
        AND promo.DATAAREAID = @nvc_DataAreaId
    INNER JOIN [ax].RETAILDISCOUNTPRICEGROUP rdpg on rdpg.OFFERID = promo.OFFERID AND rdpg.DATAAREAID = @nvc_DataAreaId
    WHERE promoLine.DATAAREAID = @nvc_DataAreaId
        AND EXISTS (SELECT * FROM @priceGroupRecIds pg WHERE rdpg.PRICEDISCGROUP = pg.PRICEGROUP)

    -- get adjustment and lines by RETAILGROUPMEMBERLINE.category, variant only.
	INSERT INTO @itemAdjustments
	SELECT promo.OFFERID,
        promoLine.LINENUM,
        it.ITEMID,
        it.VARIANTINVENTDIMID AS INVENTDIMID
	FROM [ax].RETAILPERIODICDISCOUNTLINE promoLine
	INNER JOIN [ax].RETAILGROUPMEMBERLINE rgl ON promoLine.RETAILGROUPMEMBERLINE = rgl.RECID AND rgl.PRODUCT = 0 AND rgl.VARIANT = 0 AND rgl.CATEGORY != 0
    INNER JOIN [ax].[RETAILCATEGORYCONTAINMENTLOOKUP] rccl ON rccl.CATEGORY = rgl.CATEGORY
    INNER JOIN [crt].[RETAILSPECIALCATEGORYVARIANTVIEW] scv on scv.CATEGORY = rccl.CONTAINEDCATEGORY
    INNER JOIN @itemIds it ON scv.PRODUCT = it.DISTINCTPRODUCTVARIANT
    INNER JOIN [ax].RETAILPERIODICDISCOUNT promo ON promo.OFFERID = promoLine.OFFERID 
		AND promo.STATUS = 1
        AND promo.PERIODICDISCOUNTTYPE = 3 -- get only price adjustments
        AND (promo.VALIDFROM <= @fromDate OR promo.VALIDFROM <= @NoDate)
        AND (promo.VALIDTO >= @toDate OR promo.VALIDTO >= @Never)
        AND promo.DATAAREAID = @nvc_DataAreaId
    INNER JOIN [ax].RETAILDISCOUNTPRICEGROUP rdpg on rdpg.OFFERID = promo.OFFERID AND rdpg.DATAAREAID = @nvc_DataAreaId
    WHERE promoLine.DATAAREAID = @nvc_DataAreaId
        AND EXISTS (SELECT * FROM @priceGroupRecIds pg WHERE rdpg.PRICEDISCGROUP = pg.PRICEGROUP)

    SELECT DISTINCT
        promo.OFFERID,
        promo.VALIDFROM,
        promo.VALIDTO,
        promo.CONCURRENCYMODE,
        promo.DATEVALIDATIONTYPE,
        promo.VALIDATIONPERIODID,
        promo.CURRENCYCODE,
		promo.PRICINGPRIORITYNUMBER,
        promoOffer.DISCOUNTMETHOD,
        promoOffer.OFFERPRICE,
        promoOffer.DISCPCT,
        promoOffer.DISCAMOUNT,
        promoOffer.RECID,
        itema.ITEMID,
        itema.INVENTDIMID,
        uom.SYMBOL
    FROM [ax].RETAILPERIODICDISCOUNTLINE promoLine
    INNER JOIN [ax].RETAILPERIODICDISCOUNT promo ON promo.OFFERID = promoLine.OFFERID AND promo.DATAAREAID = @nvc_DataAreaId
    INNER JOIN [ax].RETAILDISCOUNTLINEOFFER promoOffer ON promoLine.RECID = promoOffer.RECID
    INNER JOIN @itemAdjustments itema on itema.OFFERID = promo.OFFERID and itema.LINENUM = promoLine.LINENUM
    LEFT JOIN [ax].UNITOFMEASURE uom ON uom.RECID = promoLine.UNITOFMEASURE
	WHERE promoLine.DATAAREAID = @nvc_DataAreaId
    ORDER BY [promo].OFFERID
    OFFSET (SELECT TOP 1 [SKIP] FROM @tvp_QueryResultSettings) ROWS
    FETCH NEXT (SELECT TOP 1 [TOP] FROM @tvp_QueryResultSettings) ROWS ONLY
END;
GO
PRINT N'Altering [crt].[GETPRICETRADEAGREEMENTS]...';


GO

ALTER PROCEDURE [crt].[GETPRICETRADEAGREEMENTS]
    @tvp_QueryResultSettings    [crt].[QUERYRESULTSETTINGSTABLETYPE] READONLY,
    @bi_ChannelId               BIGINT,
    @ItemIds                    [crt].[STRINGIDTABLETYPE] READONLY,
    @PriceGroups                [crt].[PRICEACCOUNTRELATIONSTABLETYPE] READONLY,
    @Customer                   nvarchar(20),
    @MinDate                    DATE,
    @MaxDate                    DATE,
    @nvc_CurrencyCode           NVARCHAR(3)
AS
BEGIN
    SET NOCOUNT ON

    DECLARE @NoDate DATE = [crt].GETMINAXDATE();

    SELECT
        ta.RECID,
        ta.ITEMCODE,
        ta.ACCOUNTCODE,
        ta.ITEMRELATION,
        ta.ACCOUNTRELATION,
        ta.QUANTITYAMOUNTFROM,
        ta.QUANTITYAMOUNTTO,
        ta.FROMDATE,
        ta.TODATE,
        ta.AMOUNT,
        ta.CURRENCY,
        ta.PERCENT1,
        ta.PERCENT2,
        ta.SEARCHAGAIN,
        ta.PRICEUNIT,
        ta.RELATION,
        ta.UNITID,
        ta.MARKUP,
        ta.ALLOCATEMARKUP,
        ta.INVENTDIMID,
        ta.MAXIMUMRETAILPRICE_IN AS MAXIMUMRETAILPRICEINDIA,
        invdim.CONFIGID,
        invdim.INVENTCOLORID,
        invdim.INVENTSIZEID,
        invdim.INVENTSTYLEID
    FROM [ax].PRICEDISCTABLE ta
    INNER JOIN [ax].RETAILCHANNELTABLE AS c
        ON c.INVENTLOCATIONDATAAREAID = ta.DATAAREAID AND c.RECID = @bi_ChannelId
    LEFT JOIN [ax].INVENTDIM invdim ON ta.INVENTDIMID = invdim.INVENTDIMID AND invdim.DATAAREAID = c.INVENTLOCATIONDATAAREAID
    WHERE
        -- and item/group relation matches
	    ta.ITEMRELATION in (SELECT i.STRINGID FROM @ItemIds i) AND ta.ITEMCODE = 0

        -- agreement is of price sales
        AND ta.RELATION = 4
        AND ta.CURRENCY = @nvc_CurrencyCode 

        -- and currently active
        AND ((ta.FROMDATE <= @MinDate OR ta.FROMDATE <= @NoDate)
                AND (ta.TODATE >= @MaxDate OR ta.TODATE <= @NoDate))

        -- and customer/group relation matches
        AND
        (
         -- account code is group and relation is in the price groups
         ((ta.ACCOUNTCODE = 1) AND
            (ta.ACCOUNTRELATION IN (SELECT ar.ACCOUNTRELATION FROM @PriceGroups ar)))
         OR
         -- or account code is customer and customer is on the agreement
         ((ta.ACCOUNTCODE = 0) AND (ta.ACCOUNTRELATION = @Customer))
         OR
         -- or account code is ALL customers
         ((ta.ACCOUNTCODE = 2))
        )

        -- and warehouse is either for all or for current channel
        AND
        (
         invdim.INVENTLOCATIONID = '' OR (invdim.INVENTLOCATIONID = c.INVENTLOCATION)
        )
    ORDER BY [ta].ITEMRELATION
    OFFSET (SELECT TOP 1 [SKIP] FROM @tvp_QueryResultSettings) ROWS
    FETCH NEXT (SELECT TOP 1 [TOP] FROM @tvp_QueryResultSettings) ROWS ONLY

END;
GO
PRINT N'Altering [crt].[GETSALESLINEDELIVERYPREFERENCES]...';


GO

ALTER PROCEDURE [crt].[GETSALESLINEDELIVERYPREFERENCES]
    @tvp_QueryResultSettings        [crt].[QUERYRESULTSETTINGSTABLETYPE] READONLY,
    @bi_ChannelId                   BIGINT,
    @tvp_salesLineDeliveryOptions   [crt].[SALESLINEDELIVERYOPTIONSTABLETYPE]   READONLY
AS
BEGIN

    DECLARE @dt_UtcDate AS DATETIME
    DECLARE @nv_PickupDeliveryModeCode AS NVARCHAR(10)
    DECLARE @nv_ElectronicDeliveryModeCode AS NVARCHAR(10)
    
    SET NOCOUNT ON
        
    SET @dt_UtcDate = GETUTCDATE()
    
    SELECT 
        @nv_PickupDeliveryModeCode = PICKUPDELIVERYMODECODE, 
        @nv_ElectronicDeliveryModeCode = ELECTRONICDELIVERYMODECODE 
    FROM [ax].RETAILPARAMETERS
    
    SELECT DISTINCT 
        SALESLINEID, 
        CASE 
            WHEN DV.CODE = @nv_PickupDeliveryModeCode THEN [crt].GETPICKUPDELIVERYTYPE()
            WHEN DV.CODE = @nv_ElectronicDeliveryModeCode THEN [crt].GETELECTRONICDELIVERYTYPE()
        ELSE [crt].GETSHIPTOADDRESSDELIVERYTYPE()
        END AS DELIVERYPREFERENCETYPE
    FROM @tvp_salesLineDeliveryOptions SDO
    INNER JOIN [crt].DELIVERYMODESEXPLODEDVIEW DV ON DV.CHANNELID = @bi_ChannelId
        AND DV.ITEMID = SDO.ITEMID
        AND (DV.INVENTDIM = '' OR DV.INVENTDIM = ISNULL(NULLIF(SDO.VARIANTINVENTDIMID,''),DV.INVENTDIM))
    ORDER BY [SDO].SALESLINEID
    OFFSET (SELECT TOP 1 [SKIP] FROM @tvp_QueryResultSettings) ROWS
    FETCH NEXT (SELECT TOP 1 [TOP] FROM @tvp_QueryResultSettings) ROWS ONLY

END;
GO
PRINT N'Altering [crt].[GETSHIFTREQUIREDAMOUNTSPERTENDER]...';


GO

ALTER PROCEDURE [crt].[GETSHIFTREQUIREDAMOUNTSPERTENDER]
	@bi_ChannelId						bigint,
	@nvc_TerminalId						nvarchar(10),
	@bi_ShiftId						bigint,
	@nvc_DataAreaId						nvarchar(4)
AS

BEGIN
	SET NOCOUNT ON;

	-- 1. Find the last tender declaration date time
	DECLARE @dtt_StartDateTime datetime;

	SELECT	@dtt_StartDateTime = MAX(RTT.CREATEDDATETIME)
	FROM	[ax].[RETAILTRANSACTIONTABLE] RTT
	WHERE	RTT.DATAAREAID = @nvc_DataAreaId 
			AND RTT.CHANNEL = @bi_ChannelId
			AND RTT.BATCHTERMINALID = @nvc_TerminalId
			AND RTT.BATCHID = @bi_ShiftId
			AND RTT.TYPE = 7 -- 7 for Tender declare operation

	IF (@dtt_StartDateTime IS NULL)
	BEGIN
		SET @dtt_StartDateTime = [ax].GETMINAXDATE();
	END

	-- 2. Retrieves the shift payment transaction summary per tender type
	DECLARE @tvp_ShiftTenderPaymentTransType as [crt].[SHIFTTENDERTRANSTYPE];

	INSERT INTO @tvp_ShiftTenderPaymentTransType
	SELECT	SUM(PTV.TENDEREDAMOUNT) AS TENDEREDAMOUNT,
			PTV.TENDERTYPEID,
			PTV.CURRENCY,
			SUM(PTV.TENDEREDAMOUNTCUR) AS TENDEREDAMOUNTCUR, 
			PTV.CARDTYPEID
	FROM	[crt].[SHIFTTENDERPAYMENTTRANSVIEW] PTV
	WHERE	PTV.COUNTINGREQUIRED = 1 
			AND PTV.CREATEDDATETIME > @dtt_StartDateTime 
			AND PTV.CHANNEL = @bi_ChannelId 
			AND PTV.BATCHTERMINALID = @nvc_TerminalId 
			AND PTV.BATCHID = @bi_ShiftId 
			AND PTV.DATAAREAID = @nvc_DataAreaId 
	GROUP BY PTV.TENDERTYPEID, PTV.CURRENCY, PTV.CARDTYPEID 
	ORDER BY PTV.TENDERTYPEID
	
	-- 3. Retrieves the shift bank drop transaction summary per tender type
	DECLARE @tvp_ShiftTenderBankDropTransType as [crt].[SHIFTTENDERTRANSTYPE];

	INSERT INTO @tvp_ShiftTenderBankDropTransType
	SELECT	SUM(BDTV.TENDEREDAMOUNT) * -1 AS TENDEREDAMOUNT,
			BDTV.TENDERTYPEID,
			BDTV.CURRENCY,
			SUM(BDTV.TENDEREDAMOUNTCUR) * -1 AS TENDEREDAMOUNTCUR, 
			BDTV.CARDTYPEID
	FROM	[crt].[SHIFTTENDERBANKDROPTRANSVIEW] BDTV
	WHERE	BDTV.COUNTINGREQUIRED = 1 
			AND BDTV.CREATEDDATETIME > @dtt_StartDateTime 
			AND BDTV.CHANNEL = @bi_ChannelId 
			AND BDTV.BATCHTERMINALID = @nvc_TerminalId 
			AND BDTV.BATCHID = @bi_ShiftId 
			AND BDTV.DATAAREAID = @nvc_DataAreaId 
	GROUP BY BDTV.TENDERTYPEID, BDTV.CURRENCY, BDTV.CARDTYPEID 
	ORDER BY BDTV.TENDERTYPEID
	
	-- 4. Retrieves the shift safe drop transaction summary per tender type
	DECLARE @tvp_ShiftTenderSafeDropTransType as [crt].[SHIFTTENDERTRANSTYPE];

	INSERT INTO @tvp_ShiftTenderSafeDropTransType
	SELECT	SUM(SDTV.TENDEREDAMOUNT) * -1 AS TENDEREDAMOUNT,
			SDTV.TENDERTYPEID,
			SDTV.CURRENCY,
			SUM(SDTV.TENDEREDAMOUNTCUR) * -1 AS TENDEREDAMOUNTCUR, 
			SDTV.CARDTYPEID
	FROM	[crt].[SHIFTTENDERSAFEDROPTRANSVIEW] SDTV
	WHERE	SDTV.COUNTINGREQUIRED = 1 
			AND SDTV.CREATEDDATETIME > @dtt_StartDateTime 
			AND SDTV.CHANNEL = @bi_ChannelId 
			AND SDTV.BATCHTERMINALID = @nvc_TerminalId 
			AND SDTV.BATCHID = @bi_ShiftId 
			AND SDTV.DATAAREAID = @nvc_DataAreaId 
	GROUP BY SDTV.TENDERTYPEID, SDTV.CURRENCY, SDTV.CARDTYPEID 
	ORDER BY SDTV.TENDERTYPEID

	-- 5. Aggregates the amount grouping by the tender type
	SELECT	SUM(T.TENDEREDAMOUNT) AS TENDEREDAMOUNT,
			T.TENDERTYPEID,
			T.CURRENCY,
			SUM(T.TENDEREDAMOUNTCUR) AS TENDEREDAMOUNTCUR,
			T.CARDTYPEID 
	FROM (
		SELECT	TENDEREDAMOUNT, TENDERTYPEID, CURRENCY, TENDEREDAMOUNTCUR, CARDTYPEID
		FROM	@tvp_ShiftTenderPaymentTransType
		UNION ALL
		SELECT	TENDEREDAMOUNT, TENDERTYPEID, CURRENCY, TENDEREDAMOUNTCUR, CARDTYPEID
		FROM	@tvp_ShiftTenderBankDropTransType
		UNION ALL
		SELECT	TENDEREDAMOUNT, TENDERTYPEID, CURRENCY, TENDEREDAMOUNTCUR, CARDTYPEID
		FROM	@tvp_ShiftTenderSafeDropTransType
	) T
	GROUP BY T.TENDERTYPEID, T.CURRENCY, T.CARDTYPEID
	ORDER BY T.TENDERTYPEID

END;
GO
PRINT N'Altering [crt].[GETSHIFTSALESDATA]...';


GO

ALTER PROCEDURE [crt].[GETSHIFTSALESDATA]
    @bi_ChannelId						bigint,
	@nvc_TerminalId						nvarchar(10),
	@bi_ShiftId							bigint,
	@i_TaxInclusive						int
AS

BEGIN
	SET NOCOUNT ON;

	DECLARE @SuspendedCount INT
	DECLARE @SalesTotal NUMERIC (32,16)
	DECLARE @ReturnsTotal NUMERIC (32,16)
	DECLARE @DiscountTotal NUMERIC (32,16)
	DECLARE @TaxTotal NUMERIC (32,16)
	DECLARE @SalesCount INT
	DECLARE @PaidToAccountTotal NUMERIC (32,16)

	-- Calculate the Suspended Sales transactions count.
	SELECT	@SuspendedCount = COUNT(*) 
	FROM	[crt].[SALESTRANSACTION] 
	WHERE	CHANNELID = @bi_ChannelId
            AND TERMINALID = @nvc_TerminalId
            AND ISSUSPENDED = 1
            AND DELETEDDATETIME IS NULL

	-- Calculate Paid to account total
	SELECT	@PaidToAccountTotal = CAST(SUM(AMOUNTTENDERED) AS NUMERIC(32,16)) 
	FROM	[ax].[RETAILTRANSACTIONPAYMENTTRANS] AS L 
			INNER JOIN [ax].[RETAILTRANSACTIONTABLE] AS H ON H.TRANSACTIONID = L.TRANSACTIONID 
					AND		H.STORE = L.STORE
					AND		H.TERMINAL = L.TERMINAL 
					AND		H.DATAAREAID = L.DATAAREAID
	WHERE	H.CHANNEL = @bi_ChannelId
			AND		H.TERMINAL = @nvc_TerminalId 
			AND		H.BATCHID = @bi_ShiftId 
			AND		TRANSACTIONSTATUS = 0 -- Normal transaction status
			AND		H.TYPE = 3 -- Payment transaction

	-- Calculate the retail transaction sales amount.
	SELECT	@SalesTotal = (-1 * (SUM(SALES.SALESAMOUNT) + CASE WHEN @i_TaxInclusive = 1 THEN SUM(SALES.SALESTAXAMOUNT) ELSE 0 END)) ,
			@ReturnsTotal = (SUM(SALES.RETURNAMOUNT) + CASE WHEN @i_TaxInclusive = 1 THEN SUM(SALES.RETURNTAXAMOUNT) ELSE 0 END),
			@DiscountTotal = SUM(SALES.DISCAMOUNT),
			-- Negate the tax amount as tax is saved as negative for sales and positive for returns
			@TaxTotal = (-1 * SUM(SALES.TAXAMOUNT)),
			@SalesCount = COUNT(DISTINCT SALES.TRANSACTIONID) 
	FROM	[crt].[RETAILTRANSACTIONSALESAMOUNTSVIEW] SALES
	WHERE	SALES.CHANNEL = @bi_ChannelId 
			AND SALES.BATCHTERMINALID = @nvc_TerminalId
			AND SALES.BATCHID = @bi_ShiftId
			-- Filter by 0 normal transaction status (usually sales transactions) (or) customer order with posted status (19 - customer order and 2 - posted transactions ie. invoiced).
			AND ((SALES.TRANSACTIONSTATUS = 0 AND SALES.ENTRYSTATUS = 0) OR (SALES.TYPE = 19 AND SALES.TRANSACTIONSTATUS = 2 AND SALES.ENTRYSTATUS = 2)) 

	-- Select all totals and statistics
	SELECT	@SalesTotal AS SALESTOTAL,
			@ReturnsTotal AS RETURNSTOTAL,
			@DiscountTotal AS DISCOUNTTOTAL,
			@TaxTotal AS TAXTOTAL,
			@PaidToAccountTotal AS PAIDTOACCOUNTTOTAL,
			@SalesCount AS SALESCOUNT,
			@SuspendedCount AS SUSPENDEDCOUNT

	-- Select all the Payment done for the current shift.
	DECLARE @tvp_ShiftTenderAmountTypeStartingAmount as [crt].[SHIFTTENDERAMOUNTTYPE]
	DECLARE @tvp_ShiftTenderAmountTypeFloatEntry as [crt].[SHIFTTENDERAMOUNTTYPE]
	DECLARE @tvp_ShiftTenderAmountTypeRemoveTender as [crt].[SHIFTTENDERAMOUNTTYPE]
	DECLARE @tvp_ShiftTenderAmountTypeSafeDrop as [crt].[SHIFTTENDERAMOUNTTYPE]
	DECLARE @tvp_ShiftTenderAmountTypeBankDrop as [crt].[SHIFTTENDERAMOUNTTYPE]
	DECLARE @tvp_ShiftTenderAmountTypeTenderDeclaration as [crt].[SHIFTTENDERAMOUNTTYPE]

	/************Transaction Type for different Daily Operations***************/
	-- TransactionType = 20 for Declare Start Amount operation
	-- TransactionType = 5 for Float Entry operation
	-- TransactionType = 4 for Remove Tender operation
	-- TransactionType = 17 for Safe drop operation
	-- TransactionType = 16 for Bank drop operation
	-- TransactionType = 7 for Tender declare operation
	/************Transaction Type for different Daily Operations***************/

	-- Get Starting shift tender total
	INSERT INTO @tvp_ShiftTenderAmountTypeStartingAmount EXEC [crt].[GETSHIFTTENDERPAYMENTTRANS] @bi_ChannelId, @nvc_TerminalId, @bi_ShiftId, 20
	-- Get Float entry shift tender total
	INSERT INTO @tvp_ShiftTenderAmountTypeFloatEntry EXEC [crt].[GETSHIFTTENDERPAYMENTTRANS] @bi_ChannelId, @nvc_TerminalId, @bi_ShiftId, 5
	-- Get tender removal shift tender total
	INSERT INTO @tvp_ShiftTenderAmountTypeRemoveTender EXEC [crt].[GETSHIFTTENDERPAYMENTTRANS] @bi_ChannelId, @nvc_TerminalId, @bi_ShiftId, 4
	-- Get safe drop shift tender total
	INSERT INTO @tvp_ShiftTenderAmountTypeSafeDrop EXEC [crt].[GETSHIFTTENDERSAFEDROPTRANS] @bi_ChannelId, @nvc_TerminalId, @bi_ShiftId, 17
	-- Get bank drop shift tender total
	INSERT INTO @tvp_ShiftTenderAmountTypeBankDrop EXEC [crt].[GETSHIFTTENDERBANKDROPTRANS] @bi_ChannelId, @nvc_TerminalId, @bi_ShiftId, 16
	-- Get tender declaration shift tender total
	INSERT INTO @tvp_ShiftTenderAmountTypeTenderDeclaration EXEC [crt].[GETSHIFTTENDERDECLARATIONTRANS] @bi_ChannelId, @nvc_TerminalId, @bi_ShiftId, 7

	DECLARE @tvp_ShiftTotalAmountTempTable as [crt].[SHIFTTENDERAMOUNTTYPE]

	-- Select the transactions cummulatively.

	INSERT INTO @tvp_ShiftTotalAmountTempTable 
	SELECT TENDERTYPEID, TENDERTYPENAME, CURRENCY, COUNTINGREQUIRED, CAST(SUM(TENDEREDAMOUNT) AS DECIMAL(32, 16)) AS TENDEREDAMOUNT, CAST(SUM(TENDEREDAMOUNTCUR) AS DECIMAL(32, 16)) AS TENDEREDAMOUNTCUR, 20 AS TRANSACTIONTYPE FROM @tvp_ShiftTenderAmountTypeStartingAmount
	GROUP BY TENDERTYPEID, TENDERTYPENAME, CURRENCY, COUNTINGREQUIRED

	INSERT INTO @tvp_ShiftTotalAmountTempTable 
	SELECT TENDERTYPEID, TENDERTYPENAME, CURRENCY, COUNTINGREQUIRED, CAST(SUM(TENDEREDAMOUNT) AS DECIMAL(32, 16)) AS TENDEREDAMOUNT, CAST(SUM(TENDEREDAMOUNTCUR) AS DECIMAL(32, 16)) AS TENDEREDAMOUNTCUR, 5 AS TRANSACTIONTYPE FROM @tvp_ShiftTenderAmountTypeFloatEntry
	GROUP BY TENDERTYPEID, TENDERTYPENAME, CURRENCY, COUNTINGREQUIRED

	INSERT INTO @tvp_ShiftTotalAmountTempTable 
	SELECT TENDERTYPEID, TENDERTYPENAME, CURRENCY, COUNTINGREQUIRED, - CAST(SUM(TENDEREDAMOUNT) AS DECIMAL(32, 16)) AS TENDEREDAMOUNT, - CAST(SUM(TENDEREDAMOUNTCUR) AS DECIMAL(32, 16)) AS TENDEREDAMOUNTCUR, 4 AS TRANSACTIONTYPE FROM @tvp_ShiftTenderAmountTypeRemoveTender
	GROUP BY TENDERTYPEID, TENDERTYPENAME, CURRENCY, COUNTINGREQUIRED

	INSERT INTO @tvp_ShiftTotalAmountTempTable 
	SELECT TENDERTYPEID, TENDERTYPENAME, CURRENCY, COUNTINGREQUIRED, CAST(SUM(TENDEREDAMOUNT) AS DECIMAL(32, 16)) AS TENDEREDAMOUNT, CAST(SUM(TENDEREDAMOUNTCUR) AS DECIMAL(32, 16)) AS TENDEREDAMOUNTCUR, 17 AS TRANSACTIONTYPE FROM @tvp_ShiftTenderAmountTypeSafeDrop
	GROUP BY TENDERTYPEID, TENDERTYPENAME, CURRENCY, COUNTINGREQUIRED

	INSERT INTO @tvp_ShiftTotalAmountTempTable 
	SELECT TENDERTYPEID, TENDERTYPENAME, CURRENCY, COUNTINGREQUIRED, CAST(SUM(TENDEREDAMOUNT) AS DECIMAL(32, 16)) AS TENDEREDAMOUNT, CAST(SUM(TENDEREDAMOUNTCUR) AS DECIMAL(32, 16)) AS TENDEREDAMOUNTCUR, 16 AS TRANSACTIONTYPE FROM @tvp_ShiftTenderAmountTypeBankDrop
	GROUP BY TENDERTYPEID, TENDERTYPENAME, CURRENCY, COUNTINGREQUIRED

	INSERT INTO @tvp_ShiftTotalAmountTempTable 
	SELECT TENDERTYPEID, TENDERTYPENAME, CURRENCY, COUNTINGREQUIRED, CAST(SUM(TENDEREDAMOUNT) AS DECIMAL(32, 16)) AS TENDEREDAMOUNT, CAST(SUM(TENDEREDAMOUNTCUR) AS DECIMAL(32, 16)) AS TENDEREDAMOUNTCUR, 7 AS TRANSACTIONTYPE FROM @tvp_ShiftTenderAmountTypeTenderDeclaration
	GROUP BY TENDERTYPEID, TENDERTYPENAME, CURRENCY, COUNTINGREQUIRED

	EXEC [crt].[GETSHIFTTOTALAMOUNT] @tvp_ShiftTotalAmountTempTable

	-- Select the sum of Income expense account group by Account type and Income Expense Account number.
	SELECT	L.INCOMEEXEPENSEACCOUNT, 
			L.ACCOUNTTYPE, 
			CASE	WHEN L.ACCOUNTTYPE = 0 THEN (-1.0 * SUM(L.AMOUNT)) -- Income account type = 0
				WHEN L.ACCOUNTTYPE = 1 THEN SUM(L.AMOUNT) END AS AMOUNT -- Expense account type = 1 
	FROM	[ax].[RETAILTRANSACTIONINCOMEEXPENSETRANS] AS L 
			INNER JOIN [ax].[RETAILTRANSACTIONTABLE] AS H ON H.TRANSACTIONID = L.TRANSACTIONID 
					AND H.CHANNEL = L.CHANNEL
					AND H.TERMINAL = L.TERMINAL
					AND H.DATAAREAID = L.DATAAREAID 			
	WHERE   H.CHANNEL = @bi_ChannelId 
			AND H.BATCHTERMINALID = @nvc_TerminalId
			AND H.BATCHID = @bi_ShiftId 
			AND H.ENTRYSTATUS = 0 -- EntryStatus = Normal
			AND L.TRANSACTIONSTATUS = 0 -- TransactionStatus = Normal
			AND H.[TYPE] = 18 -- TransactionType = Income/ Expense
	GROUP BY L.ACCOUNTTYPE, L.INCOMEEXEPENSEACCOUNT
	ORDER BY L.INCOMEEXEPENSEACCOUNT

END;
GO
PRINT N'Altering [crt].[INSERTBANKEDTENDERTRANS]...';


GO

/******* ******* ******* ******* ******* ******* ******* ******* ******* ******* *******
    INSERTBANKEDTENDERTRANS inserts tender transactions into AX.[RETAILTRANSACTIONBANKEDTENDERTRANS].
******* ******* ******* ******* ******* ******* ******* ******* ******* ******* *******/

ALTER PROCEDURE [crt].[INSERTBANKEDTENDERTRANS]
    @bi_channelId                   BIGINT,
    @TVP_TenderDropTransTable       [crt].[TENDERDROPTRANSTYPE]    READONLY,
    @d_BusinessDate                 DATE
AS
BEGIN

    SET NOCOUNT ON;

    DECLARE @i_ReturnCode               INT;
    DECLARE @i_TransactionIsOurs        INT;
    DECLARE @i_Error                    INT;

    -- initializes the return code and assume the transaction is not ours by default
    SET @i_ReturnCode = 0;
    SET @i_TransactionIsOurs = 0;

    IF @@TRANCOUNT = 0
    BEGIN
        BEGIN TRANSACTION;

        SELECT @i_Error = @@ERROR;
        IF @i_Error <> 0
        BEGIN
            SET @i_ReturnCode = @i_Error;
            GOTO exit_label;
        END;

        SET @i_TransactionIsOurs = 1;
    END;

    -- Perform Insert
    INSERT INTO [ax].[RETAILTRANSACTIONBANKEDTENDERTRANS]
           (
            [AMOUNTCUR]
           ,[AMOUNTCURPOS]
           ,[AMOUNTMST]
           ,[AMOUNTMSTPOS]
           ,[AMOUNTTENDERED]
           ,[AMOUNTTENDEREDPOS]
           ,[BANKBAGNO]
           ,[CARDORACCOUNT]
           ,[CARDTYPEID]
           ,[CHANNEL]
           ,[CURRENCY]
           ,[EXCHRATE]
           ,[EXCHRATEMST]
           ,[LINENUM]
           ,[QTY]
           ,[REPLICATED]
           ,[SHIFT]
           ,[SHIFTDATE]
           ,[STAFF]
           ,[STATEMENTCODE]
           ,[STATUSTYPE]
           ,[STORE]
           ,[TENDERTYPE]
           ,[TERMINAL]
           ,[TRANSACTIONID]
           ,[TRANSACTIONSTATUS]
           ,[TRANSDATE]
           ,[TRANSTIME]
           ,[DATAAREAID]
           ,[BUSINESSDATE])
     SELECT
           [AMOUNTCUR]
           ,[AMOUNTCURPOS]
           ,[AMOUNTMST]
           ,[AMOUNTMSTPOS]
           ,[AMOUNTTENDERED]
           ,[AMOUNTTENDEREDPOS]
           ,[BANKBAGNO]
           ,[CARDORACCOUNT]
           ,[CARDTYPEID]
           ,@bi_channelId
           ,[CURRENCY]
           ,[EXCHRATE] * 100.00 -- ePOS behavior
           ,[EXCHRATEMST] * 100.00 -- ePOS behavior
           ,[LINENUM]
           ,[QTY]
           ,[REPLICATED]
           ,[SHIFT]
           ,[SHIFTDATE]
           ,[STAFF]
           ,[STATEMENTCODE]
           ,[STATUSTYPE]
           ,[STORE]
           ,[TENDERTYPE]
           ,[TERMINAL]
           ,[TRANSACTIONID]
           ,[TRANSACTIONSTATUS]
           ,[TRANSDATE]
           ,[TRANSTIME]
           ,[DATAAREAID]
           ,@d_BusinessDate
            FROM @TVP_TenderDropTransTable AS Source

    SELECT @i_Error = @@ERROR;
    IF @i_Error <> 0
    BEGIN
        SET @i_ReturnCode = @i_Error;
        GOTO exit_label;
    END;

    IF @i_TransactionIsOurs = 1
    BEGIN
        COMMIT TRANSACTION;
        
        SET @i_Error = @@ERROR;
        IF @i_Error <> 0
        BEGIN
            SET @i_ReturnCode = @i_Error;
            GOTO exit_label;
        END;

        SET @i_TransactionIsOurs = 0;
    END;

exit_label:

    IF @i_TransactionIsOurs = 1
    BEGIN
        ROLLBACK TRANSACTION;
    END;

    RETURN @i_ReturnCode;
END;
GO
PRINT N'Altering [crt].[INSERTCUSTOMERACCOUNTDEPOSITTRANSACTION]...';


GO

ALTER PROCEDURE [crt].[INSERTCUSTOMERACCOUNTDEPOSITTRANSACTION]
    @TVP_CUSTOMERACCOUNTDEPOSITTRANS         [crt].[RETAILTRANSACTIONCUSTOMERACCOUNTDEPOSITTRANSTABLETYPE]    READONLY,
    @d_BusinessDate                          DATE
AS
BEGIN

    SET NOCOUNT ON;

    DECLARE @i_ReturnCode               INT;
    DECLARE @i_TransactionIsOurs        INT;
    DECLARE @i_Error                    INT;

    -- initializes the return code and assume the transaction is not ours by default
    SET @i_ReturnCode = 0;
    SET @i_TransactionIsOurs = 0;

    IF @@TRANCOUNT = 0
    BEGIN
        BEGIN TRANSACTION;

        SELECT @i_Error = @@ERROR;
        IF @i_Error <> 0
        BEGIN
            SET @i_ReturnCode = @i_Error;
            GOTO exit_label;
        END;

        SET @i_TransactionIsOurs = 1;
    END;

    INSERT INTO [ax].[RETAILTRANSACTIONCUSTOMERACCOUNTDEPOSITTRANS]
    (
            [TRANSACTIONID]
            ,[RECEIPTID]
            ,[COMMENT]
            ,[CUSTACCOUNT]
            ,[STORE]
            ,[TERMINAL]
            ,[STAFF]
            ,[TRANSACTIONSTATUS]
            ,[AMOUNT]
            ,[TRANSDATE]
            ,[TRANSTIME]
            ,[DATAAREAID]
            ,[CHANNEL]
            ,[BUSINESSDATE]
    )
     SELECT
            [TRANSACTIONID]
            ,[RECEIPTID]
            ,[COMMENT]
            ,[CUSTACCOUNT]
            ,[STORE]
            ,[TERMINAL]
            ,[STAFF]
            ,[TRANSACTIONSTATUS]
            ,[AMOUNT]
            ,[TRANSDATE]
            ,[TRANSTIME]
            ,[DATAAREAID]
            ,[CHANNEL]
            ,@d_BusinessDate
    FROM @TVP_CUSTOMERACCOUNTDEPOSITTRANS AS SOURCE;

    SELECT @i_Error = @@ERROR;
    IF @i_Error <> 0
    BEGIN
        SET @i_ReturnCode = @i_Error;
        GOTO exit_label;
    END;

    IF @i_TransactionIsOurs = 1
    BEGIN
        COMMIT TRANSACTION;

        SET @i_Error = @@ERROR;
        IF @i_Error <> 0
        BEGIN
            SET @i_ReturnCode = @i_Error;
            GOTO exit_label;
        END;

        SET @i_TransactionIsOurs = 0;
    END;

exit_label:

    IF @i_TransactionIsOurs = 1
    BEGIN
        ROLLBACK TRANSACTION;
    END;

    RETURN @i_ReturnCode;
END;
GO
PRINT N'Altering [crt].[INSERTINCOMEEXPENSETRANSACTION]...';


GO

ALTER PROCEDURE [crt].[INSERTINCOMEEXPENSETRANSACTION]
    @TVP_INCOMEEXPENSETYPE         [crt].[RETAILINCOMEEXPENSETABLETYPE]    READONLY,
    @d_BusinessDate                DATE
AS
BEGIN

    SET NOCOUNT ON;

    DECLARE @i_ReturnCode               INT;
    DECLARE @i_TransactionIsOurs        INT;
    DECLARE @i_Error                    INT;

    -- initializes the return code and assume the transaction is not ours by default
    SET @i_ReturnCode = 0;
    SET @i_TransactionIsOurs = 0;

    IF @@TRANCOUNT = 0
    BEGIN
        BEGIN TRANSACTION;

        SELECT @i_Error = @@ERROR;
        IF @i_Error <> 0
        BEGIN
            SET @i_ReturnCode = @i_Error;
            GOTO exit_label;
        END;

        SET @i_TransactionIsOurs = 1;
    END;

    INSERT INTO [ax].[RETAILTRANSACTIONINCOMEEXPENSETRANS]
    (
            [TRANSACTIONID]
            ,[RECEIPTID]
            ,[INCOMEEXEPENSEACCOUNT]
            ,[STORE]
            ,[TERMINAL]
            ,[STAFF]
            ,[TRANSACTIONSTATUS]
            ,[AMOUNT]
            ,[ACCOUNTTYPE]
            ,[TRANSDATE]
            ,[TRANSTIME]
            ,[DATAAREAID]
            ,[CHANNEL]
            ,[BUSINESSDATE]
    )
     SELECT
            [TRANSACTIONID]
            ,[RECEIPTID]
            ,[INCOMEEXEPENSEACCOUNT]
            ,[STORE]
            ,[TERMINAL]
            ,[STAFF]
            ,[TRANSACTIONSTATUS]
            ,[AMOUNT]
            ,[ACCOUNTTYPE]
            ,[TRANSDATE]
            ,[TRANSTIME]
            ,[DATAAREAID]
            ,[CHANNEL]
            ,@d_BusinessDate
    FROM @TVP_INCOMEEXPENSETYPE AS SOURCE;

    SELECT @i_Error = @@ERROR;
    IF @i_Error <> 0
    BEGIN
        SET @i_ReturnCode = @i_Error;
        GOTO exit_label;
    END;

    IF @i_TransactionIsOurs = 1
    BEGIN
        COMMIT TRANSACTION;

        SET @i_Error = @@ERROR;
        IF @i_Error <> 0
        BEGIN
            SET @i_ReturnCode = @i_Error;
            GOTO exit_label;
        END;

        SET @i_TransactionIsOurs = 0;
    END;

exit_label:

    IF @i_TransactionIsOurs = 1
    BEGIN
        ROLLBACK TRANSACTION;
    END;

    RETURN @i_ReturnCode;
END;
GO
PRINT N'Altering [crt].[INSERTINFOCODETRANS]...';


GO

ALTER PROCEDURE [crt].[INSERTINFOCODETRANS]
    @bi_ChannelId           BIGINT,
    @TVP_InfoCodeTrans      [crt].[RETAILTRANSACTIONINFOCODETRANSTABLETYPE]    READONLY,
    @d_BusinessDate         DATE
AS
BEGIN

    SET NOCOUNT ON;

    DECLARE @i_ReturnCode               INT;
    DECLARE @i_TransactionIsOurs        INT;
    DECLARE @i_Error                    INT;

    -- initializes the return code and assume the transaction is not ours by default
    SET @i_ReturnCode = 0;
    SET @i_TransactionIsOurs = 0;

    IF @@TRANCOUNT = 0
    BEGIN
        BEGIN TRANSACTION;

        SELECT @i_Error = @@ERROR;
        IF @i_Error <> 0
        BEGIN
            SET @i_ReturnCode = @i_Error;
            GOTO exit_label;
        END;

        SET @i_TransactionIsOurs = 1;
    END;

    -- Perform Insert
    INSERT INTO [ax].RETAILTRANSACTIONINFOCODETRANS
    (
        [TRANSACTIONID],
        [LINENUM],
        [DATAAREAID],
        [TYPE],
        [INFOCODEID],
        [INFORMATION],
        [INFOAMOUNT],
        [TRANSDATE],
        [TRANSTIME],
        [STORE],
        [TERMINAL],
        [STAFF],
        [ITEMTENDER],
        [AMOUNT],
        [INPUTTYPE],
        [SUBINFOCODEID],
        [STATEMENTCODE],
        [SOURCECODE],
        [SOURCECODE2],
        [SOURCECODE3],
        [PARENTLINENUM],
        [CHANNEL],
        [BUSINESSDATE]
    )
    SELECT
        [TRANSACTIONID],
        [LINENUM],
        [DATAAREAID],
        [TYPE],
        [INFOCODEID],
        [INFORMATION],
        [INFOAMOUNT],
        CAST([TRANSDATE] AS DATE),
        [TRANSTIME],
        [STORE],
        [TERMINAL],
        [STAFF],
        [ITEMTENDER],
        [AMOUNT],
        [INPUTTYPE],
        [SUBINFOCODEID],
        [STATEMENTCODE],
        [SOURCECODE],
        [SOURCECODE2],
        [SOURCECODE3],
        [PARENTLINENUM],
        @bi_ChannelId,
        @d_BusinessDate
    FROM @TVP_InfoCodeTrans AS Source;

    SELECT @i_Error = @@ERROR;
    IF @i_Error <> 0
    BEGIN
        SET @i_ReturnCode = @i_Error;
        GOTO exit_label;
    END;

    IF @i_TransactionIsOurs = 1
    BEGIN
        COMMIT TRANSACTION;

        SET @i_Error = @@ERROR;
        IF @i_Error <> 0
        BEGIN
            SET @i_ReturnCode = @i_Error;
            GOTO exit_label;
        END;

        SET @i_TransactionIsOurs = 0;
    END;

exit_label:

    IF @i_TransactionIsOurs = 1
    BEGIN
        ROLLBACK TRANSACTION;
    END;

    RETURN @i_ReturnCode;
END;
GO
PRINT N'Altering [crt].[INSERTPAYMENTTRANS]...';


GO

ALTER PROCEDURE [crt].[INSERTPAYMENTTRANS]
    @bi_channelId           BIGINT,
    @TVP_PaymentTrans       [crt].[RETAILTRANSACTIONPAYMENTTRANSTABLETYPE]    READONLY,
    @d_BusinessDate     DATE
AS
BEGIN

    SET NOCOUNT ON;

    DECLARE @i_ReturnCode               INT;
    DECLARE @i_TransactionIsOurs        INT;
    DECLARE @i_Error                    INT;

    -- initializes the return code and assume the transaction is not ours by default
    SET @i_ReturnCode = 0;
    SET @i_TransactionIsOurs = 0;
    
    IF @@TRANCOUNT = 0
    BEGIN
        BEGIN TRANSACTION;

        SELECT @i_Error = @@ERROR;
        IF @i_Error <> 0
        BEGIN
            SET @i_ReturnCode = @i_Error;
            GOTO exit_label;
        END;

        SET @i_TransactionIsOurs = 1;
    END;

        -- Perform Insert
    INSERT INTO [ax].RETAILTRANSACTIONPAYMENTTRANS
    (
        [AMOUNTCUR]
        ,[CURRENCY]
        ,[EXCHRATE]
        ,[AMOUNTTENDERED]
        ,[EXCHRATEMST]
        ,[AMOUNTMST]
        ,[DATAAREAID]
        ,[LINENUM]
        ,[PAYMENTCARDTOKEN]
        ,[PAYMENTAUTHORIZATION]
        ,[ISPAYMENTCAPTURED]
        ,[STORE]
        ,[TENDERTYPE]
        ,[TERMINAL]
        ,[STAFF]
        ,[TRANSACTIONID]
        ,[CHANGELINE]
        ,[SIGCAPDATA]
        ,[TRANSACTIONSTATUS]
        ,[RECEIPTID]
        ,[GIFTCARDID]
        ,[ISPREPAYMENT]
        ,[LOYALTYCARDID]
        ,[CARDORACCOUNT]
        ,[CARDTYPEID]
        ,[CREDITVOUCHERID]
        ,[TRANSDATE]
        ,[TRANSTIME]
        ,[QTY]
        ,[CHANNEL]
        ,[BUSINESSDATE]
    )
    SELECT
        [AMOUNTCUR]
        ,[TENDERCUR]
        ,[EXCHRATECUR] * 100.00 -- ePOS behavior
        ,[AMOUNTTENDERED]
        ,[EXCHRATEMST] * 100.00 -- ePOS behavior
        ,[AMOUNTMST]
        ,[DATAAREAID]
        ,[LINENUM]
        ,[PAYMENTCARDTOKEN]
        ,[PAYMENTAUTHORIZATION]
        ,[ISPAYMENTCAPTURED]
        ,[STORE]
        ,[TENDERTYPE]
        ,[TERMINAL]
        ,[STAFF]
        ,[TRANSACTIONID]
        ,[CHANGELINE]
        ,[SIGCAPDATA]
        ,[TRANSACTIONSTATUS]
        ,[RECEIPTID]
        ,[GIFTCARDID]
        ,[ISPREPAYMENT]
        ,[LOYALTYCARDID]
        ,[CARDORACCOUNT]
        ,[CARDTYPEID]
        ,[CREDITVOUCHERID]
        ,CAST([TRANSDATE] AS DATE)
        ,[TRANSTIME]
        ,1.0
        ,@bi_channelId
        ,@d_BusinessDate
    FROM @TVP_PaymentTrans AS Source;


    SELECT @i_Error = @@ERROR;
    IF @i_Error <> 0
    BEGIN
        SET @i_ReturnCode = @i_Error;
        GOTO exit_label;
    END;

    IF @i_TransactionIsOurs = 1
    BEGIN
        COMMIT TRANSACTION;

        SET @i_Error = @@ERROR;
    IF @i_Error <> 0
        BEGIN
            SET @i_ReturnCode = @i_Error;
            GOTO exit_label;
        END;

        SET @i_TransactionIsOurs = 0;
    END;

exit_label:

    IF @i_TransactionIsOurs = 1
    BEGIN
        ROLLBACK TRANSACTION;
    END;

    RETURN @i_ReturnCode;
END;
GO
PRINT N'Altering [crt].[INSERTRETAILSTAFFLOGINLOG]...';


GO
ALTER PROCEDURE [crt].[INSERTRETAILSTAFFLOGINLOG]
     @TERMINALID nvarchar(10)
    ,@CHANNELID nvarchar(10)
    ,@STAFFID   nvarchar(25)    
    ,@DATAAREAID nvarchar(4)
    ,@RETURN_VALUE int output							-- for backwards compatibility, do not use on new code
    ,@CREATEONLYIFNOSESSION bit = NULL					-- if true, only creates a new record if there are no other sessions for the @STAFFID. Default value: true
    ,@OPENSESSIONOTHERTERMINALID nvarchar(10) output	-- a terminal id, different from @TERMINALID, in which the @STAFFID has an open session    
AS
BEGIN
    SET NOCOUNT ON
	BEGIN TRANSACTION;
	
	IF @CREATEONLYIFNOSESSION IS NULL
	BEGIN
		SET @CREATEONLYIFNOSESSION = 1
	END
		
	-- gets the first terminal ID for which the user has a session that is not the terminalId we want the create the session for
	-- this means that if we found a record, the user has a session open in another terminal
    SET @OPENSESSIONOTHERTERMINALID = (SELECT TOP 1 TERMINALID FROM [crt].[RETAILSTAFFLOGINLOG]
        WHERE
            STAFFID = @STAFFID
            AND DATAAREAID = @DATAAREAID	-- a session open on another legal entity is allowed
            AND TERMINALID <> @TERMINALID)

    SET @RETURN_VALUE = (SELECT CASE WHEN @OPENSESSIONOTHERTERMINALID IS NULL THEN 1 ELSE 0 END)
            
	IF
	(		
		(
			-- we can create a new session if we are allowed to create a session even when there are other active sessions
			@CREATEONLYIFNOSESSION = 0
			-- or there is no other active session
			OR @OPENSESSIONOTHERTERMINALID IS NULL
		)
		-- but do not create a session again if it already exists for @TERMINALID
		AND NOT EXISTS
		(
			SELECT 1 FROM [crt].[RETAILSTAFFLOGINLOG]
			WHERE
				CHANNELID = @CHANNELID
				AND STAFFID = @STAFFID
				AND DATAAREAID = @DATAAREAID
				AND TERMINALID = @TERMINALID
		)
	)
	BEGIN
		INSERT INTO [crt].[RETAILSTAFFLOGINLOG]
		(
			[CHANNELID],
			[TERMINALID],
			[STAFFID],			
			[DATAAREAID],
			[CREATEDDATETIME]						
		)
		VALUES
		(
			@CHANNELID,
			@TERMINALID,
			@STAFFID,
			@DATAAREAID,
			GETDATE()
		)
	END
	COMMIT TRANSACTION;
END;
GO
PRINT N'Altering [crt].[INSERTSAFETENDERTRANS]...';


GO

/******* ******* ******* ******* ******* ******* ******* ******* ******* ******* *******
    [INSERTSAFETENDERTRANS] inserts tender transactions into AX.[RETAILTRANSACTIONSAFETENDERTRANS].
******* ******* ******* ******* ******* ******* ******* ******* ******* ******* *******/

ALTER PROCEDURE [crt].[INSERTSAFETENDERTRANS]
    @bi_channelId                   BIGINT,
    @TVP_TenderDropTransTable       [crt].[TENDERDROPTRANSTYPE]    READONLY,
    @d_BusinessDate                 DATE
AS
BEGIN

    SET NOCOUNT ON;

    DECLARE @i_ReturnCode               INT;
    DECLARE @i_TransactionIsOurs        INT;
    DECLARE @i_Error                    INT;

    -- initializes the return code and assume the transaction is not ours by default
    SET @i_ReturnCode = 0;
    SET @i_TransactionIsOurs = 0;

    IF @@TRANCOUNT = 0
    BEGIN
        BEGIN TRANSACTION;

        SELECT @i_Error = @@ERROR;
        IF @i_Error <> 0
        BEGIN
            SET @i_ReturnCode = @i_Error;
            GOTO exit_label;
        END;

        SET @i_TransactionIsOurs = 1;
    END;

    -- Perform Insert
    INSERT INTO [ax].[RETAILTRANSACTIONSAFETENDERTRANS]
           (
            [AMOUNTCUR]
           ,[AMOUNTCURPOS]
           ,[AMOUNTMST]
           ,[AMOUNTMSTPOS]
           ,[AMOUNTTENDERED]
           ,[AMOUNTTENDEREDPOS]
           ,[CARDORACCOUNT]
           ,[CARDTYPEID]
           ,[CHANNEL]
           ,[CURRENCY]
           ,[EXCHRATE]
           ,[EXCHRATEMST]
           ,[LINENUM]
           ,[QTY]
           ,[REPLICATED]
           ,[SHIFT]
           ,[SHIFTDATE]
           ,[STAFF]
           ,[STATEMENTCODE]
           ,[STATUSTYPE]
           ,[STORE]
           ,[TENDERTYPE]
           ,[TERMINAL]
           ,[TRANSACTIONID]
           ,[TRANSACTIONSTATUS]
           ,[TRANSDATE]
           ,[TRANSTIME]
           ,[DATAAREAID]
           ,[BUSINESSDATE])
     SELECT
           [AMOUNTCUR]
           ,[AMOUNTCURPOS]
           ,[AMOUNTMST]
           ,[AMOUNTMSTPOS]
           ,[AMOUNTTENDERED]
           ,[AMOUNTTENDEREDPOS]
           ,[CARDORACCOUNT]
           ,[CARDTYPEID]
           ,@bi_channelId
           ,[CURRENCY]
           ,[EXCHRATE]
           ,[EXCHRATEMST]
           ,[LINENUM]
           ,[QTY]
           ,[REPLICATED]
           ,[SHIFT]
           ,[SHIFTDATE]
           ,[STAFF]
           ,[STATEMENTCODE]
           ,[STATUSTYPE]
           ,[STORE]
           ,[TENDERTYPE]
           ,[TERMINAL]
           ,[TRANSACTIONID]
           ,[TRANSACTIONSTATUS]
           ,[TRANSDATE]
           ,[TRANSTIME]
           ,[DATAAREAID]
           ,@d_BusinessDate
           FROM @TVP_TenderDropTransTable AS Source

    SELECT @i_Error = @@ERROR;
    IF @i_Error <> 0
    BEGIN
        SET @i_ReturnCode = @i_Error;
        GOTO exit_label;
    END;

    IF @i_TransactionIsOurs = 1
    BEGIN
        COMMIT TRANSACTION;
        
        SET @i_Error = @@ERROR;
        IF @i_Error <> 0
        BEGIN
            SET @i_ReturnCode = @i_Error;
            GOTO exit_label;
        END;

        SET @i_TransactionIsOurs = 0;
    END;

exit_label:

    IF @i_TransactionIsOurs = 1
    BEGIN
        ROLLBACK TRANSACTION;
    END;

    RETURN @i_ReturnCode;
END;
GO
PRINT N'Altering [crt].[INSERTSALESTRANS]...';


GO

ALTER PROCEDURE [crt].[INSERTSALESTRANS]
    @bi_ChannelId           BIGINT,
    @TVP_SALESTRANS         [crt].[RETAILTRANSACTIONSALESTRANSTABLETYPE]    READONLY,
    @d_BusinessDate         DATE
AS
BEGIN

    SET NOCOUNT ON;

    DECLARE @i_ReturnCode               INT;
    DECLARE @i_TransactionIsOurs        INT;
    DECLARE @i_Error                    INT;

    -- initializes the return code and assume the transaction is not ours by default
    SET @i_ReturnCode = 0;
    SET @i_TransactionIsOurs = 0;

    IF @@TRANCOUNT = 0
    BEGIN
        BEGIN TRANSACTION;

        SELECT @i_Error = @@ERROR;
        IF @i_Error <> 0
        BEGIN
            SET @i_ReturnCode = @i_Error;
            GOTO exit_label;
        END;

        SET @i_TransactionIsOurs = 1;
    END;

    -- Perform Insert
    INSERT INTO [ax].RETAILTRANSACTIONSALESTRANS
    (
        [CUSTACCOUNT],
        [CREATEDDATETIME],
        [DATAAREAID],
        [DISCAMOUNT],
        [TOTALDISCAMOUNT],
        [TOTALDISCPCT],
        [LINEDSCAMOUNT],
        [PERIODICDISCAMOUNT],
        [PERIODICPERCENTAGEDISCOUNT],
        [LINEMANUALDISCOUNTAMOUNT],
        [LINEMANUALDISCOUNTPERCENTAGE],
        [DLVMODE],
        [INVENTDIMID],
        [INVENTLOCATIONID],
        [INVENTSERIALID],
        [INVENTSITEID],
        [ITEMID],
        [BARCODE],
        [LINENUM],
        [LISTINGID],
        [LOGISTICSPOSTALADDRESS],
        [NETAMOUNT],
        [NETAMOUNTINCLTAX],
        [PRICE],
        [PRICECHANGE],
        [ORIGINALPRICE],
        [QTY],
        [RECEIPTDATEREQUESTED],
        [SHIPPINGDATEREQUESTED],
        [STORE],
        [TAXAMOUNT],
        [TAXGROUP],
        [ORIGINALTAXGROUP],
        [TAXITEMGROUP],
        [ORIGINALTAXITEMGROUP],
        [TERMINALID],
        [STAFFID],
        [TRANSACTIONID],
        [UNIT],
        [VARIANTID],
        [RETURNNOSALE],
        [RETURNTRANSACTIONID],
        [RETURNLINENUM],
        [RETURNSTORE],
        [RETURNTERMINALID],
        [RECEIPTID],
        [TRANSDATE],
        [TRANSTIME],
        [TRANSACTIONSTATUS],
        [CHANNEL],
        [COMMENT],
        [GIFTCARD],
        [CATALOG],
        [ELECTRONICDELIVERYEMAIL],
        [ELECTRONICDELIVERYEMAILCONTENT],
        [FULFILLMENTSTOREID],
        [BUSINESSDATE]
    )
    SELECT
        [CUSTACCOUNT],
        [CREATEDDATETIME],
        [DATAAREAID],
        [DISCAMOUNT],
        [TOTALDISCAMOUNT],
        [TOTALDISCPCT],
        [LINEDSCAMOUNT],
        [PERIODICDISCAMOUNT],
        [PERIODICPERCENTAGEDISCOUNT],
        [LINEMANUALDISCOUNTAMOUNT],
        [LINEMANUALDISCOUNTPERCENTAGE],
        [DLVMODE],
        [INVENTDIMID],
        [INVENTLOCATIONID],
        [INVENTSERIALID],
        [INVENTSITEID],
        [ITEMID],
        [BARCODE],
        [LINENUM],
        [LISTINGID],
        [LOGISTICSPOSTALADDRESS],
        [NETAMOUNT],
        [NETAMOUNTINCLTAX],
        [PRICE],
        [PRICECHANGE],
        [ORIGINALPRICE],
        [QTY],
        CAST([RECEIPTDATEREQUESTED] AS DATE),
        CAST([SHIPPINGDATEREQUESTED] AS DATE),
        [STORE],
        [TAXAMOUNT],
        [TAXGROUP],
        [ORIGINALTAXGROUP],
        [TAXITEMGROUP],
        [ORIGINALTAXITEMGROUP],
        [TERMINALID],
        [STAFFID],
        [TRANSACTIONID],
        [UNIT],
        [VARIANTID],
        [RETURNNOSALE],
        [RETURNTRANSACTIONID],
        [RETURNLINENUM],
        [RETURNSTORE],
        [RETURNTERMINALID],
        [RECEIPTID],
        CAST([TRANSDATE] AS DATE),
        [TRANSTIME],
        [TRANSACTIONSTATUS],
        @bi_ChannelId,
        [COMMENT],
        [GIFTCARD],
        [CATALOG],
        [ELECTRONICDELIVERYEMAIL],
        [ELECTRONICDELIVERYEMAILCONTENT],
        [FULFILLMENTSTOREID],
        @d_BusinessDate
    FROM @TVP_SALESTRANS AS Source;


    SELECT @i_Error = @@ERROR;
    IF @i_Error <> 0
    BEGIN
        SET @i_ReturnCode = @i_Error;
        GOTO exit_label;
    END;

    IF @i_TransactionIsOurs = 1
    BEGIN
        COMMIT TRANSACTION;

        SET @i_Error = @@ERROR;
        IF @i_Error <> 0
        BEGIN
            SET @i_ReturnCode = @i_Error;
            GOTO exit_label;
        END;

        SET @i_TransactionIsOurs = 0;
    END;

exit_label:

    IF @i_TransactionIsOurs = 1
    BEGIN
        ROLLBACK TRANSACTION;
    END;

    RETURN @i_ReturnCode;
END;
GO
PRINT N'Altering [crt].[INSERTTENDERDECLARATION]...';


GO

/******* ******* ******* ******* ******* ******* ******* ******* ******* ******* *******
    [INSERTTENDERDECLARATION] inserts tender transactions into AX.[RETAILTRANSACTIONTENDERDECLARATIONTRANS].
******* ******* ******* ******* ******* ******* ******* ******* ******* ******* *******/

ALTER PROCEDURE [crt].[INSERTTENDERDECLARATION]
    @bi_channelId                 BIGINT,
    @TVP_TenderDeclareTrans       [crt].[TENDERDECLARATIONTRANSTYPE]    READONLY,
    @d_BusinessDate               DATE 
AS
BEGIN

    SET NOCOUNT ON;

    DECLARE @i_ReturnCode               INT;
    DECLARE @i_TransactionIsOurs        INT;
    DECLARE @i_Error                    INT;

    -- initializes the return code and assume the transaction is not ours by default
    SET @i_ReturnCode = 0;
    SET @i_TransactionIsOurs = 0;

    IF @@TRANCOUNT = 0
    BEGIN
        BEGIN TRANSACTION;

        SELECT @i_Error = @@ERROR;
        IF @i_Error <> 0
        BEGIN
            SET @i_ReturnCode = @i_Error;
            GOTO exit_label;
        END;

        SET @i_TransactionIsOurs = 1;
    END;

    -- Perform Insert
    INSERT INTO [ax].[RETAILTRANSACTIONTENDERDECLARATIONTRANS]
    (
      [AMOUNTCUR]
      ,[AMOUNTMST]
      ,[AMOUNTTENDERED]
      ,[CARDID]
      ,[CHANNEL]
      ,[CURRENCY]
      ,[EXCHRATE]
      ,[EXCHRATEMST]
      ,[LINENUM]
      ,[POSCURRENCY]
      ,[QTY]
      ,[RECEIPTID]
      ,[REPLICATED]
      ,[SHIFT]
      ,[SHIFTDATE]
      ,[STAFF]
      ,[STATEMENTCODE]
      ,[STORE]
      ,[TENDERTYPE]
      ,[TERMINAL]
      ,[TRANSACTIONID]
      ,[TRANSACTIONSTATUS]
      ,[TRANSDATE]
      ,[TRANSTIME]
      ,[DATAAREAID]
      ,[BUSINESSDATE]
    )
    SELECT
      [AMOUNTCUR]
      ,[AMOUNTMST]
      ,[AMOUNTTENDERED]
      ,[CARDID]
      ,@bi_channelId
      ,[CURRENCY]
      ,[EXCHRATE] * 100.00 -- ePOS behavior
      ,[EXCHRATEMST] * 100.00 -- ePOS behavior
      ,[LINENUM]
      ,[POSCURRENCY]
      ,[QTY]
      ,[RECEIPTID]
      ,[REPLICATED]
      ,[SHIFT]
      ,[SHIFTDATE]
      ,[STAFF]
      ,[STATEMENTCODE]
      ,[STORE]
      ,[TENDERTYPE]
      ,[TERMINAL]
      ,[TRANSACTIONID]
      ,[TRANSACTIONSTATUS]
      ,[TRANSDATE]
      ,[TRANSTIME]
      ,[DATAAREAID]
      ,@d_BusinessDate
    FROM @TVP_TenderDeclareTrans AS Source;


    SELECT @i_Error = @@ERROR;
    IF @i_Error <> 0
    BEGIN
        SET @i_ReturnCode = @i_Error;
        GOTO exit_label;
    END;

    IF @i_TransactionIsOurs = 1
    BEGIN
        COMMIT TRANSACTION;
        
        SET @i_Error = @@ERROR;
        IF @i_Error <> 0
        BEGIN
            SET @i_ReturnCode = @i_Error;
            GOTO exit_label;
        END;

        SET @i_TransactionIsOurs = 0;
    END;

exit_label:

    IF @i_TransactionIsOurs = 1
    BEGIN
        ROLLBACK TRANSACTION;
    END;

    RETURN @i_ReturnCode;
END;
GO
PRINT N'Altering [crt].[POPULATEPRODUCTASSORTMENTRULES]...';


GO
ALTER PROCEDURE [crt].[POPULATEPRODUCTASSORTMENTRULES]
AS
BEGIN

DECLARE @dt_StepStartDateTime DATETIME
DECLARE @dt_SprocStartDateTime DATETIME

SET @dt_StepStartDateTime = GETDATE()
SET @dt_SprocStartDateTime = @dt_StepStartDateTime

-- Creates the temporary table used to store the intermediate state of assortment rules
IF object_id(N'TempDb..#MERGEDASSORTMENTRULES') IS NULL BEGIN
    CREATE TABLE [#MERGEDASSORTMENTRULES]
    (
        ASSORTMENTID BIGINT NOT NULL,
        PRODUCTID BIGINT NOT NULL,
        VARIANTID BIGINT NOT NULL,
        LINETYPE INT NOT NULL,
        VALIDFROM DATE,
        VALIDTO DATE
    )
END

--This procedure will populate the temp table #MERGEDASSORTMENTRULES with the intermediate results
-- of the assortment calculation
EXEC [crt].POPULATEMERGEDASSORTMENTRULES;

-- PRINT 'Merging assortment date rules (ms): ' + CAST(DATEDIFF(ms, @dt_StepStartDateTime, GETDATE()) AS VARCHAR)
-- SET @dt_StepStartDateTime = GETDATE()

IF object_id(N'TempDb..#TMPASSORTMENTRESULT') IS NOT NULL BEGIN
    DROP TABLE #TMPASSORTMENTRESULT;
END;

WITH
    cte_MergedAssortmentRules AS
    (
        -- Merge all overlapping assortment rules.
        SELECT ASSORTMENTID, PRODUCTID, VARIANTID, LINETYPE, VALIDFROM, VALIDTO
        FROM #MERGEDASSORTMENTRULES ral
    ),

    cte_ExplicitlyExcludedProductsAndVariants AS
    (
        SELECT PRODUCTID, VARIANTID, VALIDFROM, VALIDTO
        FROM cte_MergedAssortmentRules
        WHERE LINETYPE = 0
    ),

    cte_Result AS
    (
        -- Retrieve implicitly included product variants for explicitly included product masters.
        SELECT
            ral.ASSORTMENTID AS ASSORTMENTID,
            pv.PRODUCTMASTER AS 'PRODUCTID',
            pv.RECID AS 'VARIANTID',
            dr.VALIDFROM,
            dr.VALIDTO
        FROM cte_MergedAssortmentRules ral
        INNER JOIN [ax].ECORESDISTINCTPRODUCTVARIANT pv ON pv.PRODUCTMASTER = ral.PRODUCTID -- Include variants only
        LEFT OUTER JOIN cte_ExplicitlyExcludedProductsAndVariants epv ON epv.PRODUCTID = ral.PRODUCTID AND (epv.VARIANTID = 0 OR epv.VARIANTID = pv.RECID)
            AND NOT (ral.VALIDFROM > epv.VALIDTO OR ral.VALIDTO < epv.VALIDFROM)
        CROSS APPLY [crt].GETINCLUDEDDATERANGES(ral.VALIDFROM, ral.VALIDTO, epv.VALIDFROM, epv.VALIDTO) dr
        WHERE ral.LINETYPE = 1 AND ral.VARIANTID = 0

        UNION ALL

        -- Retrieve explicitly included products and/or variants that have not been excluded.
        SELECT
            ral.ASSORTMENTID,
            ral.PRODUCTID,
            ral.VARIANTID,
            dr.VALIDFROM,
            dr.VALIDTO
        FROM cte_MergedAssortmentRules ral
        LEFT OUTER JOIN cte_ExplicitlyExcludedProductsAndVariants epv ON epv.PRODUCTID = ral.PRODUCTID AND (epv.VARIANTID = 0 OR epv.VARIANTID = ral.VARIANTID)
            AND NOT (ral.VALIDFROM > epv.VALIDTO OR ral.VALIDTO < epv.VALIDFROM)
        CROSS APPLY [crt].GETINCLUDEDDATERANGES(ral.VALIDFROM, ral.VALIDTO, epv.VALIDFROM, epv.VALIDTO) dr
        WHERE ral.LINETYPE = 1

        UNION

        -- Retrieve product masters that have been implicitly included by variant inclusions.
        SELECT
            ral.ASSORTMENTID AS ASSORTMENTID,
            ral.PRODUCTID AS 'PRODUCTID',
            0 AS 'VARIANTID',
            dr.VALIDFROM,
            dr.VALIDTO
        FROM cte_MergedAssortmentRules ral
        LEFT OUTER JOIN cte_ExplicitlyExcludedProductsAndVariants epv ON epv.PRODUCTID = ral.PRODUCTID AND (epv.VARIANTID = 0 OR epv.VARIANTID = ral.VARIANTID)
            AND NOT (ral.VALIDFROM > epv.VALIDTO OR ral.VALIDTO < epv.VALIDFROM)
        CROSS APPLY [crt].GETINCLUDEDDATERANGES(ral.VALIDFROM, ral.VALIDTO, epv.VALIDFROM, epv.VALIDTO) dr
        WHERE ral.LINETYPE = 1 AND ral.VARIANTID != 0
    )
    SELECT * INTO #TMPASSORTMENTRESULT FROM cte_Result

-- PRINT 'Merging assortment inclusion rules (ms): ' + CAST(DATEDIFF(ms, @dt_StepStartDateTime, GETDATE()) AS VARCHAR)
-- SET @dt_StepStartDateTime = GETDATE();

ALTER INDEX IX_LOCALPRODUCTASSORTMENTRULESVIEW
ON [crt].[LOCALPRODUCTASSORTMENTRULESVIEW] DISABLE;

DELETE FROM [crt].PRODUCTASSORTMENTRULES
INSERT INTO [crt].PRODUCTASSORTMENTRULES (ASSORTMENTID, PRODUCTID, VARIANTID, VALIDFROM, VALIDTO)
SELECT ASSORTMENTID, PRODUCTID, VARIANTID, VALIDFROM, VALIDTO FROM #TMPASSORTMENTRESULT;

ALTER INDEX IX_LOCALPRODUCTASSORTMENTRULESVIEW
ON [crt].[LOCALPRODUCTASSORTMENTRULESVIEW] REBUILD;

UPDATE STATISTICS [crt].PRODUCTASSORTMENTRULES;

-- PRINT 'Updating [crt].PRODUCTASSORTMENTRULES (ms): ' + CAST(DATEDIFF(ms, @dt_StepStartDateTime, GETDATE()) AS VARCHAR)
-- SET @dt_StepStartDateTime = GETDATE()

    -- Assortment V2 table
    TRUNCATE TABLE [crt].PRODUCTASSORTMENTRULES_V2;
    INSERT INTO [crt].PRODUCTASSORTMENTRULES_V2 (ASSORTMENTID, PRODUCTID, VALIDFROM, VALIDTO)
    SELECT ASSORTMENTID, CASE WHEN VARIANTID <> 0 THEN VARIANTID ELSE PRODUCTID END, VALIDFROM, VALIDTO FROM #TMPASSORTMENTRESULT;

    UPDATE STATISTICS [crt].PRODUCTASSORTMENTRULES_V2;

-- PRINT 'Updating [crt].PRODUCTASSORTMENTRULES_V2 (ms): ' + CAST(DATEDIFF(ms, @dt_StepStartDateTime, GETDATE()) AS VARCHAR)
-- PRINT 'Total time (ms): ' + CAST(DATEDIFF(ms, @dt_SprocStartDateTime, GETDATE()) AS VARCHAR)

END;
GO
PRINT N'Altering [crt].[SEARCHPRODUCTSBYCATEGORYID]...';


GO

-- DEAD CODE: Not deleted to prevent breaking backward compatibility.

ALTER PROCEDURE [crt].[SEARCHPRODUCTSBYCATEGORYID]
(
    @tvp_QueryResultSettings [crt].QUERYRESULTSETTINGSTABLETYPE READONLY,
    @bi_ChannelId            BIGINT,
    @bi_CatalogId            BIGINT,
    @nvc_Locale              NVARCHAR(7),
    @dt_ChannelDate          DATETIME,
    @bi_CategoryId           BIGINT
)
AS
BEGIN
    DECLARE @tvp_SubCategoryIds [crt].[RECORDIDTABLETYPE]

    ;WITH CategoryHierarchyTree (RECID)
    AS
    (
        SELECT [cchv].RECID
        FROM [crt].CHANNELCATEGORYHIERARCHYVIEW cchv
        WHERE [cchv].RECID = @bi_CategoryId AND [cchv].CHANNELID = @bi_ChannelId

        UNION ALL

        SELECT [cchv].RECID
        FROM [crt].CHANNELCATEGORYHIERARCHYVIEW cchv
        INNER JOIN CategoryHierarchyTree ct ON [cchv].PARENTCATEGORY = [ct].RECID AND [cchv].CHANNELID = @bi_ChannelId
    )

    INSERT INTO @tvp_SubCategoryIds(RECID)
    SELECT [ct].RECID FROM CategoryHierarchyTree ct
    INNER JOIN [ax].ECORESCATEGORY erc ON [erc].RECID = [ct].RECID

    SELECT DISTINCT
        [par].PRODUCTID AS RECID,
        [it].ITEMID AS ITEMID,
        COALESCE([erpt_locale].NAME, [erpt_p1].NAME, [erpt_p2].NAME) AS NAME,
        [itm].PRICE,
        [gpml].URI AS PRIMARYIMAGE
    FROM [crt].LOCALPRODUCTASSORTMENTRULESVIEW par WITH (NOEXPAND)
    INNER JOIN [crt].PRODUCTCATEGORYRULESVIEW pcrv ON [par].CHANNELID = [pcrv].CHANNELID AND [par].PRODUCTID = [pcrv].PRODUCTID AND [par].VARIANTID = 0 AND @dt_ChannelDate BETWEEN COALESCE([pcrv].VALIDFROM, DATEADD(d, -10, GETDATE())) AND COALESCE([pcrv].VALIDTO, DATEADD(d, 10, GETDATE()))
    INNER JOIN @tvp_SubCategoryIds cids ON [cids].RECID = [pcrv].CATEGORYID
    INNER JOIN [ax].RETAILCHANNELTABLE rct ON [rct].RECID = @bi_ChannelId
    INNER JOIN [ax].INVENTTABLE it ON [it].PRODUCT = [par].PRODUCTID AND [it].DATAAREAID = [rct].INVENTLOCATIONDATAAREAID
    INNER JOIN [ax].ECORESPRODUCT erp ON [erp].RECID = [par].PRODUCTID
    INNER JOIN [crt].CHANNELLANGUAGESVIEW clv ON [clv].CHANNEL = [par].CHANNELID
    LEFT OUTER JOIN [ax].ECORESPRODUCTTRANSLATION erpt_locale ON [erpt_locale].PRODUCT = [par].PRODUCTID AND [erpt_locale].LANGUAGEID = @nvc_Locale
    LEFT OUTER JOIN [ax].ECORESPRODUCTTRANSLATION erpt_p1 ON [erpt_p1].PRODUCT = [par].PRODUCTID AND [clv].PRIORITY = 1 AND [erpt_p1].LANGUAGEID = [clv].LANGUAGEID
    LEFT OUTER JOIN [ax].ECORESPRODUCTTRANSLATION erpt_p2 ON [erpt_p2].PRODUCT = [par].PRODUCTID AND [clv].PRIORITY = 2 AND [erpt_p2].LANGUAGEID = [clv].LANGUAGEID
    OUTER APPLY (SELECT TOP 1 REPLACE(REPLACE(URI, '{LANGUAGEID}', @nvc_Locale), '{PRODUCTNUMBER}', (SELECT [crt].REPLACEUNWANTEDCHARACTERS(erp.DISPLAYPRODUCTNUMBER))) AS URI FROM [crt].GETMEDIALOCATIONBYPRODUCTID(@bi_ChannelId, @bi_CatalogId, [par].PRODUCTID, @nvc_Locale) ORDER BY PRIORITY, ISDEFAULT, URI) gpml
    LEFT OUTER JOIN [ax].INVENTTABLEMODULE itm ON [itm].ITEMID = [it].ITEMID AND [itm].DATAAREAID = [it].DATAAREAID AND [itm].MODULETYPE = 2  -- Sales
    WHERE [par].CHANNELID = @bi_ChannelId AND @dt_ChannelDate BETWEEN [par].VALIDFROM AND [par].VALIDTO
        AND (
            @bi_CatalogId = 0 OR
            EXISTS
            (
                SELECT 1 FROM [crt].PRODUCTCATALOGRULESVIEW pcr
                WHERE [pcr].CHANNELID = [par].CHANNELID AND [pcr].CATALOGID = @bi_CatalogId AND [pcr].PRODUCTID = [par].PRODUCTID AND @dt_ChannelDate BETWEEN [pcr].VALIDFROM AND [pcr].VALIDTO
            )
        )
    ORDER BY 3
    OFFSET (SELECT [SKIP] FROM @tvp_QueryResultSettings) ROWS
    FETCH NEXT (SELECT [TOP] FROM @tvp_QueryResultSettings) ROWS ONLY

END
GO
PRINT N'Altering [crt].[VERIFYUSERLOCKOUTPOLICY]...';


GO

ALTER PROCEDURE [crt].[VERIFYUSERLOCKOUTPOLICY]
    @bi_ChannelId BIGINT
    ,@nvc_StaffId   NVARCHAR(25)
    ,@i_TimeToAccountUnlockInSeconds INT OUTPUT
AS
BEGIN
    SET NOCOUNT ON	
    DECLARE @i_Error INT;
    DECLARE @i_MaxNumberOfTries INT;
    DECLARE @i_TimeSpanInMinutes INT;
    DECLARE @i_LockoutDurationInMinutes INT;
    DECLARE @Result TABLE(AUTHENTICATIONSTATUS INT, CREATEDDATETIME DATETIME);
    DECLARE @dt_OldestLoginFailureTime DATETIME;
    DECLARE @dt_LatestLoginFailureTime DATETIME;
    DECLARE @nvc_DataAreaId NVARCHAR(10);
    DECLARE @dt_UtcDate DATETIME;
    DECLARE @dt_PasswordLastChangedDateTime DATETIME;
    DECLARE @i_PasswordLastUpdatedOperation INT;
    SET @i_TimeToAccountUnlockInSeconds = 0;
    SET @dt_UtcDate = GETUTCDATE();

    IF @bi_ChannelId = 0
    BEGIN
        -- This implementation gets the first legal entity that this worker is assigned to. An
        -- alternative implementation would find the legal entity with the strictest password policy.
        SET  @nvc_DataAreaId =  (SELECT TOP 1 rct.INVENTLOCATIONDATAAREAID
                                    FROM [ax].[DIRADDRESSBOOKPARTY] dabp  
                                    INNER JOIN [ax].[HCMWORKER] hw ON dabp.PARTY = hw.PERSON  
                                    INNER JOIN [ax].[RETAILSTOREADDRESSBOOK] rsab on dabp.ADDRESSBOOK = rsab.ADDRESSBOOK
                                    INNER JOIN [ax].[RETAILCHANNELTABLE] rct ON rsab.STORERECID = rct.RECID
                                    WHERE rsab.ADDRESSBOOKTYPE = 1 -- 1 = Employee address book
                                    AND hw.PERSONNELNUMBER = @nvc_StaffId)
    END
    ELSE
    BEGIN 
        SET @nvc_DataAreaId = (SELECT INVENTLOCATIONDATAAREAID from [ax].RETAILCHANNELTABLE
                                    WHERE RECID = @bi_ChannelId)
    END
    
    SELECT @i_MaxNumberOfTries = LOCKOUTTHRESHOLD,
    @i_TimeSpanInMinutes = LOGINCOUNTERRESETDURATION,
    @i_LockoutDurationInMinutes = LOCKOUTDURATION
    FROM [ax].RETAILPARAMETERS
    WHERE DATAAREAID = @nvc_DataAreaId;

    IF (ISNULL(@i_MaxNumberOfTries, 0) = 0 OR ISNULL(@i_TimeSpanInMinutes, 0) = 0 OR ISNULL(@i_LockoutDurationInMinutes, 0) = 0)
    BEGIN
        RETURN;
    END    

    --Get the PasswordLastChangedDateTime and PasswordLastUpdateOperation from the RetailStaffTable
    SELECT @dt_PasswordLastChangedDateTime = PASSWORDLASTCHANGEDDATETIME,
    @i_PasswordLastUpdatedOperation = PASSWORDLASTUPDATEDOPERATION
    FROM [ax].RETAILSTAFFTABLE
    WHERE STAFFID = @nvc_StaffId;   
    
    --Get the most recent authentication requests of type Success or InvalidPasswordFailure.We only get the records where the CreatedDateTime is greater than the PasswordLastChangedDateTime.
    INSERT INTO @Result
    SELECT TOP (@i_MaxNumberOfTries) AUTHENTICATIONSTATUS, CREATEDDATETIME FROM [ax].RETAILAUTHENTICATIONLOG
    WHERE STAFFID = @nvc_StaffId AND CREATEDDATETIME >= @dt_PasswordLastChangedDateTime AND (AUTHENTICATIONSTATUS = 0 OR AUTHENTICATIONSTATUS = 1) -- 0 = Success, 1 = InvalidPasswordFailure
    ORDER BY CREATEDDATETIME DESC; 
    
    SET @dt_OldestLoginFailureTime = (SELECT TOP 1 CREATEDDATETIME FROM @Result ORDER BY CREATEDDATETIME ASC);
    SET @dt_LatestLoginFailureTime = (SELECT TOP 1 CREATEDDATETIME FROM @Result ORDER BY CREATEDDATETIME DESC);
    
    -- Return if the number of consecutive logon attempts with invalid password is less than the number of retries allowed, or the password was reset after
    -- the user was locked out.
    IF (((SELECT COUNT(*) FROM @Result) < @i_MaxNumberOfTries) 
    OR ((SELECT COUNT(*) FROM @Result WHERE AUTHENTICATIONSTATUS = 0) <> 0)
    OR (@dt_PasswordLastChangedDateTime > @dt_LatestLoginFailureTime AND @i_PasswordLastUpdatedOperation = 2)) -- 2 = ResetPassword
    BEGIN
        RETURN;
    END
    
    IF (DATEDIFF(SECOND, @dt_OldestLoginFailureTime, @dt_LatestLoginFailureTime) <= @i_TimeSpanInMinutes * 60)
    BEGIN
        IF (DATEDIFF(SECOND, @dt_LatestLoginFailureTime, @dt_UtcDate) <= @i_LockoutDurationInMinutes * 60)
        BEGIN
            --Return time duration (in minutes) after which the user account will be unblocked.
            SET @i_TimeToAccountUnlockInSeconds = @i_LockoutDurationInMinutes * 60 - DATEDIFF(SECOND, @dt_LatestLoginFailureTime, @dt_UtcDate);
        END;
    END;
END;
GO
PRINT N'Creating [crt].[INSERTSHIFTACCOUNTLINE]...';


GO

CREATE PROCEDURE [crt].[INSERTSHIFTACCOUNTLINE]
    @TVP_SHIFTACCOUNTLINETABLETYPE       [crt].[SHIFTACCOUNTLINETYPE]    READONLY
AS
BEGIN

    SET NOCOUNT ON;

    DECLARE @i_ReturnCode               INT;
    DECLARE @i_TransactionIsOurs        INT;
    DECLARE @i_Error                    INT;

    -- initializes the return code and assume the transaction is not ours by default
    SET @i_ReturnCode = 0;
    SET @i_TransactionIsOurs = 0;

    IF @@TRANCOUNT = 0
    BEGIN
        BEGIN TRANSACTION;

        SELECT @i_Error = @@ERROR;
        IF @i_Error <> 0
        BEGIN
            SET @i_ReturnCode = @i_Error;
            GOTO exit_label;
        END;

        SET @i_TransactionIsOurs = 1;
    END;

    -- Perform Insert
    INSERT INTO [ax].[RETAILPOSBATCHACCOUNTTRANS]
    (
        [BATCHID],
        [CHANNEL],
        [STOREID],
        [TERMINALID],
		[ACCOUNTNUM],
		[ACCOUNTTYPE],
		[AMOUNT],
		[DATAAREAID]
    )
    SELECT
        [SHIFTID],
        [CHANNEL],
        [STOREID],
        [TERMINALID],
		[INCOMEEXEPENSEACCOUNT],
		[ACCOUNTTYPE],
		[AMOUNT],
		[DATAAREAID]
    FROM @TVP_SHIFTACCOUNTLINETABLETYPE;


    SELECT @i_Error = @@ERROR;
    IF @i_Error <> 0
    BEGIN
        SET @i_ReturnCode = @i_Error;
        GOTO exit_label;
    END;

    IF @i_TransactionIsOurs = 1
    BEGIN
        COMMIT TRANSACTION;

        SET @i_Error = @@ERROR;
        IF @i_Error <> 0
        BEGIN
            SET @i_ReturnCode = @i_Error;
            GOTO exit_label;
        END;

        SET @i_TransactionIsOurs = 0;
    END;

exit_label:

    IF @i_TransactionIsOurs = 1
    BEGIN
        ROLLBACK TRANSACTION;
    END;

    RETURN @i_ReturnCode;
END;
GO
PRINT N'Creating [crt].[GETCUSTOMERBYACCOUNTNUMBER]...';


GO
CREATE PROCEDURE [crt].[GETCUSTOMERBYACCOUNTNUMBER]
		@nvc_DataAreaId NVARCHAR(4),

		-- CustTable.AccountNumber is NVARCHAR(20) but
		-- RETAILASYNCCUSTOMER.CustAccountAsync is NVARCHAR(38), so specifying the max of those 2.
		@nvc_CustomerAccount NVARCHAR(38)
AS

DECLARE @tbl_FoundCustomer TABLE
	(
	    ACCOUNTNUMBER NVARCHAR(38),
        RECID BIGINT,
		CREATEDDATETIME DATETIME,
        PARTY BIGINT,
        NAME NVARCHAR(100),
        PERSONNAMEID BIGINT,
        FIRSTNAME NVARCHAR(100),
        MIDDLENAME NVARCHAR(25),
        LASTNAME NVARCHAR(100),
        PARTYNUMBER NVARCHAR(40),
        CUSTOMERTYPE INT,
        PHONE NVARCHAR(255),
        PHONEEXT NVARCHAR(10),
        PHONERECORDID BIGINT,
        EMAIL NVARCHAR(255),
        EMAILRECORDID BIGINT,
        URL NVARCHAR(255),
        URLRECORDID BIGINT,
        CELLPHONE NVARCHAR(255),
        CELLPHONERECORDID BIGINT,
        RECEIPTEMAIL NVARCHAR(80),
        LANGUAGE NVARCHAR(7),
        DATAAREAID NVARCHAR(4),
		RECEIPTSETTINGS INT, 
        CURRENCY NVARCHAR(3),
        INVOICEACCOUNT NVARCHAR(20),
        CREDITMAX NUMERIC (32, 16),
        MARKUPGROUP NVARCHAR(10),
        PRICEGROUP NVARCHAR(10),
        CUSTGROUP NVARCHAR(10),
        BLOCKED INT,
        ORGID NVARCHAR(10),
        MULTILINEDISC NVARCHAR(10),
        USEPURCHREQUEST INT,
        LINEDISC NVARCHAR(10),
        INCLTAX INT,
        ENDDISC NVARCHAR(10),
        TAXGROUP NVARCHAR(10),
        CREDITRATING NVARCHAR(10),
        TAXLICENSENUM NVARCHAR(20),
        VATNUM NVARCHAR(20),
		OFFLINEIMAGE NVARCHAR(MAX),
        IDENTIFICATIONNUMBER NVARCHAR(50),
		[IMAGE] NVARCHAR(255),
		ISASYNCCUSTOMER INT
	)
		
	INSERT INTO @tbl_FoundCustomer
	
	SELECT
        ct.ACCOUNTNUM AS ACCOUNTNUMBER,
        ct.RECID,
        ct.CREATEDDATETIME,
        dpt.RECID AS PARTY,
        dpt.NAME,
        dpn.RECID AS PERSONNAMEID,
        dpn.FIRSTNAME,
        dpn.MIDDLENAME,
        dpn.LASTNAME,
        dpt.PARTYNUMBER,
        CASE
            WHEN dpn.RECID IS NULL THEN 2 -- Organization
            ELSE 1 -- Customer
        END AS CUSTOMERTYPE,
        '' PHONE,
        '' PHONEEXT,
        0 AS PHONERECORDID,
        '' AS EMAIL,
        0 AS EMAILRECORDID,
        '' AS URL,
        0 AS URLRECORDID,
        '' AS CELLPHONE,
        0 AS CELLPHONERECORDID,
        rct.RECEIPTEMAIL RECEIPTEMAIL,
        dpt.LANGUAGEID AS LANGUAGE,
        ct.DATAAREAID,
        rct.RECEIPTOPTION as RECEIPTSETTINGS,
        ct.CURRENCY,
        ct.INVOICEACCOUNT,
        ct.CREDITMAX,
        ct.MARKUPGROUP,
        ct.PRICEGROUP,
        ct.CUSTGROUP,
        ct.BLOCKED,
        ct.ORGID,
        ct.MULTILINEDISC,
        ct.USEPURCHREQUEST,
        ct.LINEDISC,
        ct.INCLTAX,
        ct.ENDDISC,
        ct.TAXGROUP,
        ct.CREDITRATING,
        ct.TAXLICENSENUM,
        ct.VATNUM,         
        CAST(N'' AS XML).value('xs:base64Binary(xs:hexBinary(sql:column("[rmr].[RESOURCEBLOB]")))', 'NVARCHAR(MAX)') AS OFFLINEIMAGE,
        ct.IDENTIFICATIONNUMBER,
        rmr.RESOURCEURL AS IMAGE,
        0 AS ISASYNCCUSTOMER
/* BEGIN SDKSAMPLE_CUSTOMERPREFERENCES (do not remove this)
              , isnull(rcp.EMAILOPTIN, 0) as EMAILOPTIN
END SDKSAMPLE_CUSTOMERPREFERENCES (do not remove this) */
    FROM [ax].CUSTTABLE ct
    JOIN [ax].DIRPARTYTABLE dpt ON ct.PARTY = dpt.RECID AND ct.ACCOUNTNUM = @nvc_CustomerAccount AND ct.DATAAREAID = @nvc_DataAreaId
    LEFT OUTER JOIN ax.RETAILCUSTTABLE rct ON ct.ACCOUNTNUM = rct.ACCOUNTNUM AND ct.DATAAREAID = rct.DATAAREAID
    LEFT OUTER JOIN ax.DIRPERSONNAME dpn ON dpt.RECID = dpn.PERSON AND (GETUTCDATE() BETWEEN dpn.VALIDFROM AND dpn.VALIDTO)
	
	LEFT OUTER JOIN [ax].RETAILMEDIAANDMASTERENTITYRELATION rmamer ON ct.RECID = rmamer.MASTERENTITYRECID 
               AND rmamer.ISDEFAULT = 1 AND rmamer.MASTERENTITYTYPE = 16  -- MasterEntityType = Customer.
    LEFT OUTER JOIN [ax].RETAILMEDIARESOURCE rmr ON rmamer.MEDIARESOURCEID = rmr.RESOURCEID


/* BEGIN SDKSAMPLE_CUSTOMERPREFERENCES (do not remove this)
    LEFT OUTER JOIN [ax].RETAILCUSTPREFERENCE rcp ON ct.ACCOUNTNUM = rcp.ACCOUNTNUM
                   AND ct.DATAAREAID = rcp.DATAAREAID
END SDKSAMPLE_CUSTOMERPREFERENCES (do not remove this) */

   IF (SELECT COUNT(*) FROM @tbl_FoundCustomer) > 0
		BEGIN

			DECLARE @bi_Party BIGINT;

			SELECT @bi_Party = Party
			FROM @tbl_FoundCustomer

			DECLARE @nvc_PHONE NVARCHAR(255);
			DECLARE @nvc_PHONEEXT NVARCHAR(10);
			DECLARE @bi_PHONERECORDID BIGINT;
			DECLARE @nvc_EMAIL NVARCHAR(255);
			DECLARE @bi_EMAILRECORDID BIGINT;
			DECLARE @nvc_URL NVARCHAR(255);
			DECLARE @bi_URLRECORDID BIGINT;
			DECLARE @nvc_CELLPHONE NVARCHAR(255);
			DECLARE @bi_CELLPHONERECORDID BIGINT;


			SELECT @nvc_PHONE = LOCATOR, @nvc_PHONEEXT = LOCATOREXTENSION, @bi_PHONERECORDID = RECORDID
			FROM [crt].[GETELECTRONICADDRESS](1, 1, 0, @bi_Party, NULL);

			SELECT @nvc_EMAIL = LOCATOR, @bi_EMAILRECORDID = RECORDID
			FROM [crt].[GETELECTRONICADDRESS](2, 1, 0, @bi_Party, NULL);

			SELECT @nvc_URL = LOCATOR, @bi_URLRECORDID = RECORDID
			FROM [crt].[GETELECTRONICADDRESS](3, 1, 0, @bi_Party, NULL);

			SELECT @nvc_CELLPHONE = LOCATOR, @bi_CELLPHONERECORDID = RECORDID
			FROM [crt].[GETELECTRONICADDRESS](1, 0, NULL, @bi_Party, 1);

			UPDATE @tbl_FoundCustomer
			SET PHONE = @nvc_PHONE, PHONEEXT = @nvc_PHONEEXT, PHONERECORDID = @bi_PHONERECORDID,
				EMAIL = @nvc_EMAIL, EMAILRECORDID = @bi_EMAILRECORDID,
				URL = @nvc_URL, URLRECORDID = @bi_URLRECORDID,
				CELLPHONE = @nvc_CELLPHONE, CELLPHONERECORDID = @bi_CELLPHONERECORDID
	   END
   ELSE
	   BEGIN
		   INSERT INTO @tbl_FoundCustomer
		   SELECT
				rac.CUSTACCOUNTASYNC AS ACCOUNTNUMBER,
				0 AS RECID,
				0 AS CREATEDDATETIME,
				0 AS  PARTY,
				rac.CUSTNAME AS NAME,
				0 AS PERSONNAMEID,
				rac.FIRSTNAME,
				rac.MIDDLENAME,
				rac.LASTNAME,
				'' AS PARTYNUMBER,
				rac.RELATIONSHIPTYPE AS CUSTOMERTYPE,
				rac.PHONE,
				rac.PHONEEXTENSION AS PHONEEXT,
				'' AS PHONERECORDID,
				rac.EMAIL,
				null AS EMAILRECORDID,
				rac.URL,
				'' AS URLRECORDID,
				rac.CELLULARPHONE AS CELLPHONE,
				'' AS CELLPHONERECORDID,
				rac.RECEIPTEMAIL AS  RECEIPTEMAIL,
				rac.LANGUAGEID AS LANGUAGE,
				rac.DATAAREAID,
				rac.RECEIPTOPTION AS RECEIPTSETTINGS,
				rac.CURRENCY,
				rac.INVOICEACCOUNT,
				rac.CREDITMAX,
				'' AS MARKUPGROUP,
				rac.PRICEGROUP,
				rac.CUSTGROUP,
				rac.BLOCKED,
				rac.ORGANIZATIONID AS ORGID,
				rac.MULTILINEDISC AS MULTILINEDISC,
				rac.USEPURCHREQUEST,
				rac.LINEDISC,
				0 AS INCLTAX,
				rac.ENDDISC,
				rac.TAXGROUP,
				'' AS CREDITRATING,
				'' AS TAXLICENSENUM,
				rac.VATNUM,         
				null AS OFFLINEIMAGE,
				rac.IDENTIFICATIONNUMBER,
				null AS IMAGE,
				1 AS ISASYNCCUSTOMER
		   FROM [ax].RETAILASYNCCUSTOMER rac
		   WHERE rac.CUSTACCOUNTASYNC = @nvc_CustomerAccount
	   END

   SELECT 
		ACCOUNTNUMBER,
        RECID,
		CREATEDDATETIME,
        PARTY,
        NAME,
        PERSONNAMEID,
        FIRSTNAME,
        MIDDLENAME,
        LASTNAME,
        PARTYNUMBER,
        CUSTOMERTYPE,
        PHONE,
        PHONEEXT,
        PHONERECORDID,
        EMAIL,
        EMAILRECORDID,
        URL,
        URLRECORDID,
        CELLPHONE,
        CELLPHONERECORDID,
        RECEIPTEMAIL,
        [LANGUAGE],
        DATAAREAID,
		RECEIPTSETTINGS, 
        CURRENCY,
        INVOICEACCOUNT,
        CREDITMAX,
        MARKUPGROUP,
        PRICEGROUP,
        CUSTGROUP,
        BLOCKED,
        ORGID,
        MULTILINEDISC,
        USEPURCHREQUEST,
        LINEDISC,
        INCLTAX,
        ENDDISC,
        TAXGROUP,
        CREDITRATING,
        TAXLICENSENUM,
        VATNUM,
		OFFLINEIMAGE,
        IDENTIFICATIONNUMBER,
		[IMAGE],
		ISASYNCCUSTOMER
   FROM @tbl_FoundCustomer
GO
PRINT N'Creating [crt].[GETDEVICECONFIGURATION]...';


GO
CREATE PROCEDURE [crt].[GETDEVICECONFIGURATION]
    @tvp_QueryResultSettings [crt].[QUERYRESULTSETTINGSTABLETYPE] READONLY,
    @bi_ChannelId           BIGINT, -- The unique channel identifier (required).
    @nvc_TerminalId         NVARCHAR(10), -- The terminal identifier (required).
    @b_IncludeImages        BIT = 1 -- A value indicating whether to retrieve images.
AS
BEGIN

/*  // data level map for device configuration:
    //
    // data level             |   content
    // =======================|================================================================
    // device config (header) |   register info, hardware profile info, visual profile info etc.
    // drawers                |   + drawer name, IP, port
    // pinters                |   + printer name, IP, port
    // pinpad                 |   + pinpad name, IP, port
    // =======================|================================================================
*/

    SET NOCOUNT ON
    DECLARE @i_ReturnCode               INT;

    -- initializes the return code; we'll return the number of data sets as the return code.
    SET @i_ReturnCode = 0;

    -- Select device configuration (header)
    SELECT
        AGGREGATEITEMS,
        AGGREGATEITEMSFORPRINTING,
        AGGREGATEPAYMENTS,
        AUDITENABLED,
        NFCEVOIDED,
        NFCECONTINGENCYMNODENABLED,
        CREATEASYNCCUSTOMERS,
        CREATEOFFLINECUSTOMERORDERS,
        DAYSTRANSACTIONSEXISTS,
        DISCOUNTATTOTAL,
        DISPLAYSECONDARYTOTALCURRENCY,
        ENDOFTRANSACTION,
        ITEMNOTONFILE,
        LIMITSTAFFLISTTOSTORE,
        LINEITEMTAXCHANGE,
        PRODUCTDISCOUNT,
        MARKUP,
        MAXIMUMPRICE,
        MAXIMUMQTY,
        MINIMUMPASSWORDLENGTH,
        MUSTKEYINPRICEIFZERO,
        FUNCTIONALITYPROFILEDESCRIPTION,
        RETURNPRODUCT,
        OPENDRAWER,
        OVERRIDEPRICE,
        PRINTXREPORTONTERMINAL,
        PROFILEID,
        REFUNDSALE,
        SALESPERSON,
        SEARCHCUSTOMERSINAX,
        SECONDARYTOTALCURRENCY,
        SERIALNUMBER,
        SHOWSTAFFLISTATLOGON,
        STAFFBARCODELOGON,
        STAFFBARCODELOGONREQUIRESPASSWORD,
        STAFFCARDLOGON,
        STAFFCARDLOGONREQUIRESPASSWORD,
        STARTOFTRANSACTION,
        TAENABLEREGISTRATION,
        TENDERDECLARATION,
        TRANSACTIONTAXCHANGE,
        VOIDISPRESSED,
        VOIDPAYMENT,
        VOIDTRANSACTION,
        INCLUDEKITCOMPONENTS,
        MAXTRANSACTIONSEARCHRESULTS,
        REQUIREAMOUNTDECLARATION,
        DECIMALNOTREQUIREDFORMINORCURRENCYUNIT,
        MANUALCALCULATEDISCOUNTS,
        CULTURENAME,
        HIDETRAININGMODE,
        PHONE,
        STATEMENTMETHOD,
        CHANNELID,
        STORENUMBER,
        TAXGROUP,
        TAXIDENTIFICATIONNUMBER,
        TAXOVERRIDEGROUP,
        TENDERDECLARATIONCALCULATION,
        USECUSTOMERBASEDTAX,
        USEDESTINATIONBASEDTAX,
        AUTOLOGOFFTIMEOUT,
        CREATERECORDING,
        CUSTOMERDISPLAYTEXT1,
        CUSTOMERDISPLAYTEXT2,
        EFTSTORERECID,
        EFTTERMINALID,
        EXITAFTEREACHTRANSACTION,
        HARDWAREPROFILE,
        LOCATION,
        TERMINALDESCRIPTION,
        OPENDRAWERATLILO,
        PLAYBACKRECORDING,
        PRINTVATREFUNDCHECKS,
        SELECTHARDWARESTATIONONTENDERING,
        STANDALONE,
        TERMINALID,
        TERMINALSTATEMENT,
        COLOR,
        POSSKINNAME,
        FONTSCHEME,
        IIF (@b_IncludeImages = 1, LOGONBACKGROUNDPICTURE, null) AS LOGONBACKGROUNDPICTURE,
        IIF (@b_IncludeImages = 1, LOGONBACKGROUNDPICTUREPORTRAIT, null) AS LOGONBACKGROUNDPICTUREPORTRAIT,
        IIF (@b_IncludeImages = 1, BACKGROUNDPICTURE, null) AS BACKGROUNDPICTURE,
        CURRENCY,
        INVENTLOCATION,
        STATEMENTPOSTINGASBUSINESSDAY,
        STATEMENTCALCULATIONBATCHENDTIMEINSECONDS,
        OFFLINEPROFILE,
        CHECKNEWDBINTERVAL,
        TRXUPLOADINTERVAL,
        RECONNECTINTERVAL,
        OFFLINETIMEOUT
    FROM [crt].DEVICECONFIGURATIONSVIEW
        WHERE CHANNELID = @bi_ChannelId
        AND TERMINALID = @nvc_TerminalId;

    SET @i_ReturnCode = @i_ReturnCode + 1;

    -- Select drawer configuration
    SELECT 
        rhc.RECID,
        rhp.DRAWERDEVICENAME as 'DEVICENAME',
        rhc.DRAWERIP as 'IPADDRESS',
        rhc.DRAWERPORT as 'PORT',
        rhc.TERMINALID
    FROM [AX].[RETAILHARDWARECONFIGURATION] rhc
        INNER JOIN [AX].[RETAILTERMINALTABLE] rt ON rt.TERMINALID = rhc.TERMINALID
        INNER JOIN [AX].[RETAILHARDWAREPROFILE] rhp ON rt.HARDWAREPROFILE = rhp.PROFILEID
        WHERE rhc.TERMINALID = @nvc_TerminalId
        AND rhp.DRAWER = 4 -- Network
    UNION ALL
    SELECT
        rhc.RECID,
        rhp.DRAWER2DEVICENAME as 'DEVICENAME',
        rhc.DRAWER2IP as 'IPADDRESS',
        rhc.DRAWER2PORT as 'PORT',
        rhc.TERMINALID
    FROM [AX].[RETAILHARDWARECONFIGURATION] rhc
        INNER JOIN [AX].[RETAILTERMINALTABLE] rt ON rt.TERMINALID = rhc.TERMINALID
        INNER JOIN [AX].[RETAILHARDWAREPROFILE] rhp ON rt.HARDWAREPROFILE = rhp.PROFILEID
        WHERE rhc.TERMINALID = @nvc_TerminalId
        AND rhp.DRAWER2 = 4; -- Network

    SET @i_ReturnCode = @i_ReturnCode + 1;

    -- Select printer configuration
    SELECT 
        rhc.RECID,
        rhp.PRINTERDEVICENAME as 'DEVICENAME',
        rhc.PRINTERIP as 'IPADDRESS',
        rhc.PRINTERPORT as 'PORT',
        rhc.TERMINALID
    FROM [AX].[RETAILHARDWARECONFIGURATION] rhc
        INNER JOIN [AX].[RETAILTERMINALTABLE] rt ON rt.TERMINALID = rhc.TERMINALID
        INNER JOIN [AX].[RETAILHARDWAREPROFILE] rhp ON rt.HARDWAREPROFILE = rhp.PROFILEID
        WHERE rhc.TERMINALID = @nvc_TerminalId
        AND rhp.PRINTER = 4 -- Network
    UNION ALL
    SELECT
        rhc.RECID,
        rhp.PRINTER2DEVICENAME as 'DEVICENAME',
        rhc.PRINTER2IP as 'IPADDRESS',
        rhc.PRINTER2PORT as 'PORT',
        rhc.TERMINALID
    FROM [AX].[RETAILHARDWARECONFIGURATION] rhc
        INNER JOIN [AX].[RETAILTERMINALTABLE] rt ON rt.TERMINALID = rhc.TERMINALID
        INNER JOIN [AX].[RETAILHARDWAREPROFILE] rhp ON rt.HARDWAREPROFILE = rhp.PROFILEID
        WHERE rhc.TERMINALID = @nvc_TerminalId
        AND rhp.PRINTER = 4; -- Network

    SET @i_ReturnCode = @i_ReturnCode + 1;

    -- Select pinpad configuration
    SELECT 
        rhc.RECID,
        rhp.PINPADDEVICENAME as 'DEVICENAME',
        rhc.PINPADIP as 'IPADDRESS',
        rhc.PINPADPORT as 'PORT',
        rhc.TERMINALID
    FROM [AX].[RETAILHARDWARECONFIGURATION] rhc
        INNER JOIN [AX].[RETAILTERMINALTABLE] rt ON rt.TERMINALID = rhc.TERMINALID
        INNER JOIN [AX].[RETAILHARDWAREPROFILE] rhp ON rt.HARDWAREPROFILE = rhp.PROFILEID
        WHERE rhc.TERMINALID = @nvc_TerminalId
        AND rhp.PINPAD = 3; -- Network

    SET @i_ReturnCode = @i_ReturnCode + 1;
    RETURN @i_ReturnCode;
END;
GO
PRINT N'Creating [crt].[GETHARDWARESTATIONS]...';


GO
CREATE PROCEDURE [crt].[GETHARDWARESTATIONS]
    @tvp_QueryResultSettings [crt].[QUERYRESULTSETTINGSTABLETYPE] READONLY,
    @bi_ChannelId           BIGINT -- The unique channel identifier (required).
AS
BEGIN

/*  // data level map for hardware station:
    //
    // data level           |   content
    // =====================|================================================================
    // hardware station     |   hardware profile ID, name, host name, port, EFT terminal ID
    // drawers              |   + drawer name, IP, port
    // pinters              |   + printer name, IP, port
    // pinpad               |   + pinpad name, IP, port
    // =====================|================================================================
*/

    SET NOCOUNT ON
    DECLARE @i_ReturnCode               INT;

    -- initializes the return code; we'll return the number of data sets as the return code.
    SET @i_ReturnCode = 0;

    -- Select hardware station (header)
    SELECT
        HARDWARESTATIONID,
        HARDWAREPROFILEID,
        HARDWARESTATIONNAME,
        HARDWARESTATIONDESCRIPTION,
        HARDWARESTATIONURL,
        EFTTERMINALID,
        HOSTNAME,
        RECID
    FROM [crt].[GETHARDWARESTATIONSVIEW]
        WHERE STORE = @bi_ChannelId
        ORDER BY RECID
        OFFSET (SELECT [SKIP] FROM @tvp_QueryResultSettings) ROWS
        FETCH NEXT (SELECT [TOP] FROM @tvp_QueryResultSettings) ROWS ONLY;

    SET @i_ReturnCode = @i_ReturnCode + 1;

    -- Select drawer configuration
    SELECT 
        rhc.RECID,
        rhp.DRAWERDEVICENAME as 'DEVICENAME',
        rhc.DRAWERIP as 'IPADDRESS',
        rhc.DRAWERPORT as 'PORT',
        rhc.STOREHARDWARESTATION as 'HARDWARESTATIONRECORDID'
    FROM [AX].[RETAILHARDWARECONFIGURATION] rhc
        INNER JOIN [AX].[RETAILSTOREHARDWARESTATIONTABLE] rshs ON rhc.STOREHARDWARESTATION = rshs.RECID
        INNER JOIN [AX].[RETAILHARDWARESTATION] rhs ON rshs.HARDWARESTATIONID = rhs.HARDWARESTATIONID
        INNER JOIN [AX].[RETAILHARDWAREPROFILE] rhp ON rhs.HARDWAREPROFILEID = rhp.PROFILEID
        WHERE rshs.STORE = @bi_ChannelId
        AND rhp.DRAWER = 4 -- Network
    UNION ALL
    SELECT
        rhc.RECID, 
        rhp.DRAWER2DEVICENAME as 'DEVICENAME',
        rhc.DRAWER2IP as 'IPADDRESS',
        rhc.DRAWER2PORT as 'PORT',
        rhc.STOREHARDWARESTATION as 'HARDWARESTATIONRECORDID'
    FROM [AX].[RETAILHARDWARECONFIGURATION] rhc
        INNER JOIN [AX].[RETAILSTOREHARDWARESTATIONTABLE] rshs ON rhc.STOREHARDWARESTATION = rshs.RECID
        INNER JOIN [AX].[RETAILHARDWARESTATION] rhs ON rshs.HARDWARESTATIONID = rhs.HARDWARESTATIONID
        INNER JOIN [AX].[RETAILHARDWAREPROFILE] rhp ON rhs.HARDWAREPROFILEID = rhp.PROFILEID
        WHERE rshs.STORE = @bi_ChannelId
        AND rhp.DRAWER2 = 4; -- Network

    SET @i_ReturnCode = @i_ReturnCode + 1;

    -- Select printer configuration
    SELECT 
        rhc.RECID, 
        rhp.PRINTERDEVICENAME as 'DEVICENAME',
        rhc.PRINTERIP as 'IPADDRESS',
        rhc.PRINTERPORT as 'PORT',
        rhc.STOREHARDWARESTATION as 'HARDWARESTATIONRECORDID'
    FROM [AX].[RETAILHARDWARECONFIGURATION] rhc
        INNER JOIN [AX].[RETAILSTOREHARDWARESTATIONTABLE] rshs ON rhc.STOREHARDWARESTATION = rshs.RECID
        INNER JOIN [AX].[RETAILHARDWARESTATION] rhs ON rshs.HARDWARESTATIONID = rhs.HARDWARESTATIONID
        INNER JOIN [AX].[RETAILHARDWAREPROFILE] rhp ON rhs.HARDWAREPROFILEID = rhp.PROFILEID
        WHERE rshs.STORE = @bi_ChannelId
        AND rhp.PRINTER = 4 -- Network
    UNION ALL
    SELECT
        rhc.RECID, 
        rhp.PRINTER2DEVICENAME as 'DEVICENAME',
        rhc.PRINTER2IP as 'IPADDRESS',
        rhc.PRINTER2PORT as 'PORT',
        rhc.STOREHARDWARESTATION as 'HARDWARESTATIONRECORDID'
    FROM [AX].[RETAILHARDWARECONFIGURATION] rhc
        INNER JOIN [AX].[RETAILSTOREHARDWARESTATIONTABLE] rshs ON rhc.STOREHARDWARESTATION = rshs.RECID
        INNER JOIN [AX].[RETAILHARDWARESTATION] rhs ON rshs.HARDWARESTATIONID = rhs.HARDWARESTATIONID
        INNER JOIN [AX].[RETAILHARDWAREPROFILE] rhp ON rhs.HARDWAREPROFILEID = rhp.PROFILEID
        WHERE rshs.STORE = @bi_ChannelId
        AND rhp.PRINTER = 4; -- Network

    SET @i_ReturnCode = @i_ReturnCode + 1;

    -- Select pinpad configuration
    SELECT
        rhc.RECID, 
        rhp.PINPADDEVICENAME as 'DEVICENAME',
        rhc.PINPADIP as 'IPADDRESS',
        rhc.PINPADPORT as 'PORT',
        rhc.STOREHARDWARESTATION as 'HARDWARESTATIONRECORDID'
    FROM [AX].[RETAILHARDWARECONFIGURATION] rhc
        INNER JOIN [AX].[RETAILSTOREHARDWARESTATIONTABLE] rshs ON rhc.STOREHARDWARESTATION = rshs.RECID
        INNER JOIN [AX].[RETAILHARDWARESTATION] rhs ON rshs.HARDWARESTATIONID = rhs.HARDWARESTATIONID
        INNER JOIN [AX].[RETAILHARDWAREPROFILE] rhp ON rhs.HARDWAREPROFILEID = rhp.PROFILEID
        WHERE rshs.STORE = @bi_ChannelId
        AND rhp.PINPAD = 3; -- Network

    SET @i_ReturnCode = @i_ReturnCode + 1;
    RETURN @i_ReturnCode;
END;
GO
PRINT N'Creating [crt].[POPULATECHANNELREFINABLEATTRIBUTE]...';


GO
CREATE PROCEDURE [crt].[POPULATECHANNELREFINABLEATTRIBUTE]
AS BEGIN

    DELETE [crt].[CHANNELREFINABLEATTRIBUTE];
    
    INSERT INTO [crt].[CHANNELREFINABLEATTRIBUTE]
    (
        CHANNEL, 
        ATTRIBUTE, 
        KEYNAME, 
        DATATYPE
    )
    SELECT
        rppacm.HOSTCHANNEL,
        rppacm.ATTRIBUTE,
        rppacm.KEYNAME,
        rppacm.DATATYPE
    FROM [ax].[RETAILPUBPRODUCTATTRIBUTECHANNELMETADATA] rppacm
    WHERE CONVERT(XML, COALESCE(rppacm.METADATA, '<ProductProperty IsRefinable="false" />')).exist('/ProductProperty[@IsRefinable="true"]') = 1
    
END;
GO
PRINT N'Creating [crt].[UPDATEEMPLOYEEPASSWORD_V2]...';


GO
CREATE PROCEDURE [crt].[UPDATEEMPLOYEEPASSWORD_V2]
    @nvc_StaffId        nvarchar(25),
    @nvc_PasswordHash   nvarchar(128),
    @nvc_PasswordSalt   nvarchar(128),
    @nvc_PasswordHashAlgorithm nvarchar(25),
    @dt_PasswordLastChangedDateTime datetime,
    @i_PasswordLastUpdatedOperation int,
    @nvc_ChangePasswordAtNextLogOn bit
AS
BEGIN
    SET NOCOUNT ON

    UPDATE [ax].[RETAILSTAFFTABLE] SET
        [PASSWORDSALT] = @nvc_PasswordSalt,
        [PASSWORDDATA] = @nvc_PasswordHash,
        [PASSWORDHASHALGORITHM] = @nvc_PasswordHashAlgorithm,
        [PASSWORDLASTCHANGEDDATETIME] = @dt_PasswordLastChangedDateTime,
        [CHANGEPASSWORD] = @nvc_ChangePasswordAtNextLogOn,
        [PASSWORDLASTUPDATEDOPERATION] = @i_PasswordLastUpdatedOperation
    WHERE
        STAFFID = @nvc_StaffId
END;
GO
PRINT N'Creating [crt].[INSERTSALESORDER]...';


GO

CREATE PROCEDURE [crt].[INSERTSALESORDER]
    @bi_ChannelId                       BIGINT,
    @TVP_TRANSACTION                    [crt].[RETAILTRANSACTIONTABLETYPE]                  READONLY,
    @TVP_SALESTRANS                     [crt].[RETAILTRANSACTIONSALESTRANSTABLETYPE]        READONLY,
    @TVP_INCOMEEXPENSE                  [crt].[RETAILINCOMEEXPENSETABLETYPE]                READONLY,
    @TVP_MARKUPTRANS                    [crt].[RETAILTRANSACTIONMARKUPTRANSTABLETYPE]       READONLY,
    @TVP_PAYMENTTRANS                   [crt].[RETAILTRANSACTIONPAYMENTTRANSTABLETYPE]      READONLY,
    @TVP_TAXTRANS                       [crt].[RETAILTRANSACTIONTAXTRANSTABLETYPE]          READONLY,
    @TVP_ATTRIBUTETRANS                 [crt].[RETAILTRANSACTIONATTRIBUTETRANSTABLETYPE]    READONLY,
    @TVP_ADDRESSTRANS                   [crt].[RETAILTRANSACTIONADDRESSTRANSTABLETYPE]      READONLY,
    @TVP_DISCOUNTTRANS                  [crt].[RETAILTRANSACTIONDISCOUNTTRANSTABLETYPE]     READONLY,
    @TVP_INFOCODETRANS                  [crt].[RETAILTRANSACTIONINFOCODETRANSTABLETYPE]     READONLY,
    @TVP_SALESPROPERTIES                [crt].[RETAILTRANSACTIONPROPERTIESTABLETYPE]        READONLY,
    @TVP_REWARDPOINTTRANS               [crt].[RETAILTRANSACTIONLOYALTYREWARDPOINTTRANSTABLETYPE] READONLY,
    @TVP_AFFILIATIONTRANS               [crt].[RETAILTRANSACTIONAFFILIATIONTRANSTABLETYPE]        READONLY,
    @TVP_CUSTOMERORDERTRANS             [crt].[CUSTOMERORDERTRANSACTIONTABLETYPE]           READONLY,
    @TVP_INVOICETRANS                   [crt].[RETAILTRANSACTIONORDERINVOICETRANSTABLETYPE] READONLY,
    @TVP_CUSTOMERACCOUNTDEPOSITTRANS    [crt].[RETAILTRANSACTIONCUSTOMERACCOUNTDEPOSITTRANSTABLETYPE] READONLY
AS
BEGIN

    SET NOCOUNT ON;

    DECLARE @i_ReturnCode               INT;
    DECLARE @i_TransactionIsOurs        INT;
    DECLARE @i_Error                    INT;
    DECLARE @d_BusinessDate             DATE;

    -- initializes the return code and assume the transaction is not ours by default
    SET @i_ReturnCode = 0;
    SET @i_TransactionIsOurs = 0;


    IF @@TRANCOUNT = 0
    BEGIN
        BEGIN TRANSACTION;

        SELECT @i_Error = @@ERROR;
        IF @i_Error <> 0
        BEGIN
            SET @i_ReturnCode = @i_Error;
            GOTO exit_label;
        END;

        SET @i_TransactionIsOurs = 1;
    END;

    -- Get the BusinessDate from the transaction tvp.
    SET @d_BusinessDate = (SELECT BUSINESSDATE FROM @TVP_TRANSACTION);

    --
    -- Insert RetailTransactionTable
    --
    EXEC [crt].[INSERTTRANSACTION] @bi_ChannelId, @TVP_TRANSACTION;
    SELECT @i_Error = @@ERROR;
    IF @i_Error <> 0
    BEGIN
        SET @i_ReturnCode = @i_Error;
        GOTO exit_label;
    END;

    --
    -- Insert RetailTransactionSalesTrans
    --
    EXEC [crt].[INSERTSALESTRANS] @bi_ChannelId, @TVP_SALESTRANS, @d_BusinessDate;
    SELECT @i_Error = @@ERROR;
    IF @i_Error <> 0
    BEGIN
        SET @i_ReturnCode = @i_Error;
        GOTO exit_label;
    END;

    -- Insert RetailIncomeExpenseAccountTable 
    EXEC [crt].[INSERTINCOMEEXPENSETRANSACTION] @TVP_INCOMEEXPENSE, @d_BusinessDate;
    SELECT @i_Error = @@ERROR;
    IF @i_Error <> 0
    BEGIN
        SET @i_ReturnCode = @i_Error;
        GOTO exit_label;
    END;

    --
    -- Insert RetailTransactionMarkupTrans
    --
    EXEC [crt].[INSERTMARKUPTRANS] @bi_ChannelId, @TVP_MARKUPTRANS;
    SELECT @i_Error = @@ERROR;
    IF @i_Error <> 0
    BEGIN
        SET @i_ReturnCode = @i_Error;
        GOTO exit_label;
    END;

    --
    -- Insert RetailTransactionTaxTrans
    --
    EXEC [crt].[INSERTTAXTRANS] @bi_ChannelId, @TVP_TAXTRANS;
    SELECT @i_Error = @@ERROR;
    IF @i_Error <> 0
    BEGIN
        SET @i_ReturnCode = @i_Error;
        GOTO exit_label;
    END;

    --
    -- Insert RetailTransactionPaymentTrans
    --
    EXEC [crt].[INSERTPAYMENTTRANS] @bi_ChannelId, @TVP_PAYMENTTRANS, @d_BusinessDate;
    SELECT @i_Error = @@ERROR;
    IF @i_Error <> 0
    BEGIN
        SET @i_ReturnCode = @i_Error;
        GOTO exit_label;
    END;

    --
    -- Insert RetailTransactionAttributeTrans
    --
    EXEC [crt].[INSERTATTRIBUTETRANS] @bi_ChannelId, @TVP_ATTRIBUTETRANS;
    SELECT @i_Error = @@ERROR;
    IF @i_Error <> 0
    BEGIN
        SET @i_ReturnCode = @i_Error;
        GOTO exit_label;
    END;

    --
    -- Insert RetailTransactionAddressTrans
    --
    EXEC [crt].[INSERTADDRESSTRANS] @bi_ChannelId, @TVP_ADDRESSTRANS;
    SELECT @i_Error = @@ERROR;
    IF @i_Error <> 0
    BEGIN
        SET @i_ReturnCode = @i_Error;
        GOTO exit_label;
    END;

    --
    -- Insert RetailTransactionDiscountTrans
    --
    EXEC [crt].[INSERTDISCOUNTTRANS] @bi_ChannelId, @TVP_DISCOUNTTRANS;
    SELECT @i_Error = @@ERROR;
    IF @i_Error <> 0
    BEGIN
        SET @i_ReturnCode = @i_Error;
        GOTO exit_label;
    END;

    --
    -- Insert RetailTransactionInfocodeTrans
    --
    EXEC [crt].[INSERTINFOCODETRANS] @bi_ChannelId, @TVP_INFOCODETRANS, @d_BusinessDate;
    SELECT @i_Error = @@ERROR;
    IF @i_Error <> 0
    BEGIN
        SET @i_ReturnCode = @i_Error;
        GOTO exit_label;
    END;

    --
    -- Insert RetailTransactionProperties
    --
    EXEC [crt].[INSERTSALESPROPERTIES] @bi_ChannelId, @TVP_SALESPROPERTIES;
    SELECT @i_Error = @@ERROR;
    IF @i_Error <> 0
    BEGIN
        SET @i_ReturnCode = @i_Error;
        GOTO exit_label;
    END;

    --
    -- Insert RetailTransactionLoyaltyRewardPointTrans
    --
    EXEC [crt].[INSERTLOYALTYREWARDPOINTTRANS] @bi_ChannelId, @TVP_REWARDPOINTTRANS;
    SELECT @i_Error = @@ERROR;
    IF @i_Error <> 0
    BEGIN
        SET @i_ReturnCode = @i_Error;
        GOTO exit_label;
    END;

    --
    -- Insert RetailTransactionAffiliations
    --
    EXEC [crt].[INSERTAFFILIATIONTRANS] @bi_ChannelId, @TVP_AFFILIATIONTRANS;
    SELECT @i_Error = @@ERROR;
    IF @i_Error <> 0
    BEGIN
        SET @i_ReturnCode = @i_Error;
        GOTO exit_label;
    END;

    --
    -- Insert CustomerOrderTransaction
    --
    EXEC [crt].[INSERTCUSTOMERORDERTRANSACTION] @bi_ChannelId, @TVP_CUSTOMERORDERTRANS;
    SELECT @i_Error = @@ERROR;
    IF @i_Error <> 0
    BEGIN
        SET @i_ReturnCode = @i_Error;
        GOTO exit_label;
    END;

    --
    -- Insert RetailTransactionOrderInvoiceTrans
    --
    EXEC [crt].[INSERTINVOICETRANS] @bi_ChannelId, @TVP_INVOICETRANS;
    SELECT @i_Error = @@ERROR;
    IF @i_Error <> 0
    BEGIN
        SET @i_ReturnCode = @i_Error;
        GOTO exit_label;
    END;

    --
    -- Insert RetailTransactionCustomerAccountDepositTrans
    --
    EXEC [crt].[INSERTCUSTOMERACCOUNTDEPOSITTRANSACTION] @TVP_CUSTOMERACCOUNTDEPOSITTRANS, @d_BusinessDate;
    SELECT @i_Error = @@ERROR;
    IF @i_Error <> 0
    BEGIN
        SET @i_ReturnCode = @i_Error;
        GOTO exit_label;
    END;

    --
    -- Final error handling
    --
    IF @i_TransactionIsOurs = 1
    BEGIN
        COMMIT TRANSACTION;

        SET @i_Error = @@ERROR;
        IF @i_Error <> 0
        BEGIN
            SET @i_ReturnCode = @i_Error;
            GOTO exit_label;
        END;

        SET @i_TransactionIsOurs = 0;
    END;

exit_label:

    IF @i_TransactionIsOurs = 1
    BEGIN
        ROLLBACK TRANSACTION;
    END;

    RETURN @i_ReturnCode;
END;
GO
PRINT N'Altering [crt].[INSERTTENDERDROPANDDECLARE]...';


GO

/******* ******* ******* ******* ******* ******* ******* ******* ******* ******* *******
    [crt].[INSERTTENDERDROPANDDECLARE] calls the corresponding stored procedures to insert into:
    Header record into RetailTransactionTable 
    Transaction lines into RETAILTRANSACTIONTENDERDECLARATIONTRANS, RETAILTRANSACTIONBANKEDTENDERTRANS and RETAILTRANSACTIONSAFETENDERTRANS.
******* ******* ******* ******* ******* ******* ******* ******* ******* ******* *******/

ALTER PROCEDURE [crt].[INSERTTENDERDROPANDDECLARE]
    @bi_ChannelId                    BIGINT,
    @tvp_Transaction                [crt].[RETAILTRANSACTIONTABLETYPE]      READONLY,
    @tvp_TenderDeclareTrans         [crt].[TENDERDECLARATIONTRANSTYPE]     READONLY,
    @tvp_TenderDropTrans            [crt].[TENDERDROPTRANSTYPE]      READONLY,
    @tvp_ReasonCodeLine             [crt].[RETAILTRANSACTIONINFOCODETRANSTABLETYPE]      READONLY
AS
BEGIN

    SET NOCOUNT ON;

    DECLARE @i_ReturnCode               INT;
    DECLARE @i_TransactionIsOurs        INT;
    DECLARE @i_Error                    INT;
    DECLARE @tvp_BankDropTrans          [crt].[TENDERDROPTRANSTYPE];
    DECLARE @tvp_SafeDropTrans          [crt].[TENDERDROPTRANSTYPE];
    DECLARE @d_BusinessDate             DATE;

    -- initializes the return code and assume the transaction is not ours by default
    SET @i_ReturnCode = 0;
    SET @i_TransactionIsOurs = 0;

    IF @@TRANCOUNT = 0
    BEGIN
        BEGIN TRANSACTION;

        SELECT @i_Error = @@ERROR;
        IF @i_Error <> 0
        BEGIN
            SET @i_ReturnCode = @i_Error;
            GOTO exit_label;
        END;

        SET @i_TransactionIsOurs = 1;
    END;

    -- Get the BusinessDate from the transaction tvp.
    SET @d_BusinessDate = (SELECT BUSINESSDATE FROM @tvp_Transaction)

    --
    -- Insert RetailTransactionTable
    --
    EXEC [crt].[INSERTTRANSACTION] @bi_ChannelId, @tvp_Transaction;
    SELECT @i_Error = @@ERROR;
    IF @i_Error <> 0
    BEGIN
        SET @i_ReturnCode = @i_Error;
        GOTO exit_label;
    END;

    --
    -- Insert RETAILTRANSACTIONTENDERDECLARATIONTRANS
    --
    EXEC [crt].[INSERTTENDERDECLARATION] @bi_ChannelId, @tvp_TenderDeclareTrans, @d_BusinessDate;
    SELECT @i_Error = @@ERROR;
    IF @i_Error <> 0
    BEGIN
        SET @i_ReturnCode = @i_Error;
        GOTO exit_label;
    END;

    --
    -- Insert RETAILTRANSACTIONINFOCODETRANS
    --
    EXEC [crt].[INSERTINFOCODETRANS] @bi_ChannelId, @tvp_ReasonCodeLine, @d_BusinessDate;
    SELECT @i_Error = @@ERROR;
    IF @i_Error <> 0
    BEGIN
        SET @i_ReturnCode = @i_Error;
        GOTO exit_label;
    END;

    --
    -- Insert RETAILTRANSACTIONBANKEDTENDERTRANS
    --

    -- Insert into table value by filtering type for BankDrop (16)

    INSERT INTO @tvp_BankDropTrans 
    SELECT    [TENDERTRANS].[AMOUNTCUR], 
            [TENDERTRANS].[AMOUNTCURPOS], 
            [TENDERTRANS].[AMOUNTMST], 
            [TENDERTRANS].[AMOUNTMSTPOS], 
            [TENDERTRANS].[AMOUNTTENDERED], 
            [TENDERTRANS].[AMOUNTTENDEREDPOS],
            ISNULL([TENDERTRANS].[TYPE],0), 
            [TENDERTRANS].[BANKBAGNO], 
            [TENDERTRANS].[CARDORACCOUNT], 
            [TENDERTRANS].[CARDTYPEID], 
            [TENDERTRANS].[CURRENCY], 
            [TENDERTRANS].[EXCHRATE], 
            [TENDERTRANS].[EXCHRATEMST], 
            [TENDERTRANS].[LINENUM], 
            [TENDERTRANS].[QTY],
            [TENDERTRANS].[REPLICATED], 
            [TENDERTRANS].[SHIFT], 
            [TENDERTRANS].[SHIFTDATE], 
            [TENDERTRANS].[STAFF], 
            [TENDERTRANS].[STATEMENTCODE], 
            [TENDERTRANS].[STATUSTYPE],
            [TENDERTRANS].[STORE], 
            [TENDERTRANS].[TENDERTYPE], 
            [TENDERTRANS].[TERMINAL], 
            [TENDERTRANS].[TRANSACTIONID], 
            [TENDERTRANS].[TRANSACTIONSTATUS], 
            [TENDERTRANS].[TRANSDATE], 
            [TENDERTRANS].[TRANSTIME],
            [TENDERTRANS].[DATAAREAID]
    FROM @tvp_TenderDropTrans AS TENDERTRANS WHERE ISNULL([TENDERTRANS].[TYPE],0) = 16
    
    EXEC [crt].[INSERTBANKEDTENDERTRANS] @bi_ChannelId, @tvp_BankDropTrans, @d_BusinessDate;
    SELECT @i_Error = @@ERROR;
    IF @i_Error <> 0
    BEGIN
        SET @i_ReturnCode = @i_Error;
        GOTO exit_label;
    END;

    --
    -- Insert RETAILTRANSACTIONSAFETENDERTRANS
    --

    -- Insert into table value by filtering type for SafeDrop (17)

    INSERT INTO @tvp_SafeDropTrans 
    SELECT [TENDERTRANS].[AMOUNTCUR], 
            [TENDERTRANS].[AMOUNTCURPOS], 
            [TENDERTRANS].[AMOUNTMST], 
            [TENDERTRANS].[AMOUNTMSTPOS], 
            [TENDERTRANS].[AMOUNTTENDERED], 
            [TENDERTRANS].[AMOUNTTENDEREDPOS],
            ISNULL([TENDERTRANS].[TYPE],0), 
            [TENDERTRANS].[BANKBAGNO], 
            [TENDERTRANS].[CARDORACCOUNT], 
            [TENDERTRANS].[CARDTYPEID], 
            [TENDERTRANS].[CURRENCY], 
            [TENDERTRANS].[EXCHRATE], 
            [TENDERTRANS].[EXCHRATEMST], 
            [TENDERTRANS].[LINENUM], 
            [TENDERTRANS].[QTY],
            [TENDERTRANS].[REPLICATED], 
            [TENDERTRANS].[SHIFT], 
            [TENDERTRANS].[SHIFTDATE], 
            [TENDERTRANS].[STAFF], 
            [TENDERTRANS].[STATEMENTCODE], 
            [TENDERTRANS].[STATUSTYPE],
            [TENDERTRANS].[STORE], 
            [TENDERTRANS].[TENDERTYPE], 
            [TENDERTRANS].[TERMINAL], 
            [TENDERTRANS].[TRANSACTIONID], 
            [TENDERTRANS].[TRANSACTIONSTATUS], 
            [TENDERTRANS].[TRANSDATE], 
            [TENDERTRANS].[TRANSTIME],
            [TENDERTRANS].[DATAAREAID]
    FROM @tvp_TenderDropTrans AS TENDERTRANS WHERE ISNULL([TENDERTRANS].[TYPE],0) = 17

    EXEC [crt].[INSERTSAFETENDERTRANS] @bi_ChannelId, @tvp_SafeDropTrans, @d_BusinessDate;
    SELECT @i_Error = @@ERROR;
    IF @i_Error <> 0
    BEGIN
        SET @i_ReturnCode = @i_Error;
        GOTO exit_label;
    END;

    IF @i_TransactionIsOurs = 1
    BEGIN
        COMMIT TRANSACTION;

        SET @i_Error = @@ERROR;
        IF @i_Error <> 0
        BEGIN
            SET @i_ReturnCode = @i_Error;
            GOTO exit_label;
        END;

        SET @i_TransactionIsOurs = 0;
    END;

    ---
    --- Get this newly created transaction
    ---
    SELECT 
        DDTV.TYPE, 
        DDTV.TRANSACTIONID, 
        DDTV.OPENDRAWER, 
        DDTV.STORE, 
        DDTV.TERMINAL, 
        DDTV.STAFF, 
        DDTV.BATCHID, 
        DDTV.BATCHTERMINALID, 
        DDTV.DESCRIPTION, 
        DDTV.CREATEDDATETIME,
        CAST (DDTV.CREATEDOFFLINE AS BIT) AS CREATEDOFFLINE
        FROM [crt].[DROPANDDECLARETRANSACTIONSVIEW] DDTV INNER JOIN @tvp_Transaction T
        ON DDTV.TRANSACTIONID = T.TRANSACTIONID
        
    ---
    --- Get tender details for this newly created transaction
    ---
    SELECT
        DDTV.TRANSACTIONID,
        DDTV.LINENUM,
        DDTV.AMOUNT,
        DDTV.FOREIGNCURRENCYAMOUNT,
        DDTV.CURRENCY,
        DDTV.BANKBAGNUMBER,
        DDTV.EXCHRATEMST,
        DDTV.AMOUNTMST,
        DDTV.TENDERTYPE,
        DDTV.EXCHRATE
        FROM [crt].[DROPANDDECLARETENDERSVIEW] DDTV INNER JOIN @tvp_Transaction T
        ON DDTV.TRANSACTIONID = T.TRANSACTIONID
        ORDER BY DDTV.TRANSACTIONID, DDTV.LINENUM

exit_label:

    IF @i_TransactionIsOurs = 1
    BEGIN
        ROLLBACK TRANSACTION;
    END;

    RETURN @i_ReturnCode;
END;
GO
PRINT N'Altering [crt].[INSERTNONSALETENDER]...';


GO

/******* ******* ******* ******* ******* ******* ******* ******* ******* ******* *******
	[crt].[INSERTNONSALETENDER] calls the corresponding stored procedures to insert into:
	Header record into RetailTransactionTable 
	Transaction lines into INSERTPAYMENTTRANS.
******* ******* ******* ******* ******* ******* ******* ******* ******* ******* *******/

ALTER PROCEDURE [crt].[INSERTNONSALETENDER]
    @bi_ChannelId           BIGINT,
    @TVP_TRANSACTION        [crt].[RETAILTRANSACTIONTABLETYPE]                  READONLY,
    @TVP_PAYMENTTRANS       [crt].[RETAILTRANSACTIONPAYMENTTRANSTABLETYPE]      READONLY,
    @TVP_REASONCODELINE     [crt].[RETAILTRANSACTIONINFOCODETRANSTABLETYPE]     READONLY
AS
BEGIN

    SET NOCOUNT ON;

    DECLARE @i_ReturnCode               INT;
    DECLARE @i_TransactionIsOurs        INT;
    DECLARE @i_Error                    INT;
    DECLARE @d_BusinessDate             DATE;

    -- initializes the return code and assume the transaction is not ours by default
    SET @i_ReturnCode = 0;
    SET @i_TransactionIsOurs = 0;

    IF @@TRANCOUNT = 0
    BEGIN
        BEGIN TRANSACTION;

        SELECT @i_Error = @@ERROR;
        IF @i_Error <> 0
        BEGIN
            SET @i_ReturnCode = @i_Error;
            GOTO exit_label;
        END;

        SET @i_TransactionIsOurs = 1;
    END;

    -- Get the BusinessDate from the transaction tvp.
    SET @d_BusinessDate = (SELECT BUSINESSDATE FROM @TVP_TRANSACTION);

    --
    -- Insert RetailTransactionTable
    --
    EXEC [crt].[INSERTTRANSACTION] @bi_ChannelId, @TVP_TRANSACTION;
    SELECT @i_Error = @@ERROR;
    IF @i_Error <> 0
    BEGIN
        SET @i_ReturnCode = @i_Error;
        GOTO exit_label;
    END;

    --
    -- Insert RetailTransactionPaymentTrans
    --
    EXEC [crt].[INSERTPAYMENTTRANS] @bi_ChannelId, @TVP_PAYMENTTRANS, @d_BusinessDate;
    SELECT @i_Error = @@ERROR;
    IF @i_Error <> 0
    BEGIN
        SET @i_ReturnCode = @i_Error;
        GOTO exit_label;
    END;

    --
    -- Insert RETAILTRANSACTIONINFOCODETRANS
    --
    EXEC [crt].[INSERTINFOCODETRANS] @bi_ChannelId, @TVP_REASONCODELINE, @d_BusinessDate;
    SELECT @i_Error = @@ERROR;
    IF @i_Error <> 0
    BEGIN
        SET @i_ReturnCode = @i_Error;
        GOTO exit_label;
    END;

    IF @i_TransactionIsOurs = 1
    BEGIN
        COMMIT TRANSACTION;

        SET @i_Error = @@ERROR;
        IF @i_Error <> 0
        BEGIN
            SET @i_ReturnCode = @i_Error;
            GOTO exit_label;
        END;

        SET @i_TransactionIsOurs = 0;
    END;

    --
    -- Get this newly created transaction
    --
    BEGIN 
        SELECT
            NSTV.AMOUNT,
            NSTV.AMOUNTCUR,
            NSTV.TRANSACTIONID,
            NSTV.CURRENCY,
            NSTV.TENDERCUR,
            NSTV.TYPE,
            NSTV.BATCHID,
            NSTV.BATCHTERMINALID,
            NSTV.STAFF,
            NSTV.TERMINAL,
            NSTV.DESCRIPTION,
            NSTV.TENDERTYPE,
            NSTV.CREATEDDATETIME,
            NSTV.STORE
        FROM @TVP_TRANSACTION T            
            INNER JOIN [crt].[NONSALESTRANSACTIONSVIEW] NSTV
            ON NSTV.TRANSACTIONID = T.TRANSACTIONID
            AND NSTV.TERMINAL = T.TERMINAL
            AND NSTV.BATCHID = T.BATCHID
            AND NSTV.TYPE = T.TYPE            
    END

exit_label:

    IF @i_TransactionIsOurs = 1
    BEGIN
        ROLLBACK TRANSACTION;
    END;

    RETURN @i_ReturnCode;
END;
GO
PRINT N'Altering [crt].[RUNPOSTDATASYNCOPERATIONS]...';


GO

ALTER PROCEDURE [crt].[RUNPOSTDATASYNCOPERATIONS]
    @affectedTableNamesXml XML
AS BEGIN
    DECLARE @tableNameList XML;
    DECLARE @hDoc INT;

    DECLARE @affectedTableNames TABLE
    (
        TableName NVARCHAR(50),  -- as defined in AX subjob table
        TableId   INT
    );

    EXEC sp_xml_preparedocument @hDoc OUTPUT, @affectedTableNamesXml;

    INSERT INTO @affectedTableNames (TableName, TableId)
    SELECT TableName, OBJECT_ID(TableName)
    FROM OPENXML(@hDoc, 'RetailCdxDataSync/AffectedTables/Table', 1)
    WITH
    (
        TableName NVARCHAR(50) '@name'
    );

    -- Populate ax.CHANNELREFINABLEATTRIBUTE
    IF EXISTS (SELECT * FROM @affectedTableNames WHERE TableId = OBJECT_ID('[ax].[RETAILPUBPRODUCTATTRIBUTECHANNELMETADATA]'))
    BEGIN
        EXEC [crt].[POPULATECHANNELREFINABLEATTRIBUTE];
    END;
    
    IF EXISTS
    (
        SELECT 1 FROM @affectedTableNames
        WHERE TableId IN
        (
            OBJECT_ID('[ax].[RETAILASSORTMENTLOOKUP]'),
            OBJECT_ID('[ax].[RETAILASSORTMENTLOOKUPCHANNELGROUP]'),
            OBJECT_ID('[ax].[RETAILCHANNELTABLE]'),
            OBJECT_ID('[ax].[INVENTTABLE]'),
            OBJECT_ID('[ax].[ECORESDISTINCTPRODUCTVARIANT]')
        )
    )
    BEGIN
        EXEC [crt].POPULATEPRODUCTASSORTMENTRULES
    END;

    -- Force updating full text indexes to avoid prevent SQL Server from running a delayed index population in the background.
    DECLARE @sql_UpdateFullTextIndexes NVARCHAR(MAX)
    SET @sql_UpdateFullTextIndexes = ''

    SELECT
        @sql_UpdateFullTextIndexes = @sql_UpdateFullTextIndexes + ' ALTER FULLTEXT INDEX ON ' + [s].NAME + '.' + [t].NAME + ' START UPDATE POPULATION;'
    FROM sys.fulltext_indexes fti
    INNER JOIN sys.tables t ON [t].[object_id] = [fti].[object_id]
    INNER JOIN sys.schemas s ON [s].[schema_id] = [t].[schema_id]
    INNER JOIN @affectedTableNames atn ON [atn].TableId = [t].[object_id]
    -- Excludes the following full text index tables in upload job as Retail Server does not have permission.
    WHERE [atn].TableId NOT IN 
	(
	    OBJECT_ID('[ax].[RETAILASYNCCUSTOMER]'),
		OBJECT_ID('[ax].[RETAILASYNCADDRESS]'),
		OBJECT_ID('[ax].[RETAILTRANSACTIONADDRESSTRANS]')
	)

    SELECT @sql_UpdateFullTextIndexes

    EXEC(@sql_UpdateFullTextIndexes)

END;
GO
PRINT N'Creating [crt].[INSERTSHIFT]...';


GO

CREATE PROCEDURE [crt].[INSERTSHIFT]
    @TVP_SHIFTTABLETYPE              [crt].[SHIFTTABLETYPE]                  READONLY,
    @TVP_SHIFTTENDERLINETABLETYPE    [crt].[SHIFTTENDERLINETABLETYPE]        READONLY,
	@TVP_SHIFTACCOUNTLINETABLETYPE    [crt].[SHIFTACCOUNTLINETYPE]		     READONLY,
    @RV_ROWVERSION                   ROWVERSION                              OUTPUT
AS
BEGIN

    SET NOCOUNT ON;

    DECLARE @i_ReturnCode               INT;
    DECLARE @i_TransactionIsOurs        INT;
    DECLARE @i_Error                    INT;
    DECLARE @tvp_RowVersion             TABLE ([ROWVERSION] BINARY(8));

    -- initializes the return code and assume the transaction is not ours by default
    SET @i_ReturnCode = 0;
    SET @i_TransactionIsOurs = 0;

    IF @@TRANCOUNT = 0
    BEGIN
        BEGIN TRANSACTION;

        SELECT @i_Error = @@ERROR;
        IF @i_Error <> 0
        BEGIN
            SET @i_ReturnCode = @i_Error;
            GOTO exit_label;
        END;

        SET @i_TransactionIsOurs = 1;
    END;

    --
    -- Insert Shift
    --

    -- Perform Insert
    INSERT INTO [ax].RETAILPOSBATCHTABLE
    (
        [BATCHID],
        [CHANNEL],
        [CLOSEDATE],
        [CLOSEDATETIMEUTC],
        [CLOSEDATETIMEUTCTZID],
        [CLOSETIME],
		[CLOSEDATTERMINAL],
        [CUSTOMERSCOUNT],
        [DISCOUNTTOTAL],
        [LOGONSCOUNT],
        [NOSALECOUNT],
        [PAIDTOACCOUNTTOTAL],
        [POSTED],
        [RETURNSTOTAL],
        [ROUNDEDAMOUNTTOTAL],
        [SALESCOUNT],
        [SALESTOTAL],
        [STAFFID],
        [STARTDATE],
        [STARTDATETIMEUTC],
        [STARTDATETIMEUTCTZID],
        [STARTTIME],
        [STATUS],
        [STOREID],
        [TAXTOTAL],
        [TERMINALID],
        [TRANSACTIONSCOUNT],
        [VOIDSCOUNT],
        [DATAAREAID]
    )
    OUTPUT INSERTED.[ROWVERSION] INTO @tvp_RowVersion
    SELECT
        [SHIFTID],
        [CHANNEL],
        [CLOSEDATE],
        [CLOSEDATETIMEUTC],
        [CLOSEDATETIMEUTCTZID],
        [CLOSETIME],
		[CLOSEDATTERMINAL],
        [CUSTOMERSCOUNT],
        [DISCOUNTTOTAL],
        [LOGONSCOUNT],
        [NOSALECOUNT],
        [PAIDTOACCOUNTTOTAL],
        [POSTED],
        [RETURNSTOTAL],
        [ROUNDEDAMOUNTTOTAL],
        [SALESCOUNT],
        [SALESTOTAL],
        [STAFFID],
        [STARTDATE],
        [STARTDATETIMEUTC],
        [STARTDATETIMEUTCTZID],
        [STARTTIME],
        [STATUS],
        [STOREID],
        [TAXTOTAL],
        [TERMINALID],
        [TRANSACTIONSCOUNT],
        [VOIDSCOUNT],
        [DATAAREAID]
    FROM @TVP_SHIFTTABLETYPE;

    SELECT @i_Error = @@ERROR;
    IF @i_Error <> 0
    BEGIN
        SET @i_ReturnCode = @i_Error;
        GOTO exit_label;
    END;

    SELECT TOP 1 @RV_ROWVERSION = CAST([ROWVERSION] AS ROWVERSION) FROM @tvp_RowVersion;

    -- Insert ShiftTenderLine
    EXEC @i_Error = [crt].[INSERTSHIFTTENDERLINE] @TVP_SHIFTTENDERLINETABLETYPE;
    IF @i_Error <> 0
    BEGIN
        SET @i_ReturnCode = @i_Error;
        GOTO exit_label;
    END;

	SELECT @i_Error = @@ERROR;
    IF @i_Error <> 0
    BEGIN
        SET @i_ReturnCode = @i_Error;
        GOTO exit_label;
    END;

	-- Insert ShiftTenderLine
    EXEC @i_Error = [crt].[INSERTSHIFTACCOUNTLINE] @TVP_SHIFTACCOUNTLINETABLETYPE;
    IF @i_Error <> 0
    BEGIN
        SET @i_ReturnCode = @i_Error;
        GOTO exit_label;
    END;

    IF @i_TransactionIsOurs = 1
    BEGIN
        COMMIT TRANSACTION;

        SET @i_Error = @@ERROR;
        IF @i_Error <> 0
        BEGIN
            SET @i_ReturnCode = @i_Error;
            GOTO exit_label;
        END;

        SET @i_TransactionIsOurs = 0;
    END;

exit_label:

    IF @i_TransactionIsOurs = 1
    BEGIN
        ROLLBACK TRANSACTION;
    END;

    RETURN @i_ReturnCode;
END;
GO
PRINT N'Creating [crt].[DELETESHIFTSTAGINGANDINSERTSHIFT]...';


GO

CREATE PROCEDURE [crt].[DELETESHIFTSTAGINGANDINSERTSHIFT]
    @TVP_SHIFTTABLETYPE             [crt].[SHIFTTABLETYPE]                  READONLY,
    @TVP_SHIFTTENDERLINETABLETYPE   [crt].[SHIFTTENDERLINETABLETYPE]        READONLY,
    @TVP_SHIFTACCOUNTLINETABLETYPE  [crt].[SHIFTACCOUNTLINETYPE]            READONLY,
    @RV_ROWVERSION                  ROWVERSION                              OUTPUT
AS
BEGIN

    SET NOCOUNT ON;

    DECLARE @i_ReturnCode               INT;
    DECLARE @i_TransactionIsOurs        INT;
    DECLARE @i_Error                    INT;

    -- initializes the return code and assume the transaction is not ours by default
    SET @i_ReturnCode = 0;
    SET @i_TransactionIsOurs = 0;

    IF @@TRANCOUNT = 0
    BEGIN
        BEGIN TRANSACTION;

        SELECT @i_Error = @@ERROR;
        IF @i_Error <> 0
        BEGIN
            SET @i_ReturnCode = @i_Error;
            GOTO exit_label;
        END;

        SET @i_TransactionIsOurs = 1;
    END;

    --
    -- DELETE ShiftStaging
    --
    DECLARE @bi_ChannelId           [BIGINT];
    DECLARE @nvc_TerminalId         [NVARCHAR](10);
    DECLARE @bi_ShiftId             [BIGINT];

    SELECT @bi_ChannelId = CHANNEL, @nvc_TerminalId = TERMINALID, @bi_ShiftId = SHIFTID
    FROM @TVP_SHIFTTABLETYPE

    EXEC @i_Error = [crt].[DELETESHIFTSTAGING] @bi_ChannelId, @nvc_TerminalId, @bi_ShiftId, @RV_ROWVERSION;
    IF @i_Error <> 0
    BEGIN
        SET @i_ReturnCode = @i_Error;
        GOTO exit_label;
    END;

    --
    -- INSERT SHIFT
    --
    DECLARE @RV_NEWROWVERSION       ROWVERSION;

    EXEC @i_Error = [crt].[INSERTSHIFT] @TVP_SHIFTTABLETYPE, @TVP_SHIFTTENDERLINETABLETYPE, @TVP_SHIFTACCOUNTLINETABLETYPE, @RV_ROWVERSION = @RV_NEWROWVERSION OUTPUT;
    IF @i_Error <> 0
    BEGIN
        SET @i_ReturnCode = @i_Error;
        GOTO exit_label;
    END;

    -- RETURNS NEW ROWVERSION FROM SHIFT TABLE
    SELECT @RV_ROWVERSION = @RV_NEWROWVERSION


    IF @i_TransactionIsOurs = 1
    BEGIN
        COMMIT TRANSACTION;

        SET @i_Error = @@ERROR;
        IF @i_Error <> 0
        BEGIN
            SET @i_ReturnCode = @i_Error;
            GOTO exit_label;
        END;

        SET @i_TransactionIsOurs = 0;
    END;

exit_label:

    IF @i_TransactionIsOurs = 1
    BEGIN
        ROLLBACK TRANSACTION;
    END;

    RETURN @i_ReturnCode;
END;
GO
PRINT N'Creating Permission...';


GO
GRANT DELETE
    ON OBJECT::[ax].[RETAILDISCOUNTMIXANDMATCH] TO [DataSyncUsersRole];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON OBJECT::[ax].[RETAILDISCOUNTMIXANDMATCH] TO [DataSyncUsersRole];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[ax].[RETAILDISCOUNTMIXANDMATCH] TO [DataSyncUsersRole];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[ax].[RETAILDISCOUNTMIXANDMATCH] TO [ReportUsersRole];


GO
PRINT N'Creating Permission...';


GO
GRANT UPDATE
    ON OBJECT::[ax].[RETAILDISCOUNTMIXANDMATCH] TO [DataSyncUsersRole];


GO
PRINT N'Creating Permission...';


GO
GRANT DELETE
    ON OBJECT::[ax].[RETAILMEDIARESOURCE] TO [DataSyncUsersRole];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON OBJECT::[ax].[RETAILMEDIARESOURCE] TO [DataSyncUsersRole];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[ax].[RETAILMEDIARESOURCE] TO [DataSyncUsersRole];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[ax].[RETAILMEDIARESOURCE] TO [ReportUsersRole];


GO
PRINT N'Creating Permission...';


GO
GRANT UPDATE
    ON OBJECT::[ax].[RETAILMEDIARESOURCE] TO [DataSyncUsersRole];


GO
PRINT N'Creating Permission...';


GO
GRANT DELETE
    ON OBJECT::[ax].[RETAILSTAFFTABLE] TO [DataSyncUsersRole];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON OBJECT::[ax].[RETAILSTAFFTABLE] TO [DataSyncUsersRole];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[ax].[RETAILSTAFFTABLE] TO [DataSyncUsersRole];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[ax].[RETAILSTAFFTABLE] TO [ReportUsersRole];


GO
PRINT N'Creating Permission...';


GO
GRANT UPDATE
    ON OBJECT::[ax].[RETAILSTAFFTABLE] TO [DataSyncUsersRole];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON TYPE::[crt].[CUSTOMERORDERTRANSACTIONTABLETYPE] TO [UsersRole];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[crt].[INSERTCUSTOMERORDERTRANSACTION] TO [UsersRole];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[crt].[INSERTSALESORDER] TO [UsersRole];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON TYPE::[crt].[SHIFTACCOUNTLINETYPE] TO [UsersRole];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[crt].[DELETESHIFTSTAGINGANDINSERTSHIFT] TO [UsersRole];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[crt].[INSERTSHIFT] TO [UsersRole];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[crt].[INSERTSHIFTACCOUNTLINE] TO [UsersRole];


GO
PRINT N'Creating Permission...';


GO
GRANT UPDATE
    ON OBJECT::[ax].[RETAILMEDIAPRODUCTRELATION] TO [DataSyncUsersRole];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[ax].[RETAILMEDIAPRODUCTRELATION] TO [DataSyncUsersRole];


GO
PRINT N'Creating Permission...';


GO
GRANT DELETE
    ON OBJECT::[ax].[RETAILMEDIAPRODUCTRELATION] TO [DataSyncUsersRole];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON OBJECT::[ax].[RETAILMEDIAPRODUCTRELATION] TO [DataSyncUsersRole];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[ax].[RETAILMEDIAPRODUCTRELATION] TO [ReportUsersRole];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[ax].[RETAILMEDIATEMPLATE] TO [DataSyncUsersRole];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[ax].[RETAILMEDIATEMPLATE] TO [ReportUsersRole];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON OBJECT::[ax].[RETAILMEDIATEMPLATE] TO [DataSyncUsersRole];


GO
PRINT N'Creating Permission...';


GO
GRANT DELETE
    ON OBJECT::[ax].[RETAILMEDIATEMPLATE] TO [DataSyncUsersRole];


GO
PRINT N'Creating Permission...';


GO
GRANT UPDATE
    ON OBJECT::[ax].[RETAILMEDIATEMPLATE] TO [DataSyncUsersRole];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[crt].[GETLINKEDPRODUCTRELATIONS_V2] TO [UsersRole];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[crt].[GETMEDIALOCATIONBYPRODUCTID] TO [UsersRole];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[crt].[GETPRODUCTATTRIBUTESCONTAININGVALUES] TO [UsersRole];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[crt].[GETPRODUCTBEHAVIORBYPRODUCTIDS_V2] TO [UsersRole];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[crt].[GETPRODUCTDIMENSIONVALUESBYVARIANTPRODUCTIDS_V2] TO [UsersRole];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[crt].[GETPRODUCTIDSBYCATEGORYID] TO [UsersRole];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[crt].[GETPRODUCTIDSBYSEARCHTEXT] TO [UsersRole];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[crt].[GETPRODUCTMEDIALOCATIONS] TO [PublishersRole];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[crt].[GETPRODUCTMEDIALOCATIONS] TO [UsersRole];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[crt].[GETPRODUCTSBYIDS_V2] TO [UsersRole];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[crt].[GETPRODUCTSEARCHRESULTSBYCATEGORYID] TO [UsersRole];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[crt].[GETPRODUCTSEARCHRESULTSBYTEXT] TO [UsersRole];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[crt].[GETCUSTOMERBYACCOUNTNUMBER] TO [UsersRole];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[crt].[GETDEVICECONFIGURATION] TO [UsersRole];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[crt].[GETHARDWARESTATIONS] TO [UsersRole];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[crt].[POPULATECHANNELREFINABLEATTRIBUTE] TO [DataSyncUsersRole];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[crt].[UPDATEEMPLOYEEPASSWORD_V2] TO [UsersRole];


GO
PRINT N'Creating Permission...';


GO
GRANT ALTER
    ON OBJECT::[crt].[PRODUCTASSORTMENTRULES_V2] TO [DataSyncUsersRole];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[crt].[CHANNELCONFIGURATIONVIEW_V2] TO [PublishersRole];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[crt].[CHANNELCONFIGURATIONVIEW_V2] TO [UsersRole];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[crt].[ORGUNITADDRESSVIEW] TO [UsersRole];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[crt].[ORGUNITCONTACTSVIEW] TO [UsersRole];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[crt].[PRODUCTDIMENSIONSVIEW] TO [UsersRole];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[crt].[PRODUCTIDSTOUNITSOFMEASUREVIEW] TO [UsersRole];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[crt].[TRANSACTIONSERVICEPROFILEVIEW] TO [UsersRole];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[crt].[TRANSACTIONSERVICEPROFILEVIEW] TO [PublishersRole];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[crt].[UNITOFMEASUREVIEW] TO [UsersRole];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[crt].[CUSTOMERORDERTRANSACTION] TO [ReportUsersRole];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[crt].[GETPURCHASEHISTORY] TO [UsersRole];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[crt].[SEARCHPRODUCTSBYTEXT] TO [UsersRole];


GO
PRINT N'Refreshing [crt].[GETASSORTEDPRODUCTS]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[GETASSORTEDPRODUCTS]';


GO
PRINT N'Refreshing [crt].[REFINEANDSEARCHPRODUCTSBYKEYWORD]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[REFINEANDSEARCHPRODUCTSBYKEYWORD]';


GO
PRINT N'Refreshing [crt].[GETREPORTCONFIGBYID]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[GETREPORTCONFIGBYID]';


GO
PRINT N'Refreshing [crt].[GETREPORTCONFIGURATION]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[GETREPORTCONFIGURATION]';


GO
PRINT N'Refreshing [crt].[GETTILLLAYOUT]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[GETTILLLAYOUT]';


GO
PRINT N'Refreshing [crt].[UPDATEEMPLOYEEPASSWORD]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[UPDATEEMPLOYEEPASSWORD]';


GO
PRINT N'Refreshing [crt].[DELETERETAILSTAFFLOGINLOG]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[DELETERETAILSTAFFLOGINLOG]';


GO
PRINT N'Refreshing [crt].[GETITEMSBYPRODUCTIDS]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[GETITEMSBYPRODUCTIDS]';


GO
PRINT N'Refreshing [crt].[GETKITCOMPONENTSINFO]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[GETKITCOMPONENTSINFO]';


GO
PRINT N'Refreshing [crt].[GETLINKEDPRODUCTS]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[GETLINKEDPRODUCTS]';


GO
PRINT N'Refreshing [crt].[VERIFYPRODUCTSEXISTENCE]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[VERIFYPRODUCTSEXISTENCE]';


GO
PRINT N'Refreshing [crt].[GETCHANGEDPRODUCTIDS]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[GETCHANGEDPRODUCTIDS]';


GO
PRINT N'Refreshing [crt].[GETPRODUCTSBYKEYWORD]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[GETPRODUCTSBYKEYWORD]';


GO
PRINT N'Refreshing [crt].[GETREFINERVALUESFORKEYWORDSEARCH]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[GETREFINERVALUESFORKEYWORDSEARCH]';


GO
PRINT N'Refreshing [crt].[GETPRODUCTSBYCATEGORY]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[GETPRODUCTSBYCATEGORY]';


GO
PRINT N'Refreshing [crt].[GETREFINERVALUESFORCATEGORYSEARCH]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[GETREFINERVALUESFORCATEGORYSEARCH]';


GO
PRINT N'Refreshing [crt].[GETITEMSBYITEMIDS]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[GETITEMSBYITEMIDS]';


GO
PRINT N'Refreshing [crt].[CREATEUPDATECUSTOMERADDRESS]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[CREATEUPDATECUSTOMERADDRESS]';


GO
PRINT N'Refreshing [crt].[DELETEUSERCREDENTIALS]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[DELETEUSERCREDENTIALS]';


GO
PRINT N'Refreshing [crt].[SAVEUSERCREDENTIALS]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[SAVEUSERCREDENTIALS]';


GO
PRINT N'Refreshing [crt].[POPULATEPRODUCTCATEGORYRULES]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[POPULATEPRODUCTCATEGORYRULES]';


GO
PRINT N'Refreshing [crt].[GETDOWNLOADINGDATA]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[GETDOWNLOADINGDATA]';


GO
PRINT N'Refreshing [crt].[POPULATEPRODUCTCATALOGRULES]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[POPULATEPRODUCTCATALOGRULES]';


GO
PRINT N'Refreshing [crt].[GETPRODUCTCATALOGS]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[GETPRODUCTCATALOGS]';


GO
PRINT N'Refreshing [crt].[GETACTIVESHIFT]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[GETACTIVESHIFT]';


GO
PRINT N'Refreshing [crt].[CREATEUPDATECUSTOMER]...';


GO
EXECUTE sp_refreshsqlmodule N'[crt].[CREATEUPDATECUSTOMER]';


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

-------------------<BEGIN AX SCHEMA ALTERATIONS>--------------------------------------------

-- [ax].[PRICEDISCTABLE]

-- Removing and recreating clustered index, as the original defined in AX cannot be changed
-- and contains 14 columns, causing extreme DB size inflation
IF EXISTS(SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID('ax.PRICEDISCTABLE') AND NAME = 'I_137462222_1904821809')
BEGIN
    ALTER TABLE [ax].[PRICEDISCTABLE]
    DROP CONSTRAINT [I_137462222_1904821809];

    IF EXISTS(SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID('ax.PRICEDISCTABLE') AND NAME = 'I_PRICEDISCTABLE_RECID')
    BEGIN
        ALTER TABLE [ax].[PRICEDISCTABLE]
        DROP CONSTRAINT [I_PRICEDISCTABLE_RECID];
    END;

    ALTER TABLE [ax].[PRICEDISCTABLE]
    ADD CONSTRAINT [I_PRICEDISCTABLE_RECID] PRIMARY KEY CLUSTERED
    (
        [RECID]
    );
END

GO

-- Delete channel report stored procedures
IF OBJECT_ID(N'[crt].[GETBANKDROPREPORT]', N'P') IS NOT NULL
BEGIN
	PRINT 'Dropping [crt].[GETBANKDROPREPORT]'
	DROP PROCEDURE [crt].[GETBANKDROPREPORT];
	PRINT 'Dropped [crt].[GETBANKDROPREPORT]'
END
GO

IF OBJECT_ID(N'[crt].[GETDAYSUMMARY]', N'P') IS NOT NULL
BEGIN
	PRINT 'Dropping [crt].[GETDAYSUMMARY]'
	DROP PROCEDURE [crt].[GETDAYSUMMARY];
	PRINT 'Dropped [crt].[GETDAYSUMMARY]'
END
GO

IF OBJECT_ID(N'[crt].[GETEXPENSETRANSREPORT]', N'P') IS NOT NULL
BEGIN
	PRINT 'Dropping [crt].[GETEXPENSETRANSREPORT]'
	DROP PROCEDURE [crt].GETEXPENSETRANSREPORT;
	PRINT 'Dropped [crt].[GETEXPENSETRANSREPORT]'
END
GO

IF OBJECT_ID(N'[crt].[GETINCOMETRANSREPORT]', N'P') IS NOT NULL
BEGIN
	PRINT 'Dropping [crt].[GETINCOMETRANSREPORT]'
	DROP PROCEDURE [crt].GETINCOMETRANSREPORT;
	PRINT 'Dropped [crt].[GETINCOMETRANSREPORT]'
END
GO

IF OBJECT_ID(N'[crt].[GETOVERSHORTREPORT]', N'P') IS NOT NULL
BEGIN
	PRINT 'Dropping [crt].[GETOVERSHORTREPORT]'
	DROP PROCEDURE [crt].GETOVERSHORTREPORT;
	PRINT 'Dropped [crt].[GETOVERSHORTREPORT]'
END
GO

IF OBJECT_ID(N'[crt].[GETPRODUCTVARIANTSALES]', N'P') IS NOT NULL
BEGIN
	PRINT 'Dropping [crt].[GETPRODUCTVARIANTSALES]'
	DROP PROCEDURE [crt].GETPRODUCTVARIANTSALES;
	PRINT 'Dropped [crt].[GETPRODUCTVARIANTSALES]'
END
GO

IF OBJECT_ID(N'[crt].[GETRETURNTRANSACTIONSREPORT]', N'P') IS NOT NULL
BEGIN
	PRINT 'Dropping [crt].[GETRETURNTRANSACTIONSREPORT]'
	DROP PROCEDURE [crt].GETRETURNTRANSACTIONSREPORT;
	PRINT 'Dropped [crt].[GETRETURNTRANSACTIONSREPORT]'
END
GO

IF OBJECT_ID(N'[crt].[GETSAFEDROPREPORT]', N'P') IS NOT NULL
BEGIN
	PRINT 'Dropping [crt].[GETSAFEDROPREPORT]'
	DROP PROCEDURE [crt].GETSAFEDROPREPORT;
	PRINT 'Dropped [crt].[GETSAFEDROPREPORT]'
END
GO

IF OBJECT_ID(N'[crt].[GETSALESBYDISCOUNTREPORT]', N'P') IS NOT NULL
BEGIN
	PRINT 'Dropping [crt].[GETSALESBYDISCOUNTREPORT]'
	DROP PROCEDURE [crt].GETSALESBYDISCOUNTREPORT;
	PRINT 'Dropped [crt].[GETSALESBYDISCOUNTREPORT]'
END
GO

IF OBJECT_ID(N'[crt].[GETSALESBYHOURREPORT]', N'P') IS NOT NULL
BEGIN
	PRINT 'Dropping [crt].[GETSALESBYHOURREPORT]'
	DROP PROCEDURE [crt].GETSALESBYHOURREPORT;
	PRINT 'Dropped [crt].[GETSALESBYHOURREPORT]'
END
GO

IF OBJECT_ID(N'[crt].[GETSALESBYREGISTERREPORT]', N'P') IS NOT NULL
BEGIN
	PRINT 'Dropping [crt].[GETSALESBYREGISTERREPORT]'
	DROP PROCEDURE [crt].GETSALESBYREGISTERREPORT;
	PRINT 'Dropped [crt].[GETSALESBYREGISTERREPORT]'
END
GO

IF OBJECT_ID(N'[crt].[GETSALESBYSTAFFREPORT]', N'P') IS NOT NULL
BEGIN
	PRINT 'Dropping [crt].[GETSALESBYSTAFFREPORT]'
	DROP PROCEDURE [crt].GETSALESBYSTAFFREPORT;
	PRINT 'Dropped [crt].[GETSALESBYSTAFFREPORT]'
END
GO

IF OBJECT_ID(N'[crt].[GETSALESBYTENDERTYPEREPORT]', N'P') IS NOT NULL
BEGIN
	PRINT 'Dropping [crt].[GETSALESBYTENDERTYPEREPORT]'
	DROP PROCEDURE [crt].GETSALESBYTENDERTYPEREPORT;
	PRINT 'Dropped [crt].[GETSALESBYTENDERTYPEREPORT]'
END
GO

IF OBJECT_ID(N'[crt].[GETSTAFFRETURNSALES]', N'P') IS NOT NULL
BEGIN
	PRINT 'Dropping [crt].[GETSTAFFRETURNSALES]'
	DROP PROCEDURE [crt].GETSTAFFRETURNSALES;
	PRINT 'Dropped [crt].[GETSTAFFRETURNSALES]'
END
GO

IF OBJECT_ID(N'[crt].[GETSTOREPRICEOVERRIDESREPORT]', N'P') IS NOT NULL
BEGIN
	PRINT 'Dropping [crt].[GETSTOREPRICEOVERRIDESREPORT]'
	DROP PROCEDURE [crt].GETSTOREPRICEOVERRIDESREPORT;
	PRINT 'Dropped [crt].[GETSTOREPRICEOVERRIDESREPORT]'
END
GO

IF OBJECT_ID(N'[crt].[GETSTOREVOIDEDTRANSACTIONSREPORT]', N'P') IS NOT NULL
BEGIN
	PRINT 'Dropping [crt].[GETSTOREVOIDEDTRANSACTIONSREPORT]'
	DROP PROCEDURE [crt].GETSTOREVOIDEDTRANSACTIONSREPORT;
	PRINT 'Dropped [crt].[GETSTOREVOIDEDTRANSACTIONSREPORT]'
END
GO

IF OBJECT_ID(N'[crt].[GETTOP10PRODUCTSREPORT]', N'P') IS NOT NULL
BEGIN
	PRINT 'Dropping [crt].[GETTOP10PRODUCTSREPORT]'
	DROP PROCEDURE [crt].GETTOP10PRODUCTSREPORT;
	PRINT 'Dropped [crt].[GETTOP10PRODUCTSREPORT]'
END
GO

-- Deleting assortment indexed views
IF OBJECT_ID(N'[crt].[ASSORTEDPRODUCTSINNERVIEW]', N'V') IS NOT NULL
BEGIN
  PRINT 'Dropping [crt].[ASSORTEDPRODUCTSINNERVIEW]'
  DROP VIEW [crt].[ASSORTEDPRODUCTSINNERVIEW];
  PRINT 'Dropped [crt].[ASSORTEDPRODUCTSINNERVIEW]'
END
GO

-- Removing indexes on views to speed up CDX data sync
IF EXISTS(SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID('crt.ITEMCHANNELBASEPRICEVIEW') AND NAME = 'IX_ITEMCHANNELBASEPRICEVIEW')
BEGIN
    PRINT N'Dropping index IX_ITEMCHANNELBASEPRICEVIEW on [crt].ITEMCHANNELBASEPRICEVIEW'
    DROP INDEX IX_ITEMCHANNELBASEPRICEVIEW ON [crt].ITEMCHANNELBASEPRICEVIEW;
END

GO

IF EXISTS(SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID('crt.ITEMCHANNELTRADEAGREEMENTPRICEVIEW') AND NAME = 'IX_ITEMCHANNELTRADEAGREEMENTPRICEVIEW')
BEGIN
    PRINT N'Dropping index IX_ITEMCHANNELTRADEAGREEMENTPRICEVIEW on [crt].ITEMCHANNELTRADEAGREEMENTPRICEVIEW'
    DROP INDEX IX_ITEMCHANNELTRADEAGREEMENTPRICEVIEW ON [crt].ITEMCHANNELTRADEAGREEMENTPRICEVIEW;
END

GO

IF EXISTS(SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID('crt.CHANNELCATEGORYHIERARCHYVIEW') AND NAME = 'IX_CHANNELCATEGORYHIERARCHYVIEW')
BEGIN
    PRINT N'Dropping index IX_CHANNELCATEGORYHIERARCHYVIEW on [crt].CHANNELCATEGORYHIERARCHYVIEW'
    DROP INDEX IX_CHANNELCATEGORYHIERARCHYVIEW ON [crt].CHANNELCATEGORYHIERARCHYVIEW;
END

GO

IF EXISTS(SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID('crt.PUBCATALOGCHANNELATTRIBUTEINHERITEDVIEW') AND NAME = 'IX_PUBCATALOGCHANNELATTRIBUTEINHERITEDVIEW_CHANNEL_CATALOG')
BEGIN
    PRINT N'Dropping index IX_PUBCATALOGCHANNELATTRIBUTEINHERITEDVIEW_CHANNEL_CATALOG on [crt].PUBCATALOGCHANNELATTRIBUTEINHERITEDVIEW'
    DROP INDEX IX_PUBCATALOGCHANNELATTRIBUTEINHERITEDVIEW_CHANNEL_CATALOG ON [crt].PUBCATALOGCHANNELATTRIBUTEINHERITEDVIEW;
END

GO

IF EXISTS(SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID('crt.PUBCATALOGCHANNELATTRIBUTEINHERITEDVIEW') AND NAME = 'IX_PUBCATALOGCHANNELATTRIBUTEINHERITEDVIEW_CATALOG')
BEGIN
    PRINT N'Dropping index IX_PUBCATALOGCHANNELATTRIBUTEINHERITEDVIEW_CATALOG on [crt].PUBCATALOGCHANNELATTRIBUTEINHERITEDVIEW'
    DROP INDEX IX_PUBCATALOGCHANNELATTRIBUTEINHERITEDVIEW_CATALOG ON [crt].PUBCATALOGCHANNELATTRIBUTEINHERITEDVIEW;
END

GO

IF EXISTS(SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID('crt.PUBCATALOGCHANNELVIEW') AND NAME = 'IX_PUBCATALOGCHANNELVIEW_CHANNEL_CATALOG')
BEGIN
    PRINT N'Dropping index IX_PUBCATALOGCHANNELVIEW_CHANNEL_CATALOG on [crt].PUBCATALOGCHANNELVIEW'
    DROP INDEX IX_PUBCATALOGCHANNELVIEW_CHANNEL_CATALOG ON [crt].PUBCATALOGCHANNELVIEW;
END

GO

IF EXISTS(SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID('crt.PUBCATALOGCHANNELVIEW') AND NAME = 'IX_PUBCATALOGCHANNELVIEW_CHANNEL_CATALOG')
BEGIN
    PRINT N'Dropping index IX_PUBCATALOGCHANNELVIEW_CHANNEL_CATALOG on [crt].PUBCATALOGCHANNELVIEW'
    DROP INDEX IX_PUBCATALOGCHANNELVIEW_CHANNEL_CATALOG ON [crt].PUBCATALOGCHANNELVIEW;
END

GO

-- Start deleting triggers on [ax].[CHANNELREFINABLEATTRIBUTE]
IF OBJECT_ID(N'[ax].[CHANNELREFINABLEATTRIBUTE_INSERTED]') IS NOT NULL
BEGIN
  PRINT 'Dropping [ax].[CHANNELREFINABLEATTRIBUTE_INSERTED]'
  DROP TRIGGER [ax].[CHANNELREFINABLEATTRIBUTE_INSERTED];
  PRINT 'Dropped [ax].[CHANNELREFINABLEATTRIBUTE_INSERTED]'    
END
GO

IF OBJECT_ID(N'[ax].[CHANNELREFINABLEATTRIBUTE_UPDATED]') IS NOT NULL
BEGIN
  PRINT 'Dropping [ax].[CHANNELREFINABLEATTRIBUTE_UPDATED]'
  DROP TRIGGER [ax].[CHANNELREFINABLEATTRIBUTE_UPDATED];
  PRINT 'Dropped [ax].[CHANNELREFINABLEATTRIBUTE_UPDATED]'    
END
GO

IF OBJECT_ID(N'[ax].[CHANNELREFINABLEATTRIBUTE_DELETED]') IS NOT NULL
BEGIN
  PRINT 'Dropping [ax].[CHANNELREFINABLEATTRIBUTE_DELETED]'
  DROP TRIGGER [ax].[CHANNELREFINABLEATTRIBUTE_DELETED];
  PRINT 'Dropped [ax].[CHANNELREFINABLEATTRIBUTE_DELETED]'    
END
GO
-- End deleting triggers on [ax].[CHANNELREFINABLEATTRIBUTE]

IF EXISTS(SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID('crt.PRODUCTCATALOGRULESVIEW') AND NAME = 'IX_PRODUCTCATALOGRULESVIEW')
BEGIN
    PRINT N'Dropping index IX_PRODUCTCATALOGRULESVIEW on [crt].PRODUCTCATALOGRULESVIEW'
    DROP INDEX IX_PRODUCTCATALOGRULESVIEW ON [crt].PRODUCTCATALOGRULESVIEW;
END

GO

-------------------<END AX SCHEMA ALTERATIONS>--------------------------------------------


