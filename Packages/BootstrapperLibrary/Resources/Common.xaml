<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:sys="clr-namespace:System;assembly=mscorlib">

    <ResourceDictionary.MergedDictionaries>
        <!--Common-->
        <ResourceDictionary>
            <FontFamily x:Key="UISymbols">/Resources/Fonts/DynamicsSymbol.ttf#Dynamics Symbol</FontFamily>
            <FontFamily x:Key="SegoeUI">Segoe UI</FontFamily>
            <FontFamily x:Key="SegoeUILight">Segoe UI Light</FontFamily>
            <Brush x:Key="WindowForeground">White</Brush>
            <Brush x:Key="LightBorderBrush">#AAAAAA</Brush>
            <sys:Double x:Key="ParameterPromptControlHeight">32</sys:Double>
            <sys:Double x:Key="ButtonHeight">32</sys:Double>
            <sys:Double x:Key="ParameterPromptFontSize">14</sys:Double>
            <Thickness  x:Key="ParameterPromptPadding">8,0,0,0</Thickness>
            
            <Style TargetType="ListBox" x:Key="PreReqCheckListBox">
                <Setter Property="Margin" Value="0,0,0,20"/>
                <Setter Property="HorizontalAlignment" Value="Left"/>
                <Setter Property="VerticalAlignment" Value="Top"/>
                <Setter Property="Height" Value="200"/>
                <Setter Property="Background" Value="#FFFFFFFF"/>
            </Style>

            <Style x:Key="ListItem">
                <Setter Property="Control.FontFamily" Value="{StaticResource SegoeUI}"/>
                <Setter Property="Control.FontSize" Value="12"/>
                <Setter Property="Control.Foreground" Value="#FF1D1D1D"/>
                <Setter Property="RichTextBox.IsReadOnly" Value="True"/>
                <Setter Property="Control.VerticalAlignment" Value="Top"/>
                <Setter Property="Control.HorizontalAlignment" Value="Left"/>
                <Setter Property="Paragraph.LineHeight" Value="20"/>
                <!--For user to be able to click hyperlinks-->
                <Setter Property="RichTextBox.IsDocumentEnabled" Value="True" />
            </Style>

            <Style x:Key="RichTextBoxStyledAsLabel" BasedOn="{StaticResource ListItem}">
                <Style.Resources>
                  <Style TargetType="{x:Type Hyperlink}" BasedOn="{StaticResource {x:Type Hyperlink}}">
                    <Setter Property="Control.Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}" />
                    <Style.Triggers>
                      <Trigger Property="Control.IsMouseOver" Value="true">
                        <Setter Property="Control.Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}" />
                      </Trigger>
                    </Style.Triggers>
                  </Style>
                </Style.Resources>
                <Setter Property="Control.BorderThickness" Value="0"/>
                <Setter Property="Control.Background" Value="{Binding Background, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                <Setter Property="Control.Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
            </Style>

            <Style TargetType="Window" x:Key="CommonWindow" BasedOn="{StaticResource {x:Type Window}}">
                <Setter Property="Width" Value="560" />
                <Setter Property="Height" Value="Auto" />
                <Setter Property="SizeToContent" Value="Height" />
                <Setter Property="Background" Value="#00188E" />
                <Setter Property="Foreground" Value="{StaticResource WindowForeground}" />
                <Setter Property="ResizeMode" Value="NoResize" />
                <Setter Property="WindowStyle" Value="None" />
            </Style>

            <Style x:Key="LogoImageStyle">
                <Setter Property="Image.Stretch" Value="Fill"/>
                <Setter Property="Image.Width" Value="180"/>
                <Setter Property="Image.Height" Value="28"/>
            </Style>

            <Style x:Key="SuccessErrorImageStyle">
                <Setter Property="Image.Width" Value="28"/>
                <Setter Property="Image.Height" Value="28"/>
            </Style>


            <Style x:Key="JumboWhiteTextBlockStyle">
                <Setter Property="TextBlock.FontFamily" Value="{StaticResource SegoeUILight}"/>
                <Setter Property="TextBlock.FontSize" Value="36 px"/>
                <Setter Property="TextBlock.TextWrapping" Value="Wrap"/>
                <Setter Property="TextBlock.VerticalAlignment" Value="Top"/>
                <Setter Property="TextBlock.HorizontalAlignment" Value="Left"/>
                <Setter Property="TextBlock.Margin" Value="0,40,0,40"/>
            </Style>

            <Style x:Key="StepOneOfStyle">
                <Setter Property="TextBlock.FontFamily" Value="{StaticResource SegoeUI}"/>
                <Setter Property="TextBlock.FontSize" Value="16"/>
                <Setter Property="TextBlock.TextWrapping" Value="Wrap"/>
                <Setter Property="TextBlock.VerticalAlignment" Value="Top"/>
                <Setter Property="TextBlock.HorizontalAlignment" Value="Left"/>
                <Setter Property="TextBlock.Margin" Value="0,0,0,40"/>
            </Style>

            <Style x:Key="BaseButtonStatesStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
                <!--
                    To set a custom background for different button states, we need to override control template.
                    http://stackoverflow.com/questions/25406878/wpf-disabled-buttons-background
                -->
                <Style.Resources>
                    <ControlTemplate TargetType="{x:Type Button}" x:Key="CustomButtonTemplate">
                        <Grid>
                            <Border
                                Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
                                <ContentPresenter
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}"
                                    RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                </ContentPresenter>
                            </Border>
                        </Grid>
                    </ControlTemplate>
                </Style.Resources>
                <Setter Property="Template" Value="{StaticResource CustomButtonTemplate}"></Setter>
                <!-- Order of triggers below matters. Triggers are evaluated in order. The LAST evaluated trigger wins. -->
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="true">
                        <Setter Property="Background" Value="#20FFFFFF"></Setter>
                    </Trigger>
                    <Trigger Property="IsKeyboardFocused" Value="true">
                        <Setter Property="Background" Value="#20FFFFFF"></Setter>
                    </Trigger>
                    <!--Pressed style overrides IsMouseOver.-->
                    <Trigger Property="IsPressed" Value="true">
                        <Setter Property="Background" Value="#20000000"></Setter>
                    </Trigger>
                    <!--When button is disabled it overrides all other styles.-->
                    <Trigger Property="IsEnabled" Value="false">
                        <Setter Property="Opacity" Value="0.7"></Setter>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="WindowCloseMinimizeButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource BaseButtonStatesStyle}">
                <Setter Property="Background" Value="#00000000"></Setter>
                <Setter Property="BorderThickness" Value="0"></Setter>
                <Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"></Setter>
                <Setter Property="FontFamily" Value="{StaticResource UISymbols}"></Setter>
                <Setter Property="IsTabStop" Value="False"></Setter>
            </Style>

            <Style x:Key="NavigationButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource BaseButtonStatesStyle}">
                <Setter Property="Margin" Value="20,0,0,0"></Setter>
                <Setter Property="Padding" Value="10,0,10,0"></Setter>
                <Setter Property="HorizontalAlignment" Value="Right"></Setter>
                <Setter Property="VerticalAlignment" Value="Bottom"></Setter>
                <Setter Property="MinWidth" Value="90"></Setter>
                <Setter Property="Height" Value="{StaticResource ButtonHeight}"></Setter>
                <Setter Property="Background" Value="#00000000"></Setter>
                <Setter Property="BorderBrush" Value="{Binding Foreground, RelativeSource={RelativeSource Self}}"></Setter>
                <Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"></Setter>
            </Style>

            <!--Parameter prompt-->
            <Style x:Key="ParameterPromptControlWithLabelsAreaStyle">
                <Setter Property="FrameworkElement.Margin" Value="0,0,0,20"></Setter>
                <Setter Property="DockPanel.Dock" Value="Top"></Setter>
            </Style>

            <Style x:Key="ParameterPromptTextBlockStyle">
                <Setter Property="FrameworkElement.HorizontalAlignment" Value="Left"></Setter>
                <Setter Property="Control.Foreground" Value="{StaticResource WindowForeground}"></Setter>
                <Setter Property="TextBlock.TextWrapping" Value="Wrap"></Setter>
                <Setter Property="FrameworkElement.Margin" Value="0,0,0,8"></Setter>
            </Style>

            <Style x:Key="ParameterPromptTextInputStyle">
                <Setter Property="FrameworkElement.HorizontalAlignment" Value="Stretch"></Setter>
                <Setter Property="Control.VerticalContentAlignment" Value="Center"></Setter>
                <Setter Property="Control.Height" Value="{StaticResource ParameterPromptControlHeight}"></Setter>
                <Setter Property="Control.FontSize" Value="{StaticResource ParameterPromptFontSize}"></Setter>
                <Setter Property="Control.Background" Value="White"></Setter>

                <Setter Property="Control.Padding" Value="{StaticResource ParameterPromptPadding}"></Setter>
                <Setter Property="Control.Foreground" Value="Black"></Setter>

                <Setter Property="Validation.ErrorTemplate">
                    <Setter.Value>
                        <ControlTemplate>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="FocusVisualStyle">
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <Rectangle StrokeThickness="1"
                              Stroke="{StaticResource WindowForeground}"
                              StrokeDashArray="1 2"
                              SnapsToDevicePixels="true"/>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="ParameterPromptTextBoxStyle" BasedOn="{StaticResource ParameterPromptTextInputStyle}">
                <Setter Property="TextBox.TextWrapping" Value="NoWrap"></Setter>
                <Setter Property="TextBox.TextAlignment" Value="Left"></Setter>

                <Style.Triggers>
                    <Trigger Property="TextBox.IsReadOnly" Value="True">
                        <Setter Property="TextBox.OverridesDefaultStyle" Value="True"/>
                        <Setter Property="TextBox.FocusVisualStyle" Value="{x:Null}"/>
                        <Setter Property="Control.Background" Value="{Binding Background, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"></Setter>
                        <Setter Property="Control.Foreground" Value="{StaticResource WindowForeground}"></Setter>
                        <Setter Property="Control.BorderThickness" Value="2"></Setter>
                        <Setter Property="Control.BorderBrush" Value="{StaticResource LightBorderBrush}"></Setter>
                        <Setter Property="Control.IsTabStop" Value="False"></Setter>

                        <Setter Property="TextBox.Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type TextBoxBase}">
                                    <Border BorderThickness="{TemplateBinding BorderThickness}"
                                            BorderBrush="{StaticResource LightBorderBrush}" 
                                            Background="{TemplateBinding Background}"
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">

                                        <ScrollViewer x:Name="PART_ContentHost" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    </Border >
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="ParameterHintTextBlockStyle">
                <Setter Property="FrameworkElement.HorizontalAlignment" Value="Left"></Setter>
                <Setter Property="FrameworkElement.Margin" Value="0,6,0,0"></Setter>
                <Setter Property="Control.Foreground" Value="{StaticResource LightBorderBrush}"></Setter>
                <Setter Property="TextBlock.TextWrapping" Value="Wrap"></Setter>
            </Style>

            <Style x:Key="ComboBoxStyle" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
                <Setter Property="ComboBox.MinHeight" Value="{StaticResource ParameterPromptControlHeight}"></Setter>
            </Style>

            <Style x:Key="ComboBoxItemStyle">
                <Style.Resources>
                    <Style TargetType="{x:Type TextBlock}"  BasedOn="{StaticResource {x:Type TextBlock}}">
                        <Setter Property="TextBlock.TextWrapping" Value="Wrap"/>
                        <Setter Property="TextBlock.Margin" Value="5,0,5,0"/>
                    </Style>
                </Style.Resources>
                <Setter Property="Control.MaxWidth" Value="{Binding ActualWidth, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ComboBox}}}"></Setter>
                <Setter Property="Control.Margin" Value="0,0,0,10"></Setter>
            </Style>
        </ResourceDictionary>
    </ResourceDictionary.MergedDictionaries>
</ResourceDictionary>
