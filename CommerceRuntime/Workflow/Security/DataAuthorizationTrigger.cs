/**
 * SAMPLE CODE NOTICE
 * 
 * THIS SAMPLE CODE IS MADE AVAILABLE AS IS.  MICROSOFT MAKES NO WARRANTIES, WHETHER EXPRESS OR IMPLIED,
 * OF FITNESS FOR A PARTICULAR PURPOSE, OF ACCURACY OR COMPLETENESS OF RESPONSES, OF RESULTS, OR CONDITIONS OF MERCHANTABILITY.
 * THE ENTIRE RISK OF THE USE OR THE RESULTS FROM THE USE OF THIS SAMPLE CODE REMAINS WITH THE USER.
 * NO TECHNICAL SUPPORT IS PROVIDED.  YOU MAY NOT DISTRIBUTE THIS CODE UNLESS YOU HAVE A LICENSE AGREEMENT WITH MICROSOFT THAT ALLOWS YOU TO DO SO.
 */

/**
 * SAMPLE CODE NOTICE
 * 
 * THIS SAMPLE CODE IS MADE AVAILABLE AS IS.  MICROSOFT MAKES NO WARRANTIES, WHETHER EXPRESS OR IMPLIED,
 * OF FITNESS FOR A PARTICULAR PURPOSE, OF ACCURACY OR COMPLETENESS OF RESPONSES, OF RESULTS, OR CONDITIONS OF MERCHANTABILITY.
 * THE ENTIRE RISK OF THE USE OR THE RESULTS FROM THE USE OF THIS SAMPLE CODE REMAINS WITH THE USER.
 * NO TECHNICAL SUPPORT IS PROVIDED.  YOU MAY NOT DISTRIBUTE THIS CODE UNLESS YOU HAVE A LICENSE AGREEMENT WITH MICROSOFT THAT ALLOWS YOU TO DO SO.
 */

namespace Contoso
{
    namespace Commerce.Runtime.Workflow
    {
        using System;
        using System.Collections.Generic;
        using Microsoft.Dynamics.Commerce.Runtime;
        using Microsoft.Dynamics.Commerce.Runtime.DataModel;
        using Microsoft.Dynamics.Commerce.Runtime.DataServices.Messages;
        using Microsoft.Dynamics.Commerce.Runtime.Messages;
        using Microsoft.Dynamics.Commerce.Runtime.Services.Messages;

        /// <summary>
        /// Trigger that performs permission checks for data access.
        /// </summary>
        public class DataAuthorizationTrigger : IRequestTrigger
        {
            /// <summary>
            /// Gets the collection of request types supported by this trigger.
            /// </summary>
            public IEnumerable<Type> SupportedRequestTypes
            {
                get
                {
                    return new[]
                    {
                        typeof(GetCartsDataRequest),
                        typeof(SaveCartDataRequest),
                        typeof(GetIncomeExpenseAccountsDataRequest),
                        typeof(GetEmployeePermissionsDataRequest)
                    };
                }
            }

            /// <summary>
            /// Invoked before request has been processed by <see cref="IRequestHandler"/>.
            /// </summary>
            /// <param name="request">The incoming request message.</param>
            public void OnExecuting(Request request)
            {
                ThrowIf.Null(request, "request");

                Type requestType = request.GetType();

                if (requestType == typeof(SaveCartDataRequest))
                {
                    OnSaveCartExecuting((SaveCartDataRequest)request);
                }
                else if (requestType == typeof(GetEmployeePermissionsDataRequest))
                {
                    OnGetEmployeePermissionsExecuting((GetEmployeePermissionsDataRequest)request);
                }
                else if (requestType == typeof(GetIncomeExpenseAccountsDataRequest))
                {
                    OnGetIncomeExpenseAccountsExecuting((GetIncomeExpenseAccountsDataRequest)request);
                }
            }

            /// <summary>
            /// Invoked after request has been processed by <see cref="IRequestHandler"/>.
            /// </summary>
            /// <param name="request">The request message processed by handler.</param>
            /// <param name="response">The response message generated by handler.</param>
            public void OnExecuted(Request request, Response response)
            {
                ThrowIf.Null(request, "request");

                Type requestType = request.GetType();

                if (requestType == typeof(GetCartsDataRequest))
                {
                    OnGetCartsExecuted((GetCartsDataRequest)request, (EntityDataServiceResponse<SalesTransaction>)response);
                }
            }

            private static void OnGetIncomeExpenseAccountsExecuting(GetIncomeExpenseAccountsDataRequest request)
            {
                switch (request.IncomeExpenseType)
                {
                    case IncomeExpenseAccountType.Income:
                        request.RequestContext.Execute<NullResponse>(new CheckAccessServiceRequest(RetailOperation.IncomeAccounts));
                        break;
                    case IncomeExpenseAccountType.Expense:
                        request.RequestContext.Execute<NullResponse>(new CheckAccessServiceRequest(RetailOperation.ExpenseAccounts));
                        break;
                }
            }

            private static void OnGetEmployeePermissionsExecuting(GetEmployeePermissionsDataRequest request)
            {
                // Check if the requested Employee object is same as logged-on user. 
                // If not, check staff have manager permission.
                if (!string.Equals(request.StaffId, request.RequestContext.GetPrincipal().UserId))
                {
                    var checkAccessRequest = new CheckAccessIsManagerServiceRequest();
                    request.RequestContext.Execute<Response>(checkAccessRequest);
                }
            }

            private static void OnSaveCartExecuting(SaveCartDataRequest request)
            {
                var checkAccessRequest = new CheckAccessToCartServiceRequest(request.SalesTransactions);
                request.RequestContext.Execute<Response>(checkAccessRequest);
            }

            private static void OnGetCartsExecuted(GetCartsDataRequest request, EntityDataServiceResponse<SalesTransaction> response)
            {
                // In order to know customer id associated with the cart it needs to be loaded first, therefore permission check happens after execute.
                var checkAccessRequest = new CheckAccessToCartServiceRequest(response.PagedEntityCollection.Results);
                request.RequestContext.Execute<NullResponse>(checkAccessRequest);
            }
        }
    }
}
