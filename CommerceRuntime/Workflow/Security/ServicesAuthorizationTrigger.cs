/**
 * SAMPLE CODE NOTICE
 * 
 * THIS SAMPLE CODE IS MADE AVAILABLE AS IS.  MICROSOFT MAKES NO WARRANTIES, WHETHER EXPRESS OR IMPLIED,
 * OF FITNESS FOR A PARTICULAR PURPOSE, OF ACCURACY OR COMPLETENESS OF RESPONSES, OF RESULTS, OR CONDITIONS OF MERCHANTABILITY.
 * THE ENTIRE RISK OF THE USE OR THE RESULTS FROM THE USE OF THIS SAMPLE CODE REMAINS WITH THE USER.
 * NO TECHNICAL SUPPORT IS PROVIDED.  YOU MAY NOT DISTRIBUTE THIS CODE UNLESS YOU HAVE A LICENSE AGREEMENT WITH MICROSOFT THAT ALLOWS YOU TO DO SO.
 */

/**
 * SAMPLE CODE NOTICE
 * 
 * THIS SAMPLE CODE IS MADE AVAILABLE AS IS.  MICROSOFT MAKES NO WARRANTIES, WHETHER EXPRESS OR IMPLIED,
 * OF FITNESS FOR A PARTICULAR PURPOSE, OF ACCURACY OR COMPLETENESS OF RESPONSES, OF RESULTS, OR CONDITIONS OF MERCHANTABILITY.
 * THE ENTIRE RISK OF THE USE OR THE RESULTS FROM THE USE OF THIS SAMPLE CODE REMAINS WITH THE USER.
 * NO TECHNICAL SUPPORT IS PROVIDED.  YOU MAY NOT DISTRIBUTE THIS CODE UNLESS YOU HAVE A LICENSE AGREEMENT WITH MICROSOFT THAT ALLOWS YOU TO DO SO.
 */

namespace Contoso
{
    namespace Commerce.Runtime.Workflow
    {
        using System;
        using System.Collections.Generic;
        using System.Linq;
        using Microsoft.Dynamics.Commerce.Runtime;
        using Microsoft.Dynamics.Commerce.Runtime.DataModel;
        using Microsoft.Dynamics.Commerce.Runtime.DataServices.Messages;
        using Microsoft.Dynamics.Commerce.Runtime.Messages;
        using Microsoft.Dynamics.Commerce.Runtime.Services.Messages;

        /// <summary>
        /// Trigger that performs permission checks for services.
        /// </summary>
        public class ServicesAuthorizationTrigger : IRequestTrigger
        {
            /// <summary>
            /// Gets the collection of request types supported by this trigger.
            /// </summary>
            public IEnumerable<Type> SupportedRequestTypes
            {
                get
                {
                    return new[]
                    {
                        typeof(AuthorizePaymentServiceRequest),
                        typeof(SaveNonSaleTenderServiceRequest),
                        typeof(GetNonSaleTenderServiceRequest),
                        typeof(SaveDropAndDeclareServiceRequest),
                        typeof(CalculateTaxServiceRequest),
                        typeof(SearchJournalTransactionsServiceRequest)
                    };
                }
            }

            /// <summary>
            /// Invoked before request has been processed by <see cref="IRequestHandler"/>.
            /// </summary>
            /// <param name="request">The incoming request message.</param>
            public void OnExecuting(Request request)
            {
                ThrowIf.Null(request, "request");

                Type requestType = request.GetType();

                if (requestType == typeof(AuthorizePaymentServiceRequest))
                {
                    OnAuthorizePaymentExecuting((AuthorizePaymentServiceRequest)request);
                }
                else if (requestType == typeof(GetNonSaleTenderServiceRequest))
                {
                    OnNonSaleTenderExecuting((GetNonSaleTenderServiceRequest)request);
                }
                else if (requestType == typeof(SaveNonSaleTenderServiceRequest))
                {
                    OnNonSaleTenderExecuting((SaveNonSaleTenderServiceRequest)request);
                }
                else if (requestType == typeof(SaveDropAndDeclareServiceRequest))
                {
                    OnSaveDropAndDeclareExecuting((SaveDropAndDeclareServiceRequest)request);
                }
                else if (requestType == typeof(CalculateTaxServiceRequest))
                {
                    OnCalculateTaxExecuting((CalculateTaxServiceRequest)request);
                }
                else if (requestType == typeof(SearchJournalTransactionsServiceRequest))
                {
                    OnSearchJournalTransactionsExecuting((SearchJournalTransactionsServiceRequest)request);
                }
            }

            /// <summary>
            /// Invoked after request has been processed by <see cref="IRequestHandler"/>.
            /// </summary>
            /// <param name="request">The request message processed by handler.</param>
            /// <param name="response">The response message generated by handler.</param>
            public void OnExecuted(Request request, Response response)
            {
            }

            private static void OnCalculateTaxExecuting(CalculateTaxServiceRequest request)
            {
                if (!string.IsNullOrWhiteSpace(request.Transaction.TaxOverrideCode))
                {
                    request.RequestContext.Execute<NullResponse>(new CheckAccessServiceRequest(RetailOperation.OverrideTaxTransactionList));
                }
            }

            private static void OnSaveDropAndDeclareExecuting(SaveDropAndDeclareServiceRequest request)
            {
                switch (request.TransactionType)
                {
                    case TransactionType.BankDrop:
                        request.RequestContext.Execute<NullResponse>(new CheckAccessServiceRequest(RetailOperation.BankDrop));
                        break;
                    case TransactionType.SafeDrop:
                        request.RequestContext.Execute<NullResponse>(new CheckAccessServiceRequest(RetailOperation.SafeDrop));
                        break;
                    case TransactionType.TenderDeclaration:
                        bool isNonDrawerOperationCheckRequired = IsNonDrawerOperationCheckRequired(request.RequestContext, request.ShiftId);
                        request.RequestContext.Execute<NullResponse>(new CheckAccessServiceRequest(RetailOperation.TenderDeclaration, isNonDrawerOperationCheckRequired));
                        break;
                }
            }

            private static void OnNonSaleTenderExecuting(NonSaleTenderServiceRequest request)
            {
                switch (request.TransactionType)
                {
                    case TransactionType.StartingAmount:
                        bool isNonDrawerOperationCheckRequired = IsNonDrawerOperationCheckRequired(request.RequestContext, request.ShiftId);
                        request.RequestContext.Execute<NullResponse>(new CheckAccessServiceRequest(RetailOperation.DeclareStartAmount, isNonDrawerOperationCheckRequired));
                        break;
                    case TransactionType.FloatEntry:
                        request.RequestContext.Execute<NullResponse>(new CheckAccessServiceRequest(RetailOperation.FloatEntry));
                        break;
                    case TransactionType.RemoveTender:
                        request.RequestContext.Execute<NullResponse>(new CheckAccessServiceRequest(RetailOperation.TenderRemoval));
                        break;
                    case TransactionType.OpenDrawer:
                        request.RequestContext.Execute<NullResponse>(new CheckAccessServiceRequest(RetailOperation.OpenDrawer));
                        break;
                }
            }

            private static bool IsNonDrawerOperationCheckRequired(RequestContext context, string shiftId)
            {
                // Triggers non-drawer operation check if the context is in non-drawer mode and the shift Id is not provided in the request, 
                // if the shift Id is provided (e.g. for blind-closed shift), we should skip the non-drawer operation check
                return (context.GetPrincipal().ShiftId == 0) && (string.IsNullOrWhiteSpace(shiftId) || (shiftId == "0"));
            }

            private static void OnAuthorizePaymentExecuting(AuthorizePaymentServiceRequest request)
            {
                // Call to get tender types (cached).
                var dataServiceRequest = new GetChannelTenderTypesDataRequest(request.RequestContext.GetPrincipal().ChannelId, QueryResultSettings.AllRecords);
                var response = request.RequestContext.Execute<EntityDataServiceResponse<TenderType>>(dataServiceRequest);
                TenderType tenderType = response.PagedEntityCollection.Results.Single(t => string.Equals(t.TenderTypeId, request.TenderLine.TenderTypeId, StringComparison.OrdinalIgnoreCase));

                switch (tenderType.OperationType)
                {
                    case RetailOperation.PayCreditMemo:
                        if (request.TenderLine.Amount < 0)
                        {
                            request.RequestContext.Execute<NullResponse>(new CheckAccessServiceRequest(RetailOperation.IssueCreditMemo));
                        }

                        break;
                    default:
                        request.RequestContext.Execute<NullResponse>(new CheckAccessServiceRequest(tenderType.OperationType));
                        break;
                }
            }

            private static void OnSearchJournalTransactionsExecuting(SearchJournalTransactionsServiceRequest request)
            {
                if (!string.IsNullOrWhiteSpace(request.Criteria.CustomerAccountNumber) ||
                    !string.IsNullOrWhiteSpace(request.Criteria.CustomerFirstName) ||
                    !string.IsNullOrWhiteSpace(request.Criteria.CustomerLastName))
                {
                    request.RequestContext.Execute<NullResponse>(new CheckAccessServiceRequest(RetailOperation.CustomerTransactions));
                }

                var checkAccessServiceRequest = new CheckAccessServiceRequest(RetailOperation.ShowJournal);
                request.RequestContext.Execute<NullResponse>(checkAccessServiceRequest);
            }
        }
    }
}